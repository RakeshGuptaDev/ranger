/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.apache.ranger.services.tag;

import org.apache.ranger.plugin.model.RangerPolicy;
import org.apache.ranger.plugin.model.RangerService;
import org.apache.ranger.plugin.model.RangerServiceDef;
import org.apache.ranger.plugin.model.RangerServiceDef.RangerAccessTypeDef;
import org.apache.ranger.plugin.model.RangerServiceDef.RangerPolicyConditionDef;
import org.apache.ranger.plugin.model.RangerServiceDef.RangerResourceDef;
import org.apache.ranger.plugin.service.ResourceLookupContext;
import org.apache.ranger.plugin.store.TagStore;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import static org.apache.ranger.services.tag.RangerServiceTag.RANGER_TAG_EXPIRY_CONDITION_NAME;
import static org.apache.ranger.services.tag.RangerServiceTag.RANGER_TAG_NAME_EXPIRES_ON;
import static org.apache.ranger.services.tag.RangerServiceTag.TAG_RESOURCE_NAME;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.mockito.Mockito.when;

/**
* @generated by Cursor
* @description <Unit Test for RangerServiceTag class>
*/
@ExtendWith(MockitoExtension.class)
@TestMethodOrder(MethodOrderer.MethodName.class)
public class TestRangerServiceTag {
    @Test
    public void test01_lookupResource_filtersAndWildcardMatches() throws Exception {
        TagStore tagStore = Mockito.mock(TagStore.class);
        when(tagStore.getTagTypes()).thenReturn(new ArrayList<>(Arrays.asList("Finance", "HR", "PII")));

        RangerServiceTag svc = new RangerServiceTag();
        svc.setTagStore(tagStore);
        svc.init(new RangerServiceDef(), new RangerService());

        ResourceLookupContext ctx = new ResourceLookupContext();
        ctx.setResourceName(TAG_RESOURCE_NAME);
        ctx.setUserInput("F*");
        Map<String, List<String>> resources = new HashMap<>();
        resources.put(TAG_RESOURCE_NAME, new ArrayList<>(Arrays.asList("HR")));
        ctx.setResources(resources);

        List<String> result = svc.lookupResource(ctx);
        assertNotNull(result);
        assertEquals(1, result.size());
        assertEquals("Finance", result.get(0));
    }

    @Test
    public void test02_lookupResource_handlesNullsGracefully() throws Exception {
        RangerServiceTag svc = new RangerServiceTag();
        svc.init(new RangerServiceDef(), new RangerService());

        // context resourceName mismatch should yield empty
        ResourceLookupContext ctx = new ResourceLookupContext();
        ctx.setResourceName("not-tag");
        ctx.setUserInput("A*");
        List<String> result = svc.lookupResource(ctx);
        assertNotNull(result);
        assertTrue(result.isEmpty());

        // null context should yield empty
        List<String> result2 = svc.lookupResource(null);
        assertNotNull(result2);
        assertTrue(result2.isEmpty());
    }

    @Test
    public void test03_getDefaultRangerPolicies_whenConditionMissing_returnsEmptyAndLogs() throws Exception {
        RangerServiceTag svc = new RangerServiceTag();

        RangerServiceDef def = new RangerServiceDef();
        def.setResources(new ArrayList<>());
        def.setPolicyConditions(new ArrayList<>()); // missing expiry condition

        RangerService service = new RangerService();
        service.setName("tag-svc");
        service.setType("tag");

        svc.init(def, service);
        List<RangerPolicy> defaultPolicies = svc.getDefaultRangerPolicies();
        assertNotNull(defaultPolicies);
        assertTrue(defaultPolicies.isEmpty());
    }

    @Test
    public void test04_getDefaultRangerPolicies_populatesDenyPoliciesWithExpiryCondition() throws Exception {
        RangerServiceTag svc = new RangerServiceTag();

        RangerServiceDef def = new RangerServiceDef();
        def.setName("tag-def");
        def.setResources(new ArrayList<>(Arrays.asList(new RangerResourceDef())));
        // provide a mandatory resource name used as tag resource key
        def.getResources().get(0).setName(TAG_RESOURCE_NAME);
        def.getResources().get(0).setMandatory(true);

        List<RangerPolicyConditionDef> conds = new ArrayList<>();
        RangerPolicyConditionDef expiryCond = new RangerPolicyConditionDef();
        expiryCond.setName(RANGER_TAG_EXPIRY_CONDITION_NAME);
        conds.add(expiryCond);
        def.setPolicyConditions(conds);
        def.setAccessTypes(new ArrayList<>(Arrays.asList(new RangerAccessTypeDef("read"))));

        RangerService service = new RangerService();
        service.setName("tag-svc");
        service.setType("tag");
        Map<String, String> configs = new HashMap<>();
        configs.put("create.default.policy.per.hierarchy", "true");
        configs.put("default.policy.groups", "public");
        service.setConfigs(configs);

        svc.init(def, service);
        List<RangerPolicy> defaultPolicies = svc.getDefaultRangerPolicies();
        assertNotNull(defaultPolicies);
        // at least one default deny policy must be present and modified
        assertTrue(defaultPolicies.size() >= 1);

        RangerPolicy p = defaultPolicies.stream().filter(dp -> RANGER_TAG_NAME_EXPIRES_ON.equals(dp.getName()))
                .findFirst().orElse(null);
        assertNotNull(p);
        assertEquals("Policy for data with " + RANGER_TAG_NAME_EXPIRES_ON + " tag", p.getDescription());
        assertTrue(p.getDenyPolicyItems() != null && !p.getDenyPolicyItems().isEmpty());
    }

    @Test
    public void test05_lookupResource_appendsWildcardWhenMissing() throws Exception {
        TagStore tagStore = Mockito.mock(TagStore.class);
        when(tagStore.getTagTypes()).thenReturn(new ArrayList<>(Arrays.asList("Finance", "HR", "PII")));

        RangerServiceTag svc = new RangerServiceTag();
        svc.setTagStore(tagStore);
        svc.init(new RangerServiceDef(), new RangerService());

        ResourceLookupContext ctx = new ResourceLookupContext();
        ctx.setResourceName(TAG_RESOURCE_NAME);
        ctx.setUserInput("PI"); // should be treated as "PI*"

        List<String> result = svc.lookupResource(ctx);
        assertNotNull(result);
        assertEquals(1, result.size());
        assertEquals("PII", result.get(0));
    }

    @Test
    public void test06_lookupResource_returnsEmptyWhenTagStoreNull() throws Exception {
        RangerServiceTag svc = new RangerServiceTag();
        svc.init(new RangerServiceDef(), new RangerService());

        ResourceLookupContext ctx = new ResourceLookupContext();
        ctx.setResourceName(TAG_RESOURCE_NAME);
        ctx.setUserInput("F*");

        List<String> result = svc.lookupResource(ctx);
        assertNotNull(result);
        assertTrue(result.isEmpty());
    }

    @Test
    public void test07_lookupResource_handlesTagStoreException() throws Exception {
        TagStore tagStore = Mockito.mock(TagStore.class);
        when(tagStore.getTagTypes()).thenThrow(new RuntimeException("boom"));

        RangerServiceTag svc = new RangerServiceTag();
        svc.setTagStore(tagStore);
        svc.init(new RangerServiceDef(), new RangerService());

        ResourceLookupContext ctx = new ResourceLookupContext();
        ctx.setResourceName(TAG_RESOURCE_NAME);
        ctx.setUserInput("A*");

        List<String> result = svc.lookupResource(ctx);
        assertNotNull(result);
        assertTrue(result.isEmpty());
    }

    @Test
    public void test08_validateConfig_returnsConnectivityTrue() throws Exception {
        RangerServiceTag svc = new RangerServiceTag();
        svc.init(new RangerServiceDef(), new RangerService());

        Map<String, Object> validated = svc.validateConfig();
        assertNotNull(validated);
        assertEquals(Boolean.TRUE, validated.get("connectivityStatus"));
    }

    @Test
    public void test09_getDefaultRangerPolicies_whenConditionPresentButNoResources_returnsListUnmodified() throws Exception {
        RangerServiceTag svc = new RangerServiceTag();

        RangerServiceDef def = new RangerServiceDef();
        def.setResources(new ArrayList<>()); // empty resources
        List<RangerPolicyConditionDef> conds = new ArrayList<>();
        RangerPolicyConditionDef expiryCond = new RangerPolicyConditionDef();
        expiryCond.setName(RANGER_TAG_EXPIRY_CONDITION_NAME);
        conds.add(expiryCond);
        def.setPolicyConditions(conds);
        def.setAccessTypes(new ArrayList<>(Arrays.asList(new RangerAccessTypeDef("read"))));

        RangerService service = new RangerService();
        service.setName("tag-svc");
        service.setType("tag");

        svc.init(def, service);
        List<RangerPolicy> defaultPolicies = svc.getDefaultRangerPolicies();
        assertNotNull(defaultPolicies);
        // when resources are empty, method should not throw and simply return whatever super returns
    }
}
