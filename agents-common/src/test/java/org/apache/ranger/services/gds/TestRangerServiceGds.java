/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.apache.ranger.services.gds;

import org.apache.ranger.plugin.model.RangerService;
import org.apache.ranger.plugin.model.RangerServiceDef;
import org.apache.ranger.plugin.service.ResourceLookupContext;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;

import java.util.List;
import java.util.Map;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertTrue;

/**
* @generated by Cursor
* @description <Unit Test for RangerServiceGds class>
*/
@ExtendWith(MockitoExtension.class)
@TestMethodOrder(MethodOrderer.MethodName.class)
public class TestRangerServiceGds {
    @Test
    public void test01_init_setsFields() {
        RangerServiceDef def = new RangerServiceDef();
        RangerService svc = new RangerService();
        svc.setName("gds-service");
        svc.setType("gds");

        RangerServiceGds gds = new RangerServiceGds();
        gds.init(def, svc);

        // validateConfig uses serviceName, so ensure it was set via init()
        Map<String, Object> validated;
        try {
            validated = gds.validateConfig();
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
        assertNotNull(validated);
        assertTrue((Boolean) validated.get("connectivityStatus"));
    }

    @Test
    public void test02_validateConfig_returnsConnectivityStatus() throws Exception {
        RangerServiceGds gds = new RangerServiceGds();
        gds.init(new RangerServiceDef(), new RangerService());

        Map<String, Object> result = gds.validateConfig();
        assertNotNull(result);
        assertEquals(Boolean.TRUE, result.get("connectivityStatus"));
    }

    @Test
    public void test03_lookupResource_returnsEmptyList() throws Exception {
        RangerServiceGds gds = new RangerServiceGds();
        gds.init(new RangerServiceDef(), new RangerService());

        List<String> out = gds.lookupResource(new ResourceLookupContext());
        assertNotNull(out);
        assertTrue(out.isEmpty());
    }
}
