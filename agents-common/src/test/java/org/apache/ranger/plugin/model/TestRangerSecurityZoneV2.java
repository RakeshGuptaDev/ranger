/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package org.apache.ranger.plugin.model;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
* @generated by Cursor
* @description <Unit Test for RangerSecurityZoneV2 class>
*/
@TestMethodOrder(MethodOrderer.MethodName.class)
@ExtendWith(MockitoExtension.class)
public class TestRangerSecurityZoneV2 {
    @Test
    public void test01_defaultsAndSetters() {
        RangerSecurityZoneV2 v2 = new RangerSecurityZoneV2();
        Assertions.assertNotNull(v2.getServices());
        Assertions.assertNotNull(v2.getTagServices());
        Assertions.assertNotNull(v2.getAdmins());
        Assertions.assertNotNull(v2.getAuditors());

        v2.setName("nz");
        v2.setDescription("desc");
        v2.setAdmins(new ArrayList<>());
        v2.setAuditors(new ArrayList<>());
        v2.setTagServices(new ArrayList<>());
        v2.setServices(null);

        Assertions.assertEquals("nz", v2.getName());
        Assertions.assertEquals("desc", v2.getDescription());
        Assertions.assertNotNull(v2.getServices());
    }

    @Test
    public void test02_convertFromV1AndBack() {
        RangerSecurityZone v1 = new RangerSecurityZone();
        v1.setId(10L);
        v1.setGuid("g");
        v1.setIsEnabled(Boolean.TRUE);
        v1.setCreatedBy("creator");
        v1.setUpdatedBy("upd");
        v1.setName("zone1");
        v1.setDescription("d");
        v1.setTagServices(new ArrayList<>());
        v1.getTagServices().add("tags1");
        v1.setAdminUsers(new ArrayList<>());
        v1.getAdminUsers().add("u1");
        v1.setAdminUserGroups(new ArrayList<>());
        v1.getAdminUserGroups().add("g1");
        v1.setAdminRoles(new ArrayList<>());
        v1.getAdminRoles().add("r1");
        v1.setAuditUsers(new ArrayList<>());
        v1.getAuditUsers().add("u2");
        v1.setAuditUserGroups(new ArrayList<>());
        v1.getAuditUserGroups().add("g2");
        v1.setAuditRoles(new ArrayList<>());
        v1.getAuditRoles().add("r2");

        Map<String, RangerSecurityZone.RangerSecurityZoneService> services = new HashMap<>();
        RangerSecurityZone.RangerSecurityZoneService v1svc = new RangerSecurityZone.RangerSecurityZoneService();
        v1svc.setResources(new ArrayList<>());
        HashMap<String, List<String>> resMap = new HashMap<>();
        resMap.put("db", new ArrayList<>());
        resMap.get("db").add("sales");
        v1svc.getResources().add(resMap);
        v1svc.setResourcesBaseInfo(new ArrayList<>());
        RangerSecurityZoneV2.RangerSecurityZoneResourceBase base = new RangerSecurityZoneV2.RangerSecurityZoneResourceBase();
        base.setId(1L);
        v1svc.getResourcesBaseInfo().add(base);
        services.put("hive", v1svc);
        v1.setServices(services);

        RangerSecurityZoneV2 v2 = new RangerSecurityZoneV2(v1);
        Assertions.assertEquals("zone1", v2.getName());
        Assertions.assertEquals(1, v2.getServices().get("hive").getResources().size());
        Assertions.assertEquals(3, v2.getAdmins().size());
        Assertions.assertEquals(3, v2.getAuditors().size());

        RangerSecurityZone back = v2.toV1();
        Assertions.assertEquals(v1.getId(), back.getId());
        Assertions.assertEquals(v1.getGuid(), back.getGuid());
        Assertions.assertEquals(v1.getIsEnabled(), back.getIsEnabled());
        Assertions.assertEquals("zone1", back.getName());
        Assertions.assertEquals("d", back.getDescription());
        Assertions.assertEquals(v1.getTagServices(), back.getTagServices());
        Assertions.assertTrue(back.getAdminUsers().contains("u1"));
        Assertions.assertTrue(back.getAdminUserGroups().contains("g1"));
        Assertions.assertTrue(back.getAdminRoles().contains("r1"));
        Assertions.assertTrue(back.getAuditUsers().contains("u2"));
        Assertions.assertTrue(back.getAuditUserGroups().contains("g2"));
        Assertions.assertTrue(back.getAuditRoles().contains("r2"));
        Assertions.assertEquals(resMap, back.getServices().get("hive").getResources().get(0));
        Assertions.assertEquals(1, back.getServices().get("hive").getResourcesBaseInfo().size());
    }

    @Test
    public void test03_nestedToStringCoverage() {
        RangerSecurityZoneV2.RangerSecurityZoneServiceV2 svc = new RangerSecurityZoneV2.RangerSecurityZoneServiceV2();
        List<RangerSecurityZoneV2.RangerSecurityZoneResource> resList = new ArrayList<>();
        Map<String, List<String>> res = new HashMap<>();
        res.put("path", new ArrayList<>());
        res.get("path").add("/data");
        RangerSecurityZoneV2.RangerSecurityZoneResourceBase base = new RangerSecurityZoneV2.RangerSecurityZoneResourceBase();
        base.setId(11L);
        RangerSecurityZoneV2.RangerSecurityZoneResource rs = new RangerSecurityZoneV2.RangerSecurityZoneResource(res,
                base);
        resList.add(rs);
        svc.setResources(resList);

        String s1 = svc.toString();
        Assertions.assertTrue(s1.contains("resources=["));
        String s2 = rs.toString();
        Assertions.assertTrue(s2.contains("resource-def-name=path"));
        String s3 = base.toString();
        Assertions.assertTrue(s3.contains("id=11"));
    }
}
