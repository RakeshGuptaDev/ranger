/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package org.apache.ranger.plugin.model;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
* @generated by Cursor
* @description <Unit Test for RangerTagDef class>
*/
@TestMethodOrder(MethodOrderer.MethodName.class)
@ExtendWith(MockitoExtension.class)
public class TestRangerTagDef {
    @Test
    public void test01_defaultsAndSetters() {
        RangerTagDef def = new RangerTagDef();
        Assertions.assertEquals("", def.getName());
        Assertions.assertEquals("Internal", def.getSource());

        def.setName("PII");
        def.setSource("Atlas");
        Assertions.assertEquals("PII", def.getName());
        Assertions.assertEquals("Atlas", def.getSource());

        List<RangerTagDef.RangerTagAttributeDef> attrs = new ArrayList<>();
        attrs.add(new RangerTagDef.RangerTagAttributeDef("level", "string"));
        def.setAttributeDefs(attrs);
        Assertions.assertEquals(attrs, def.getAttributeDefs());
    }

    @Test
    public void test02_dedupStringsAndEqualsHashCode() {
        RangerTagDef.RangerTagAttributeDef ad1 = new RangerTagDef.RangerTagAttributeDef("n", "t");
        RangerTagDef.RangerTagAttributeDef ad2 = new RangerTagDef.RangerTagAttributeDef("n", "t");
        Assertions.assertEquals(ad1, ad2);
        Assertions.assertEquals(ad1.hashCode(), ad2.hashCode());

        RangerTagDef def1 = new RangerTagDef("PII", "Atlas");
        List<RangerTagDef.RangerTagAttributeDef> list1 = new ArrayList<>();
        list1.add(ad1);
        def1.setAttributeDefs(list1);

        RangerTagDef def2 = new RangerTagDef("PII", "Atlas");
        List<RangerTagDef.RangerTagAttributeDef> list2 = new ArrayList<>();
        list2.add(new RangerTagDef.RangerTagAttributeDef("n", "t"));
        def2.setAttributeDefs(list2);

        Assertions.assertEquals(def1, def2);
        Assertions.assertEquals(def1.hashCode(), def2.hashCode());

        Map<String, String> tbl = new HashMap<>();
        def1.dedupStrings(tbl);
        Assertions.assertTrue(tbl.isEmpty() || tbl.containsKey("PII") || tbl.containsKey("Atlas"));
    }
}
