/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.apache.ranger.plugin.util;

import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;

import java.util.concurrent.TimeUnit;
import java.util.concurrent.locks.ReentrantLock;
import java.util.concurrent.locks.ReentrantReadWriteLock;

import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertTrue;

/**
* @generated by Cursor
* @description <Unit Test for AutoClosableLock class>
*/
@ExtendWith(MockitoExtension.class)
@TestMethodOrder(MethodOrderer.MethodName.class)
public class TestAutoClosableLock {
    @Test
    public void test01_simpleLockUnlock() {
        ReentrantLock lock = new ReentrantLock();
        assertFalse(lock.isLocked());
        try (AutoClosableLock ignored = new AutoClosableLock(lock)) {
            assertTrue(lock.isLocked());
        }
        assertFalse(lock.isLocked());
    }

    @Test
    public void test02_tryLock_withTimeout_acquired() {
        ReentrantLock lock = new ReentrantLock();
        try (AutoClosableLock.AutoClosableTryLock tryLock = new AutoClosableLock.AutoClosableTryLock(lock, 50,
                TimeUnit.MILLISECONDS)) {
            assertTrue(tryLock.isLocked());
        }
        assertFalse(lock.isLocked());
    }

    @Test
    public void test03_tryWriteLock_acquiredAndReleased() {
        ReentrantReadWriteLock rw = new ReentrantReadWriteLock();
        try (AutoClosableLock.AutoClosableTryWriteLock tryWrite = new AutoClosableLock.AutoClosableTryWriteLock(rw)) {
            assertTrue(tryWrite.isLocked());
        }
        assertFalse(rw.isWriteLocked());
    }

    @Test
    public void test04_readAndWriteLock_scopes() {
        ReentrantReadWriteLock rw = new ReentrantReadWriteLock();
        assertFalse(rw.isWriteLocked());
        try (AutoClosableLock.AutoClosableReadLock ignored = new AutoClosableLock.AutoClosableReadLock(rw)) {
            assertTrue(rw.getReadLockCount() > 0);
        }
        assertTrue(rw.getReadLockCount() == 0);

        try (AutoClosableLock.AutoClosableWriteLock ignored = new AutoClosableLock.AutoClosableWriteLock(rw)) {
            assertTrue(rw.isWriteLocked());
        }
        assertFalse(rw.isWriteLocked());
    }
}
