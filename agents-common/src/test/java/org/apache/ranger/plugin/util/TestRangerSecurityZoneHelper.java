/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.apache.ranger.plugin.util;

import org.apache.ranger.plugin.model.RangerPrincipal;
import org.apache.ranger.plugin.model.RangerSecurityZone;
import org.apache.ranger.plugin.model.RangerSecurityZoneV2.RangerSecurityZoneChangeRequest;
import org.apache.ranger.plugin.model.RangerSecurityZoneV2.RangerSecurityZoneResource;
import org.apache.ranger.plugin.model.RangerSecurityZoneV2.RangerSecurityZoneServiceV2;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertThrows;

/**
* @generated by Cursor
* @description <Unit Test for RangerSecurityZoneHelper class>
*/
@ExtendWith(MockitoExtension.class)
@TestMethodOrder(MethodOrderer.MethodName.class)
public class TestRangerSecurityZoneHelper {
    @Test
    public void test01_updateZone_addResourceAndTagService() throws Exception {
        RangerSecurityZone zone = new RangerSecurityZone();
        zone.setServices(new HashMap<>());
        zone.setTagServices(new ArrayList<>());
        zone.setAdminUsers(new ArrayList<>());
        zone.setAdminUserGroups(new ArrayList<>());
        zone.setAdminRoles(new ArrayList<>());
        zone.setAuditUsers(new ArrayList<>());
        zone.setAuditUserGroups(new ArrayList<>());
        zone.setAuditRoles(new ArrayList<>());

        RangerSecurityZoneHelper helper = new RangerSecurityZoneHelper(zone, "user");

        Map<String, List<String>> resMap = new HashMap<>();
        resMap.put("path", new ArrayList<>(Arrays.asList("/a")));
        RangerSecurityZoneResource rsrc = new RangerSecurityZoneResource(resMap);
        List<RangerSecurityZoneResource> rsrcs = new ArrayList<>();
        rsrcs.add(rsrc);
        RangerSecurityZoneServiceV2 svcV2 = new RangerSecurityZoneServiceV2(rsrcs);
        Map<String, RangerSecurityZoneServiceV2> update = new HashMap<>();
        update.put("svcA", svcV2);

        RangerSecurityZoneChangeRequest req = new RangerSecurityZoneChangeRequest();
        req.setResourcesToUpdate(update);
        req.setTagServicesToAdd(new ArrayList<>(Arrays.asList("tagSvc")));
        req.setAdminsToAdd(
                new ArrayList<>(Arrays.asList(new RangerPrincipal(RangerPrincipal.PrincipalType.USER, "u1"))));
        req.setAuditorsToAdd(
                new ArrayList<>(Arrays.asList(new RangerPrincipal(RangerPrincipal.PrincipalType.USER, "u2"))));

        assertDoesNotThrow(() -> helper.updateZone(req));
        // service should be present now
        assertEquals(1, zone.getServices().size());
        assertEquals(1, zone.getTagServices().size());
    }

    @Test
    public void test02_updateZone_removeFromMissingService_throws() {
        RangerSecurityZone zone = new RangerSecurityZone();
        zone.setServices(new HashMap<>());
        zone.setTagServices(new ArrayList<>());
        zone.setAdminUsers(new ArrayList<>());
        zone.setAdminUserGroups(new ArrayList<>());
        zone.setAdminRoles(new ArrayList<>());
        zone.setAuditUsers(new ArrayList<>());
        zone.setAuditUserGroups(new ArrayList<>());
        zone.setAuditRoles(new ArrayList<>());
        RangerSecurityZoneHelper helper = new RangerSecurityZoneHelper(zone, "user");

        RangerSecurityZoneServiceV2 svcV2 = new RangerSecurityZoneServiceV2(new ArrayList<>());
        Map<String, RangerSecurityZoneServiceV2> remove = new HashMap<>();
        remove.put("missingSvc", svcV2);

        RangerSecurityZoneChangeRequest req = new RangerSecurityZoneChangeRequest();
        req.setResourcesToRemove(remove);

        assertThrows(Exception.class, () -> helper.updateZone(req));
    }

    @Test
    public void test03_updateZone_removeNonExistingTagService_throws() {
        RangerSecurityZone zone = new RangerSecurityZone();
        zone.setServices(new HashMap<>());
        zone.setTagServices(new ArrayList<>());
        zone.setAdminUsers(new ArrayList<>());
        zone.setAdminUserGroups(new ArrayList<>());
        zone.setAdminRoles(new ArrayList<>());
        zone.setAuditUsers(new ArrayList<>());
        zone.setAuditUserGroups(new ArrayList<>());
        zone.setAuditRoles(new ArrayList<>());
        RangerSecurityZoneHelper helper = new RangerSecurityZoneHelper(zone, "user");

        RangerSecurityZoneChangeRequest req = new RangerSecurityZoneChangeRequest();
        req.setTagServicesToRemove(new ArrayList<>(Arrays.asList("tagSvc")));
        assertThrows(Exception.class, () -> helper.updateZone(req));
    }

    @Test
    public void test04_addExistingAdmin_throws() throws Exception {
        RangerSecurityZone zone = new RangerSecurityZone();
        zone.setServices(new HashMap<>());
        zone.setTagServices(new ArrayList<>());
        zone.setAdminUsers(new ArrayList<>(Arrays.asList("u1")));
        zone.setAdminUserGroups(new ArrayList<>());
        zone.setAdminRoles(new ArrayList<>());
        zone.setAuditUsers(new ArrayList<>());
        zone.setAuditUserGroups(new ArrayList<>());
        zone.setAuditRoles(new ArrayList<>());
        RangerSecurityZoneHelper helper = new RangerSecurityZoneHelper(zone, "user");

        RangerSecurityZoneChangeRequest req = new RangerSecurityZoneChangeRequest();
        req.setAdminsToAdd(new ArrayList<>(Arrays.asList(new RangerPrincipal(RangerPrincipal.PrincipalType.USER, "u1"))));
        assertThrows(Exception.class, () -> helper.updateZone(req));
    }

    @Test
    public void test05_removeNonExistingAdmin_throws() {
        RangerSecurityZone zone = new RangerSecurityZone();
        zone.setServices(new HashMap<>());
        zone.setTagServices(new ArrayList<>());
        zone.setAdminUsers(new ArrayList<>());
        zone.setAdminUserGroups(new ArrayList<>());
        zone.setAdminRoles(new ArrayList<>());
        zone.setAuditUsers(new ArrayList<>());
        zone.setAuditUserGroups(new ArrayList<>());
        zone.setAuditRoles(new ArrayList<>());
        RangerSecurityZoneHelper helper = new RangerSecurityZoneHelper(zone, "user");

        RangerSecurityZoneChangeRequest req = new RangerSecurityZoneChangeRequest();
        req.setAdminsToRemove(new ArrayList<>(Arrays.asList(new RangerPrincipal(RangerPrincipal.PrincipalType.USER, "u1"))));
        assertThrows(Exception.class, () -> helper.updateZone(req));
    }

    @Test
    public void test06_serviceHelper_resourceCRUDPaths() {
        // Build a zone with one service and ensure CRUD operations behave as expected
        RangerSecurityZone zone = new RangerSecurityZone();
        zone.setServices(new HashMap<>());
        zone.setTagServices(new ArrayList<>());
        zone.setAdminUsers(new ArrayList<>());
        zone.setAdminUserGroups(new ArrayList<>());
        zone.setAdminRoles(new ArrayList<>());
        zone.setAuditUsers(new ArrayList<>());
        zone.setAuditUserGroups(new ArrayList<>());
        zone.setAuditRoles(new ArrayList<>());
        RangerSecurityZoneHelper helper = new RangerSecurityZoneHelper(zone, "user");

        RangerSecurityZoneHelper.RangerSecurityZoneServiceHelper svc = helper.addZoneService("svc1");
        assertNotNull(svc);

        Map<String, List<String>> resMap = new HashMap<>();
        resMap.put("db", new ArrayList<>(Arrays.asList("db1")));
        RangerSecurityZoneResource r = new RangerSecurityZoneResource(resMap);

        // add
        RangerSecurityZoneResource added = svc.addResource(r);
        assertNotNull(added.getId());
        long id = added.getId();

        // get by id
        RangerSecurityZoneResource byId = svc.getResource(id);
        assertNotNull(byId);

        // get by map
        RangerSecurityZoneResource byMap = svc.getResource(resMap);
        assertNotNull(byMap);

        // update with id
        Map<String, List<String>> resMap2 = new HashMap<>();
        resMap2.put("db", new ArrayList<>(Arrays.asList("db2")));
        RangerSecurityZoneResource upd = new RangerSecurityZoneResource(resMap2);
        upd.setId(id);
        svc.updateResource(upd);
        RangerSecurityZoneResource afterUpd = svc.getResource(id);
        assertEquals(resMap2, afterUpd.getResource());

        // remove by id
        RangerSecurityZoneResource removed = svc.removeResource(id);
        assertNotNull(removed);

        // confirm service gets removed when resource count is zero via updateZone remove path
        RangerSecurityZoneServiceV2 svcV2 = new RangerSecurityZoneServiceV2(new ArrayList<>());
        Map<String, RangerSecurityZoneServiceV2> remove = new HashMap<>();
        remove.put("svc1", svcV2);
        RangerSecurityZoneChangeRequest req = new RangerSecurityZoneChangeRequest();
        req.setResourcesToRemove(remove);
        assertDoesNotThrow(() -> helper.updateZone(req));
        assertEquals(0, zone.getServices().size());
    }
}
