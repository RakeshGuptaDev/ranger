/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.apache.ranger.plugin.util;

import org.apache.ranger.plugin.model.RangerServiceResource;
import org.apache.ranger.plugin.model.RangerTag;
import org.apache.ranger.plugin.model.RangerTagDef;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertTrue;

/**
* @generated by Cursor
* @description <Unit Test for RangerServiceTagsDeltaUtil class>
*/
@ExtendWith(MockitoExtension.class)
@TestMethodOrder(MethodOrderer.MethodName.class)
public class TestRangerServiceTagsDeltaUtil {
    private static RangerTag tagOf(String type) {
        RangerTag t = new RangerTag();
        t.setType(type);
        return t;
    }

    @Test
    public void test01_applyDelta_preconditionsAndTagDefRemovalAndResourceReplace() {
        ServiceTags base = new ServiceTags();
        base.setServiceName("svc");
        // tagdef id 10 exists
        Map<Long, RangerTagDef> tagDefs = new HashMap<>();
        tagDefs.put(10L, new RangerTagDef("TDEF"));
        base.setTagDefinitions(tagDefs);
        // resource id 100 with signature sigA
        List<RangerServiceResource> resources = new ArrayList<>();
        RangerServiceResource r = new RangerServiceResource();
        r.setId(100L);
        r.setResourceSignature("sigA");
        resources.add(r);
        base.setServiceResources(resources);
        base.setResourceToTagIds(new HashMap<>());

        // delta removes tagdef 10 (empty name) and replaces resource signature
        ServiceTags delta = new ServiceTags();
        delta.setIsDelta(true);
        delta.setServiceName("svc");
        Map<Long, RangerTagDef> dd = new HashMap<>();
        RangerTagDef removed = new RangerTagDef(""); // empty name -> removal marker
        dd.put(10L, removed);
        delta.setTagDefinitions(dd);
        List<RangerServiceResource> dRes = new ArrayList<>();
        RangerServiceResource r2 = new RangerServiceResource();
        r2.setId(100L);
        r2.setResourceSignature("sigB");
        dRes.add(r2);
        delta.setServiceResources(dRes);

        ServiceTags out = RangerServiceTagsDeltaUtil.applyDelta(base, delta, false);
        assertNotNull(out);
        // implementation keeps the key but with empty name to indicate deletion
        assertTrue(out.getTagDefinitions().containsKey(10L));
        assertEquals("", out.getTagDefinitions().get(10L).getName());
        // original resource entry is tombstoned (signature null) and a new one with sigB is appended
        boolean hasNullSig = false;
        boolean hasNewSig = false;
        for (RangerServiceResource s : out.getServiceResources()) {
            if (s.getId() != null && s.getId().longValue() == 100L) {
                if (s.getResourceSignature() == null) {
                    hasNullSig = true;
                }
                if ("sigB".equals(s.getResourceSignature())) {
                    hasNewSig = true;
                }
            }
        }
        assertTrue(hasNullSig);
        assertTrue(hasNewSig);
    }

    @Test
    public void test02_applyDelta_dedupTagsAndRemapResourceTagIds() {
        ServiceTags base = new ServiceTags();
        base.setServiceName("svc");
        base.setTagDefinitions(new HashMap<>());
        base.setTags(new HashMap<>());
        base.setServiceResources(new ArrayList<>());
        Map<Long, List<Long>> r2t = new HashMap<>();
        r2t.put(100L, new ArrayList<Long>());
        base.setResourceToTagIds(r2t);

        // first delta: add tag id 1 of type T and map to resource 100
        ServiceTags d1 = new ServiceTags();
        d1.setIsDelta(true);
        d1.setServiceName("svc");
        Map<Long, RangerTag> tags1 = new HashMap<>();
        tags1.put(1L, tagOf("T"));
        d1.setTags(tags1);
        Map<Long, List<Long>> map1 = new HashMap<>();
        map1.put(100L, new ArrayList<Long>(Arrays.asList(1L)));
        d1.setResourceToTagIds(map1);

        ServiceTags out1 = RangerServiceTagsDeltaUtil.applyDelta(base, d1, true);
        assertTrue(out1.getTags().containsKey(1L));

        // second delta: add duplicate tag with new id 2; mapping should remap to 1
        ServiceTags d2 = new ServiceTags();
        d2.setIsDelta(true);
        d2.setServiceName("svc");
        Map<Long, RangerTag> tags2 = new HashMap<>();
        tags2.put(2L, tagOf("T"));
        d2.setTags(tags2);
        Map<Long, List<Long>> map2 = new HashMap<>();
        map2.put(100L, new ArrayList<Long>(Arrays.asList(2L)));
        d2.setResourceToTagIds(map2);

        ServiceTags out2 = RangerServiceTagsDeltaUtil.applyDelta(out1, d2, true);
        // out2 should still map resource 100 to tagId 1
        List<Long> mapped = out2.getResourceToTagIds().get(100L);
        assertEquals(1, mapped.size());
        assertEquals(1L, mapped.get(0).longValue());
    }

    @Test
    public void test03_pruneUnusedAttributes_noExceptions() {
        ServiceTags tags = new ServiceTags();
        tags.setTagDefinitions(new HashMap<>());
        tags.getTagDefinitions().put(1L, new RangerTagDef("T"));
        tags.setTags(new HashMap<>());
        tags.getTags().put(1L, tagOf("T"));
        tags.setServiceResources(new ArrayList<>());
        RangerServiceResource r = new RangerServiceResource();
        r.setId(5L);
        tags.getServiceResources().add(r);

        RangerServiceTagsDeltaUtil.pruneUnusedAttributes(tags);
        // should not throw and should null-out some fields
        assertTrue(tags.getTagUpdateTime() == null);
    }
}
