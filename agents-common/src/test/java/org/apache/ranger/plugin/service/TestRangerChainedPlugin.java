/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package org.apache.ranger.plugin.service;

import org.apache.ranger.authorization.hadoop.config.RangerPluginConfig;
import org.apache.ranger.plugin.policyengine.RangerAccessRequest;
import org.apache.ranger.plugin.policyengine.RangerAccessResult;
import org.apache.ranger.plugin.policyengine.RangerPolicyEngineOptions;
import org.apache.ranger.plugin.policyengine.RangerResourceACLs;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;

import java.util.ArrayList;
import java.util.Collection;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertNull;

/**
* @generated by Cursor
* @description <Unit Test for RangerChainedPlugin class>
*/
@ExtendWith(MockitoExtension.class)
@TestMethodOrder(MethodOrderer.MethodName.class)
public class TestRangerChainedPlugin {
    private static class NoopChainedPlugin extends RangerChainedPlugin {
        protected NoopChainedPlugin(RangerBasePlugin rootPlugin, String serviceType, String serviceName) {
            super(rootPlugin, serviceType, serviceName);
        }

        @Override
        public RangerAccessResult isAccessAllowed(RangerAccessRequest request) {
            return null;
        }

        @Override
        public Collection<RangerAccessResult> isAccessAllowed(Collection<RangerAccessRequest> requests) {
            return new ArrayList<>();
        }

        @Override
        public RangerResourceACLs getResourceACLs(RangerAccessRequest request) {
            return null;
        }

        @Override
        public RangerResourceACLs getResourceACLs(RangerAccessRequest request, Integer policyType) {
            return null;
        }

        @Override
        protected RangerBasePlugin buildChainedPlugin(String serviceType, String serviceName, String appId) {
            return new RangerBasePlugin(new RangerPluginConfig(serviceType, serviceName, appId, null, null, new RangerPolicyEngineOptions())) {
                @Override
                public void init() {
                    // no-op to avoid threads
                }
            };
        }
    }

    @Test
    public void test1_InitAndBypassFlagDefaultFalse() {
        // Disable background components via policy engine options in config
        RangerPolicyEngineOptions opts = new RangerPolicyEngineOptions();
        opts.disablePolicyRefresher = true;
        opts.disableTagRetriever = true;
        opts.disableUserStoreRetriever = true;
        opts.disableGdsInfoRetriever = true;
        RangerPluginConfig cfg = new RangerPluginConfig("dummy", "svc", "app", null, null, opts);
        RangerBasePlugin root = new RangerBasePlugin(cfg) {
            @Override
            public void init() {
                // no-op
            }
        };
        NoopChainedPlugin cp = new NoopChainedPlugin(root, "dummy", "svc2");
        // Do not call cp.init() to avoid starting threads; just assert defaults and no-ops
        assertEquals(false, cp.skipAccessCheckIfAlreadyDetermined);
        assertNull(cp.evalDataMaskPolicies(null));
        assertNull(cp.evalRowFilterPolicies(null));
        assertNotNull(cp.isAccessAllowed(new ArrayList<>()));
    }

    @Test
    public void test2_IsAuthorizeOnlyWithChainedPluginDefaultFalseAndInitDelegation() {
        RangerPolicyEngineOptions opts = new RangerPolicyEngineOptions();
        opts.disablePolicyRefresher = true;
        opts.disableTagRetriever = true;
        opts.disableUserStoreRetriever = true;
        opts.disableGdsInfoRetriever = true;
        RangerPluginConfig cfg = new RangerPluginConfig("dummy", "svc", "app", null, null, opts);

        RangerBasePlugin root = new RangerBasePlugin(cfg) {
            @Override
            public void init() {
                // no-op
            }
        };
        NoopChainedPlugin cp = new NoopChainedPlugin(root, "dummy", "svc2");

        // call init which should delegate to inner plugin.init() but overridden to no-op
        cp.init();
        assertEquals(false, cp.isAuthorizeOnlyWithChainedPlugin());
    }
}
