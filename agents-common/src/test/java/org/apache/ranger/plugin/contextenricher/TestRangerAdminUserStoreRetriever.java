/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package org.apache.ranger.plugin.contextenricher;

import org.apache.ranger.admin.client.RangerAdminClient;
import org.apache.ranger.authorization.hadoop.config.RangerPluginConfig;
import org.apache.ranger.plugin.model.RangerServiceDef;
import org.apache.ranger.plugin.policyengine.RangerPluginContext;
import org.apache.ranger.plugin.util.RangerUserStore;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;

import java.nio.channels.ClosedByInterruptException;
import java.util.HashMap;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.mockito.ArgumentMatchers.anyLong;
import static org.mockito.Mockito.when;

/**
* @generated by Cursor
* @description <Unit Test for RangerAdminUserStoreRetriever class>
*/
@ExtendWith(MockitoExtension.class)
@TestMethodOrder(MethodOrderer.MethodName.class)
public class TestRangerAdminUserStoreRetriever {
    @Test
    public void test01_Init_And_RetrieveUserStore_Normal_And_Exception() throws Exception {
        RangerAdminClient adminClient = Mockito.mock(RangerAdminClient.class);
        RangerUserStore userStore = new RangerUserStore();
        userStore.setUserStoreVersion(5L);
        when(adminClient.getUserStoreIfUpdated(anyLong(), anyLong())).thenReturn(userStore);

        RangerPluginConfig  pluginConfig  = new RangerPluginConfig("hive", "svc", "appid", null, null, null);
        RangerPluginContext pluginContext = new RangerPluginContext(pluginConfig);
        pluginContext.setAdminClient(adminClient);

        RangerServiceDef serviceDef = new RangerServiceDef();
        serviceDef.setName("hive");

        RangerAdminUserStoreRetriever retriever = new RangerAdminUserStoreRetriever();
        retriever.setServiceName("svc");
        retriever.setServiceDef(serviceDef);
        retriever.setAppId("appid");
        retriever.setPluginConfig(pluginConfig);
        retriever.setPluginContext(pluginContext);
        retriever.init(new HashMap<>());

        RangerUserStore out = retriever.retrieveUserStoreInfo(-1L, -1L);
        assertNotNull(out);
        assertEquals(5L, out.getUserStoreVersion());

        when(adminClient.getUserStoreIfUpdated(anyLong(), anyLong())).thenThrow(new RuntimeException("boom"));
        out = retriever.retrieveUserStoreInfo(-1L, -1L);
        assertNull(out);
    }

    @Test
    public void test02_RetrieveUserStore_Interrupted() {
        assertThrows(InterruptedException.class, () -> {
            RangerAdminClient adminClient = Mockito.mock(RangerAdminClient.class);
            when(adminClient.getUserStoreIfUpdated(anyLong(), anyLong())).thenThrow(new ClosedByInterruptException());

            RangerPluginConfig  pluginConfig  = new RangerPluginConfig("hive", "svc", "appid", null, null, null);
            RangerPluginContext pluginContext = new RangerPluginContext(pluginConfig);
            pluginContext.setAdminClient(adminClient);

            RangerServiceDef serviceDef = new RangerServiceDef();
            serviceDef.setName("hive");

            RangerAdminUserStoreRetriever retriever = new RangerAdminUserStoreRetriever();
            retriever.setServiceName("svc");
            retriever.setServiceDef(serviceDef);
            retriever.setAppId("appid");
            retriever.setPluginConfig(pluginConfig);
            retriever.setPluginContext(pluginContext);
            retriever.init(new HashMap<>());

            retriever.retrieveUserStoreInfo(-1L, -1L);
        });
    }
}
