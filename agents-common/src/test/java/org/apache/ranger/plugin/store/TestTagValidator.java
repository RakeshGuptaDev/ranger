/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package org.apache.ranger.plugin.store;

import org.apache.ranger.plugin.model.RangerPolicy.RangerPolicyResource;
import org.apache.ranger.plugin.model.RangerServiceResource;
import org.apache.ranger.plugin.model.RangerTag;
import org.apache.ranger.plugin.model.RangerTagDef;
import org.apache.ranger.plugin.model.RangerTagResourceMap;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;

import java.util.Collections;
import java.util.HashMap;
import java.util.Map;

import static org.mockito.Mockito.when;

/**
* @generated by Cursor
* @description <Unit Test for TagValidator class>
*/
@ExtendWith(MockitoExtension.class)
@TestMethodOrder(MethodOrderer.MethodName.class)
public class TestTagValidator {
    private TagStore mockTagStore() {
        return Mockito.mock(TagStore.class);
    }

    private static RangerServiceResource newServiceResourceWith(String serviceName, String resourceName, String value) {
        RangerServiceResource r = new RangerServiceResource();
        r.setServiceName(serviceName);
        Map<String, RangerPolicyResource> elements = new HashMap<>();
        elements.put(resourceName, new RangerPolicyResource(value));
        r.setResourceElements(elements);
        return r;
    }

    @Test
    public void test01_preCreateTagDef_validatesNameAndReturnsExisting() throws Exception {
        TagStore store = mockTagStore();
        TagValidator v = new TagValidator();
        v.setTagStore(store);

        RangerTagDef def = new RangerTagDef();
        def.setName("");
        Assertions.assertThrows(Exception.class, () -> v.preCreateTagDef(def, false));

        def.setName("PII");
        RangerTagDef existing = new RangerTagDef();
        existing.setId(1L);
        when(store.getTagDefByName("PII")).thenReturn(existing);
        Assertions.assertEquals(existing, v.preCreateTagDef(def, true));
    }

    @Test
    public void test02_preCreateTag_usesGuidWhenPresent() throws Exception {
        TagStore store = mockTagStore();
        TagValidator v = new TagValidator();
        v.setTagStore(store);

        RangerTag tag = new RangerTag();
        tag.setType(null);
        Assertions.assertThrows(Exception.class, () -> v.preCreateTag(tag));

        tag.setType("PII");
        tag.setGuid("g-1");
        RangerTag found = new RangerTag();
        when(store.getTagByGuid("g-1")).thenReturn(found);
        Assertions.assertEquals(found, v.preCreateTag(tag));
    }

    @Test
    public void test03_preUpdateTag_validations() throws Exception {
        TagStore store = mockTagStore();
        TagValidator v = new TagValidator();
        v.setTagStore(store);

        RangerTag tag = new RangerTag();
        tag.setType("");
        Assertions.assertThrows(Exception.class, () -> v.preUpdateTag(1L, tag));

        tag.setType("PII");
        Assertions.assertThrows(Exception.class, () -> v.preUpdateTag(null, tag));

        when(store.getTag(1L)).thenReturn(null);
        Assertions.assertThrows(Exception.class, () -> v.preUpdateTag(1L, tag));

        RangerTag existing = new RangerTag();
        existing.setId(1L);
        existing.setGuid("g-1");
        existing.setType("PCI");
        when(store.getTag(2L)).thenReturn(existing);
        Assertions.assertThrows(Exception.class, () -> v.preUpdateTag(2L, tag));

        existing.setType("PII");
        RangerTag newTag = new RangerTag();
        newTag.setType("PII");
        when(store.getTag(3L)).thenReturn(existing);
        v.preUpdateTag(3L, newTag);
        Assertions.assertEquals(existing.getId(), newTag.getId());
        Assertions.assertEquals(existing.getGuid(), newTag.getGuid());
    }

    @Test
    public void test04_preUpdateTagByGuid_validations() throws Exception {
        TagStore store = mockTagStore();
        TagValidator v = new TagValidator();
        v.setTagStore(store);

        RangerTag tag = new RangerTag();
        tag.setType("");
        Assertions.assertThrows(Exception.class, () -> v.preUpdateTagByGuid("g-1", tag));

        tag.setType("PII");
        when(store.getTagByGuid("g-x")).thenReturn(null);
        Assertions.assertThrows(Exception.class, () -> v.preUpdateTagByGuid("g-x", tag));

        RangerTag existing = new RangerTag();
        existing.setId(5L);
        existing.setGuid("g-1");
        existing.setType("PCI");
        when(store.getTagByGuid("g-1")).thenReturn(existing);
        Assertions.assertThrows(Exception.class, () -> v.preUpdateTagByGuid("g-1", tag));

        existing.setType("PII");
        v.preUpdateTagByGuid("g-1", tag);
        Assertions.assertEquals(existing.getId(), tag.getId());
        Assertions.assertEquals("g-1", tag.getGuid());
    }

    @Test
    public void test05_preDeleteTag_andByGuid() throws Exception {
        TagStore store = mockTagStore();
        TagValidator v = new TagValidator();
        v.setTagStore(store);

        Assertions.assertThrows(Exception.class, () -> v.preDeleteTag(null));
        when(store.getTag(1L)).thenReturn(null);
        Assertions.assertThrows(Exception.class, () -> v.preDeleteTag(1L));

        RangerTag t = new RangerTag();
        t.setId(2L);
        when(store.getTag(2L)).thenReturn(t);
        when(store.getTagResourceMapsForTagId(2L)).thenReturn(Collections.singletonList(new RangerTagResourceMap()));
        Assertions.assertThrows(Exception.class, () -> v.preDeleteTag(2L));

        when(store.getTagResourceMapsForTagId(2L)).thenReturn(Collections.emptyList());
        Assertions.assertEquals(t, v.preDeleteTag(2L));

        when(store.getTagByGuid("g-x")).thenReturn(null);
        Assertions.assertThrows(Exception.class, () -> v.preDeleteTagByGuid("g-x"));
        RangerTag tg = new RangerTag();
        tg.setId(3L);
        when(store.getTagByGuid("g-3")).thenReturn(tg);
        when(store.getTagResourceMapsForTagId(3L)).thenReturn(Collections.singletonList(new RangerTagResourceMap()));
        Assertions.assertThrows(Exception.class, () -> v.preDeleteTagByGuid("g-3"));
        when(store.getTagResourceMapsForTagId(3L)).thenReturn(Collections.emptyList());
        Assertions.assertEquals(tg, v.preDeleteTagByGuid("g-3"));
    }

    @Test
    public void test06_preCreateAndUpdateServiceResource() throws Exception {
        TagStore store = mockTagStore();
        TagValidator v = new TagValidator();
        v.setTagStore(store);

        RangerServiceResource r1 = new RangerServiceResource();
        r1.setServiceName("");
        Assertions.assertThrows(Exception.class, () -> v.preCreateServiceResource(r1));

        RangerServiceResource r = newServiceResourceWith("svc", "db", "sales");
        r.setGuid("rg-1");
        RangerServiceResource existing = new RangerServiceResource();
        when(store.getServiceResourceByGuid("rg-1")).thenReturn(existing);
        Assertions.assertEquals(existing, v.preCreateServiceResource(r));

        r = newServiceResourceWith("svc", "db", "sales");
        when(store.getServiceResourceByServiceAndResourceSignature(Mockito.eq("svc"), Mockito.anyString())).thenReturn(existing);
        RangerServiceResource ret = v.preCreateServiceResource(r);
        Assertions.assertEquals(existing, ret);

        // update by id
        RangerServiceResource upd = newServiceResourceWith("svc", "db", "x");
        Assertions.assertThrows(Exception.class, () -> v.preUpdateServiceResource(null, upd));
        when(store.getServiceResource(7L)).thenReturn(null);
        Assertions.assertThrows(Exception.class, () -> v.preUpdateServiceResource(7L, upd));
        RangerServiceResource ex = newServiceResourceWith("svc", "db", "old");
        ex.setId(7L);
        ex.setGuid("guid-7");
        when(store.getServiceResource(7L)).thenReturn(ex);
        RangerServiceResource wrongService = newServiceResourceWith("other", "db", "old");
        Assertions.assertThrows(Exception.class, () -> v.preUpdateServiceResource(7L, wrongService));
        v.preUpdateServiceResource(7L, upd);
        Assertions.assertEquals(ex.getId(), upd.getId());
        Assertions.assertEquals(ex.getGuid(), upd.getGuid());

        // update by guid
        RangerServiceResource updG = newServiceResourceWith("svc", "db", "x");
        when(store.getServiceResourceByGuid("guid-x")).thenReturn(null);
        Assertions.assertThrows(Exception.class, () -> v.preUpdateServiceResourceByGuid("guid-x", updG));
        when(store.getServiceResourceByGuid("guid-7")).thenReturn(ex);
        Assertions.assertThrows(Exception.class, () -> v.preUpdateServiceResourceByGuid("guid-7", wrongService));
        v.preUpdateServiceResourceByGuid("guid-7", updG);
        Assertions.assertEquals(ex.getId(), updG.getId());
        Assertions.assertEquals("guid-7", updG.getGuid());
    }

    @Test
    public void test07_preDeleteServiceResource_andByGuid() throws Exception {
        TagStore store = mockTagStore();
        TagValidator v = new TagValidator();
        v.setTagStore(store);

        when(store.getServiceResource(1L)).thenReturn(null);
        Assertions.assertThrows(Exception.class, () -> v.preDeleteServiceResource(1L));
        RangerServiceResource ex = newServiceResourceWith("svc", "db", "x");
        ex.setId(2L);
        when(store.getServiceResource(2L)).thenReturn(ex);
        when(store.getTagResourceMapsForResourceId(2L)).thenReturn(Collections.singletonList(new RangerTagResourceMap()));
        Assertions.assertThrows(Exception.class, () -> v.preDeleteServiceResource(2L));
        when(store.getTagResourceMapsForResourceId(2L)).thenReturn(Collections.emptyList());
        Assertions.assertEquals(ex, v.preDeleteServiceResource(2L));

        when(store.getServiceResourceByGuid("g-x")).thenReturn(null);
        Assertions.assertThrows(Exception.class, () -> v.preDeleteServiceResourceByGuid("g-x", false));
        when(store.getServiceResourceByGuid("g-2")).thenReturn(ex);
        when(store.getTagResourceMapsForResourceId(2L)).thenReturn(Collections.singletonList(new RangerTagResourceMap()));
        Assertions.assertThrows(Exception.class, () -> v.preDeleteServiceResourceByGuid("g-2", false));
        Assertions.assertEquals(ex, v.preDeleteServiceResourceByGuid("g-2", true));
    }

    @Test
    public void test08_preCreateAndDeleteTagResourceMap() throws Exception {
        TagStore store = mockTagStore();
        TagValidator v = new TagValidator();
        v.setTagStore(store);

        Assertions.assertThrows(Exception.class, () -> v.preCreateTagResourceMap(null, "r"));
        Assertions.assertThrows(Exception.class, () -> v.preCreateTagResourceMap("t", null));

        when(store.getTagResourceMapForTagAndResourceGuid("tg", "rg")).thenReturn(new RangerTagResourceMap());
        Assertions.assertThrows(Exception.class, () -> v.preCreateTagResourceMap("tg", "rg"));

        when(store.getTagResourceMapForTagAndResourceGuid("tg", "rg")).thenReturn(null);
        when(store.getServiceResourceByGuid("rg")).thenReturn(null);
        Assertions.assertThrows(Exception.class, () -> v.preCreateTagResourceMap("tg", "rg"));
        RangerServiceResource sr = newServiceResourceWith("svc", "db", "v");
        sr.setId(10L);
        when(store.getServiceResourceByGuid("rg")).thenReturn(sr);
        when(store.getTagByGuid("tg")).thenReturn(null);
        Assertions.assertThrows(Exception.class, () -> v.preCreateTagResourceMap("tg", "rg"));
        RangerTag tag = new RangerTag();
        tag.setId(20L);
        when(store.getTagByGuid("tg")).thenReturn(tag);
        RangerTagResourceMap created = v.preCreateTagResourceMap("tg", "rg");
        Assertions.assertEquals(10L, created.getResourceId());
        Assertions.assertEquals(20L, created.getTagId());

        when(store.getTagResourceMapForTagAndResourceId(1L, 2L)).thenReturn(new RangerTagResourceMap());
        Assertions.assertThrows(Exception.class, () -> v.preCreateTagResourceMapByIds(1L, 2L));
        when(store.getTagResourceMapForTagAndResourceId(1L, 2L)).thenReturn(null);
        when(store.getServiceResource(2L)).thenReturn(null);
        Assertions.assertThrows(Exception.class, () -> v.preCreateTagResourceMapByIds(1L, 2L));
        when(store.getServiceResource(2L)).thenReturn(sr);
        when(store.getTag(1L)).thenReturn(null);
        Assertions.assertThrows(Exception.class, () -> v.preCreateTagResourceMapByIds(1L, 2L));
        when(store.getTag(1L)).thenReturn(tag);
        RangerTagResourceMap createdByIds = v.preCreateTagResourceMapByIds(1L, 2L);
        Assertions.assertEquals(2L, createdByIds.getResourceId());
        Assertions.assertEquals(1L, createdByIds.getTagId());

        when(store.getTagResourceMap(99L)).thenReturn(null);
        Assertions.assertThrows(Exception.class, () -> v.preDeleteTagResourceMap(99L));
        when(store.getTagResourceMap(99L)).thenReturn(new RangerTagResourceMap());
        Assertions.assertNotNull(v.preDeleteTagResourceMap(99L));

        when(store.getTagResourceMapByGuid("g-x")).thenReturn(null);
        Assertions.assertThrows(Exception.class, () -> v.preDeleteTagResourceMapByGuid("g-x"));
        when(store.getTagResourceMapByGuid("g-1")).thenReturn(new RangerTagResourceMap());
        Assertions.assertNotNull(v.preDeleteTagResourceMapByGuid("g-1"));

        when(store.getTagResourceMapForTagAndResourceGuid("tg2", "rg2")).thenReturn(null);
        Assertions.assertThrows(Exception.class, () -> v.preDeleteTagResourceMap("tg2", "rg2"));
        when(store.getTagResourceMapForTagAndResourceGuid("tg2", "rg2")).thenReturn(new RangerTagResourceMap());
        Assertions.assertNotNull(v.preDeleteTagResourceMap("tg2", "rg2"));

        when(store.getTagResourceMapForTagAndResourceId(5L, 6L)).thenReturn(null);
        Assertions.assertThrows(Exception.class, () -> v.preDeleteTagResourceMapByIds(5L, 6L));
        when(store.getTagResourceMapForTagAndResourceId(5L, 6L)).thenReturn(new RangerTagResourceMap());
        Assertions.assertNotNull(v.preDeleteTagResourceMapByIds(5L, 6L));
    }
}
