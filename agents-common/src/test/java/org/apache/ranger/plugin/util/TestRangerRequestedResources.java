/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.apache.ranger.plugin.util;

import org.apache.ranger.plugin.model.RangerServiceDef;
import org.apache.ranger.plugin.policyengine.RangerAccessResource;
import org.apache.ranger.plugin.policyresourcematcher.RangerPolicyResourceMatcher;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;

import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertTrue;

/**
* @generated by Cursor
* @description <Unit Test for RangerRequestedResources class>
*/
@ExtendWith(MockitoExtension.class)
@TestMethodOrder(MethodOrderer.MethodName.class)
public class TestRangerRequestedResources {
    private RangerAccessResource resourceWithString(final String s) {
        return new RangerAccessResource() {
            @Override
            public String getOwnerUser() {
                return null;
            }

            @Override
            public boolean exists(String name) {
                return false;
            }

            @Override
            public Object getValue(String name) {
                return null;
            }

            @Override
            public RangerServiceDef getServiceDef() {
                return null;
            }

            @Override
            public Set<String> getKeys() {
                return null;
            }

            @Override
            public String getLeafName() {
                return null;
            }

            @Override
            public String getAsString() {
                return s;
            }

            @Override
            public String getCacheKey() {
                return s;
            }

            @Override
            public Map<String, Object> getAsMap() {
                return null;
            }

            @Override
            public RangerAccessResource getReadOnlyCopy() {
                return this;
            }
        };
    }

    @Test
    public void test01_addRequestedResource_ignoresDuplicates() {
        RangerRequestedResources requested = new RangerRequestedResources();
        RangerAccessResource r1 = resourceWithString("r1");
        requested.addRequestedResource(r1);
        requested.addRequestedResource(r1); // duplicate should be ignored
        // isMutuallyExcluded path when list size <=1 returns true without matcher
        // interaction
        assertTrue(requested.isMutuallyExcluded(new ArrayList<>(), new HashMap<>()));
        assertNotNull(requested.toString());
    }

    @Test
    public void test02_isMutuallyExcluded_falseWhenTwoMatchersMatchDifferentResources() {
        RangerRequestedResources requested = new RangerRequestedResources();
        RangerAccessResource r1 = resourceWithString("r1");
        RangerAccessResource r2 = resourceWithString("r2");
        requested.addRequestedResource(r1);
        requested.addRequestedResource(r2);

        RangerPolicyResourceMatcher m = Mockito.mock(RangerPolicyResourceMatcher.class);
        Map<String, Object> ctx = new HashMap<>();
        Mockito.when(m.isMatch(Mockito.eq(r1), Mockito.eq(ctx))).thenReturn(true);
        Mockito.when(m.isMatch(Mockito.eq(r2), Mockito.eq(ctx))).thenReturn(true);

        List<RangerPolicyResourceMatcher> matchers = new ArrayList<>();
        matchers.add(m);

        assertFalse(requested.isMutuallyExcluded(matchers, ctx));
    }

    @Test
    public void test03_isMutuallyExcluded_trueWhenOnlyOneResourceMatches() {
        RangerRequestedResources requested = new RangerRequestedResources();
        RangerAccessResource r1 = resourceWithString("r1");
        RangerAccessResource r2 = resourceWithString("r2");
        requested.addRequestedResource(r1);
        requested.addRequestedResource(r2);

        RangerPolicyResourceMatcher m = Mockito.mock(RangerPolicyResourceMatcher.class);
        Map<String, Object> ctx = new HashMap<>();
        Mockito.when(m.isMatch(Mockito.eq(r1), Mockito.eq(ctx))).thenReturn(true);
        Mockito.when(m.isMatch(Mockito.eq(r2), Mockito.eq(ctx))).thenReturn(false);

        List<RangerPolicyResourceMatcher> matchers = new ArrayList<>();
        matchers.add(m);

        assertTrue(requested.isMutuallyExcluded(matchers, ctx));
    }
}
