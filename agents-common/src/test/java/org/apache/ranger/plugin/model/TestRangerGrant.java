/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package org.apache.ranger.plugin.model;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Objects;

/**
* @generated by Cursor
* @description <Unit Test for RangerGrant class>
*/
@TestMethodOrder(MethodOrderer.MethodName.class)
@ExtendWith(MockitoExtension.class)
public class TestRangerGrant {
    @Test
    public void test01_constructorAndGettersSetters() {
        RangerPrincipal principal = new RangerPrincipal(RangerPrincipal.PrincipalType.USER, "alice");
        List<String> access = new ArrayList<>(Arrays.asList("read", "write"));
        List<RangerGrant.Condition> conditions = new ArrayList<>();
        conditions.add(new RangerGrant.Condition("ip", new ArrayList<>(Arrays.asList("10.0.0.1"))));

        RangerGrant grant = new RangerGrant(principal, access, conditions);

        Assertions.assertEquals(principal, grant.getPrincipal());
        Assertions.assertEquals(access, grant.getAccessTypes());
        Assertions.assertEquals(conditions, grant.getConditions());

        RangerPrincipal bob = new RangerPrincipal(RangerPrincipal.PrincipalType.USER, "bob");
        grant.setPrincipal(bob);
        Assertions.assertEquals(bob, grant.getPrincipal());
    }

    @Test
    public void test02_setAccessTypes_replacesAndSkipsWhenSameInstance() {
        RangerGrant grant = new RangerGrant();

        List<String> first = new ArrayList<>(Arrays.asList("a", "b"));
        grant.setAccessTypes(first);
        Assertions.assertEquals(first, grant.getAccessTypes());

        // pass the same backing instance to hit the early-return branch
        List<String> internal = grant.getAccessTypes();
        grant.setAccessTypes(internal);
        Assertions.assertEquals(internal, grant.getAccessTypes());

        // replace with a new list and ensure contents are copied (not same ref)
        List<String> second = new ArrayList<>(Arrays.asList("x", "y", "z"));
        grant.setAccessTypes(second);
        Assertions.assertEquals(second, grant.getAccessTypes());
        Assertions.assertNotSame(second, grant.getAccessTypes());
    }

    @Test
    public void test03_setConditions_replacesAndSkipsWhenSameInstance() {
        RangerGrant grant = new RangerGrant();

        List<RangerGrant.Condition> c1 = new ArrayList<>();
        c1.add(new RangerGrant.Condition("k1", new ArrayList<>(Arrays.asList("v1"))));
        grant.setConditions(c1);
        Assertions.assertEquals(c1, grant.getConditions());

        List<RangerGrant.Condition> internal = grant.getConditions();
        grant.setConditions(internal);
        Assertions.assertEquals(internal, grant.getConditions());

        List<RangerGrant.Condition> c2 = new ArrayList<>();
        c2.add(new RangerGrant.Condition("k2", new ArrayList<>(Arrays.asList("v2", "v3"))));
        grant.setConditions(c2);
        Assertions.assertEquals(c2, grant.getConditions());
        Assertions.assertNotSame(c2, grant.getConditions());
    }

    @Test
    public void test04_equalsAndHashCode() {
        RangerPrincipal principal = new RangerPrincipal(RangerPrincipal.PrincipalType.GROUP, "dev");
        List<String> access = new ArrayList<>(Arrays.asList("read"));
        List<RangerGrant.Condition> conditions = new ArrayList<>();
        conditions.add(new RangerGrant.Condition("loc", new ArrayList<>(Arrays.asList("us"))));

        RangerGrant g1 = new RangerGrant(principal, access, conditions);
        RangerGrant g2 = new RangerGrant(principal, new ArrayList<>(access), new ArrayList<>(conditions));
        Assertions.assertEquals(g1, g2);
        Assertions.assertEquals(g1.hashCode(), g2.hashCode());

        g2.setPrincipal(new RangerPrincipal(RangerPrincipal.PrincipalType.USER, "charlie"));
        Assertions.assertNotEquals(g1, g2);

        Assertions.assertNotEquals(g1, null);
        Assertions.assertNotEquals(g1, new Object());
    }

    @Test
    public void test05_toStringWithPrincipal() {
        RangerGrant grant = new RangerGrant();
        grant.setPrincipal(new RangerPrincipal(RangerPrincipal.PrincipalType.ROLE, "role1"));
        grant.setAccessTypes(new ArrayList<>(Arrays.asList("use")));
        grant.setConditions(new ArrayList<>());

        String s = grant.toString();
        Assertions.assertTrue(s.contains("RangerGrant{"));
        Assertions.assertTrue(s.contains("accessTypes"));
        Assertions.assertTrue(s.contains("conditions"));
    }

    @Test
    public void test06_conditionEqualsHashCodeToString() {
        RangerGrant.Condition c1 = new RangerGrant.Condition("typeA", new ArrayList<>(Arrays.asList("v1", "v2")));
        RangerGrant.Condition c2 = new RangerGrant.Condition("typeA", new ArrayList<>(Arrays.asList("v1", "v2")));
        Assertions.assertEquals(c1, c2);
        Assertions.assertEquals(c1.hashCode(), c2.hashCode());

        c2.setType("typeB");
        Assertions.assertNotEquals(c1, c2);

        String s = c1.toString();
        Assertions.assertTrue(s.contains("type='typeA'"));
        Assertions.assertTrue(Objects.nonNull(c1.getValues()));
    }
}
