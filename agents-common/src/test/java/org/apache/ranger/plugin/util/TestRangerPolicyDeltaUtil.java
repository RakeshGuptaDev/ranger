/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.apache.ranger.plugin.util;

import org.apache.ranger.plugin.model.RangerPolicy;
import org.apache.ranger.plugin.model.RangerPolicyDelta;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Assertions.assertTrue;

/**
* @generated by Cursor
* @description <Unit Test for RangerPolicyDeltaUtil class>
*/
@ExtendWith(MockitoExtension.class)
@TestMethodOrder(MethodOrderer.MethodName.class)
public class TestRangerPolicyDeltaUtil {
    private RangerPolicy policy(long id, String serviceType, int policyType) {
        RangerPolicy p = new RangerPolicy();
        p.setId(id);
        p.setServiceType(serviceType);
        p.setPolicyType(policyType);
        return p;
    }

    private RangerPolicyDelta delta(int changeType, RangerPolicy p) {
        RangerPolicyDelta d = new RangerPolicyDelta();
        d.setChangeType(changeType);
        d.setPolicy(p);
        return d;
    }

    @Test
    public void test01_applyDeltas_createUpdateDeleteAndFilterByServiceType() {
        String serviceType = "svc";
        List<RangerPolicy> base = new ArrayList<>();
        base.add(policy(1L, serviceType, RangerPolicy.POLICY_TYPE_ACCESS));
        base.add(policy(2L, serviceType, RangerPolicy.POLICY_TYPE_ACCESS));

        List<RangerPolicyDelta> deltas = new ArrayList<>();
        // Update id=1
        deltas.add(delta(RangerPolicyDelta.CHANGE_TYPE_POLICY_UPDATE,
                policy(1L, serviceType, RangerPolicy.POLICY_TYPE_ACCESS)));
        // Create id=3, but wrong serviceType -> ignored
        deltas.add(delta(RangerPolicyDelta.CHANGE_TYPE_POLICY_CREATE,
                policy(3L, "other", RangerPolicy.POLICY_TYPE_ACCESS)));
        // Create id=3 for correct serviceType
        deltas.add(delta(RangerPolicyDelta.CHANGE_TYPE_POLICY_CREATE,
                policy(3L, serviceType, RangerPolicy.POLICY_TYPE_ACCESS)));
        // Delete id=2
        deltas.add(delta(RangerPolicyDelta.CHANGE_TYPE_POLICY_DELETE,
                policy(2L, serviceType, RangerPolicy.POLICY_TYPE_ACCESS)));
        // Unknown change type -> ignored
        RangerPolicyDelta unknown = delta(99, policy(4L, serviceType, RangerPolicy.POLICY_TYPE_ACCESS));
        deltas.add(unknown);

        List<RangerPolicy> out = RangerPolicyDeltaUtil.applyDeltas(base, deltas, serviceType);
        out.sort(RangerPolicy.POLICY_ID_COMPARATOR);
        assertEquals(Arrays.asList(1L, 3L), Arrays.asList(out.get(0).getId(), out.get(1).getId()));
    }

    @Test
    public void test02_isValidDeltas_variousInvalidReasons() {
        String svc = "svc";
        List<RangerPolicyDelta> deltas = new ArrayList<>();
        // null changeType -> invalid
        RangerPolicyDelta d1 = new RangerPolicyDelta();
        d1.setPolicy(policy(1L, svc, RangerPolicy.POLICY_TYPE_ACCESS));
        deltas.add(d1);
        assertFalse(RangerPolicyDeltaUtil.isValidDeltas(deltas, svc));

        // unsupported changeType -> invalid
        d1.setChangeType(99);
        assertFalse(RangerPolicyDeltaUtil.isValidDeltas(Collections.singletonList(d1), svc));

        // null policyId -> invalid
        RangerPolicyDelta d2 = new RangerPolicyDelta();
        d2.setChangeType(RangerPolicyDelta.CHANGE_TYPE_POLICY_CREATE);
        d2.setPolicy(new RangerPolicy()); // id null
        assertFalse(RangerPolicyDeltaUtil.isValidDeltas(Collections.singletonList(d2), svc));

        // wrong serviceType -> invalid
        RangerPolicyDelta d3 = new RangerPolicyDelta();
        d3.setChangeType(RangerPolicyDelta.CHANGE_TYPE_POLICY_CREATE);
        d3.setPolicy(policy(5L, "other", RangerPolicy.POLICY_TYPE_ACCESS));
        assertFalse(RangerPolicyDeltaUtil.isValidDeltas(Collections.singletonList(d3), svc));

        // wrong policyType -> invalid
        RangerPolicyDelta d4 = new RangerPolicyDelta();
        d4.setChangeType(RangerPolicyDelta.CHANGE_TYPE_POLICY_CREATE);
        RangerPolicy p4 = policy(6L, svc, 999);
        d4.setPolicy(p4);
        assertFalse(RangerPolicyDeltaUtil.isValidDeltas(Collections.singletonList(d4), svc));

        // valid
        RangerPolicyDelta d5 = new RangerPolicyDelta();
        d5.setChangeType(RangerPolicyDelta.CHANGE_TYPE_POLICY_CREATE);
        d5.setPolicy(policy(7L, svc, RangerPolicy.POLICY_TYPE_ACCESS));
        assertTrue(RangerPolicyDeltaUtil.isValidDeltas(Collections.singletonList(d5), svc));
    }

    @Test
    public void test03_hasPolicyDeltas_branchCoverage() {
        // null servicePolicies -> returns null (logged), covered via branch that sets
        // ret=null
        Boolean retNull = RangerPolicyDeltaUtil.hasPolicyDeltas(null);
        assertNull(retNull);

        ServicePolicies sp = new ServicePolicies();
        sp.setPolicies(new ArrayList<>());
        // No policies and no deltas -> returns null or false depending on
        // policyDeltas=null
        sp.setPolicyDeltas(null);
        Boolean retFalseForceNew = RangerPolicyDeltaUtil.hasPolicyDeltas(sp);
        assertEquals(Boolean.FALSE, retFalseForceNew);

        sp.setPolicies(new ArrayList<>());
        sp.setPolicyDeltas(new ArrayList<>());
        Boolean retNoChanges = RangerPolicyDeltaUtil.hasPolicyDeltas(sp);
        assertNull(retNoChanges);

        // Both present -> null (conflict)
        RangerPolicy p = policy(10L, "svc", RangerPolicy.POLICY_TYPE_ACCESS);
        sp.setPolicies(Collections.singletonList(p));
        RangerPolicyDelta d = new RangerPolicyDelta();
        d.setChangeType(RangerPolicyDelta.CHANGE_TYPE_POLICY_UPDATE);
        d.setPolicy(p);
        sp.setPolicyDeltas(Collections.singletonList(d));
        Boolean retConflict = RangerPolicyDeltaUtil.hasPolicyDeltas(sp);
        assertNull(retConflict);

        // Only deltas
        sp.setPolicies(Collections.emptyList());
        sp.setPolicyDeltas(Collections.singletonList(d));
        Boolean retOnlyDeltas = RangerPolicyDeltaUtil.hasPolicyDeltas(sp);
        assertEquals(Boolean.TRUE, retOnlyDeltas);
    }
}
