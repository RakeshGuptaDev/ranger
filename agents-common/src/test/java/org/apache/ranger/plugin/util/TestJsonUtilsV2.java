/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.apache.ranger.plugin.util;

import com.fasterxml.jackson.core.type.TypeReference;
import com.sun.jersey.api.client.ClientResponse;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;

import java.io.Serializable;
import java.io.StringReader;
import java.io.StringWriter;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;

/**
 * @generated by Cursor
 * @description <Unit Test for JsonUtilsV2 class>
 */
@ExtendWith(MockitoExtension.class)
@TestMethodOrder(MethodOrderer.MethodName.class)
public class TestJsonUtilsV2 {
    public static class DummyResponse extends ClientResponse {
        private final String entity;

        public DummyResponse(String entity) {
            // status 200 OK
            super(200, null, null, null);
            this.entity = entity;
        }

        @Override
        public <T> T getEntity(Class<T> c) {
            if (c == String.class) {
                return c.cast(entity);
            }
            return super.getEntity(c);
        }
    }

    public static class Pojo implements Serializable {
        public String a;
        public int b;

        @Override
        public boolean equals(Object o) {
            if (!(o instanceof Pojo)) {
                return false;
            }
            Pojo p = (Pojo) o;
            return a.equals(p.a) && b == p.b;
        }

        @Override
        public int hashCode() {
            return a.hashCode() * 31 + b;
        }
    }

    @Test
    public void test01_mapAndListAndObjConversions() throws Exception {
        Map<String, Object> map = new HashMap<>();
        map.put("k", "v");
        String mapJson = JsonUtilsV2.mapToJson(map);
        assertEquals("{\"k\":\"v\"}", mapJson);

        List<String> list = Arrays.asList("x", "y");
        String listJson = JsonUtilsV2.listToJson(list);
        assertEquals("[\"x\",\"y\"]", listJson);

        Pojo p = new Pojo();
        p.a = "z";
        p.b = 5;
        String objJson = JsonUtilsV2.objToJson(p);
        Pojo back = JsonUtilsV2.jsonToObj(objJson, Pojo.class);
        assertEquals(p, back);

        StringWriter writer = new StringWriter();
        JsonUtilsV2.writeValue(writer, p);
        Pojo back2 = JsonUtilsV2.readValue(new StringReader(writer.toString()), Pojo.class);
        assertEquals(p, back2);
    }

    @Test
    public void test02_jsonToMap_emptyAndNonEmpty() throws Exception {
        assertEquals(0, JsonUtilsV2.jsonToMap(null).size());
        assertEquals(0, JsonUtilsV2.jsonToMap("").size());
        Map<String, String> m = JsonUtilsV2.jsonToMap("{\"a\":\"b\"}");
        assertEquals("b", m.get("a"));
    }

    @Test
    public void test03_readResponse_withClassAndTypeRef() throws Exception {
        DummyResponse response = new DummyResponse("{\"a\":\"q\",\"b\":7}");
        Pojo p = JsonUtilsV2.readResponse(response, Pojo.class);
        assertNotNull(p);
        assertEquals("q", p.a);
        assertEquals(7, p.b);

        DummyResponse response2 = new DummyResponse("{\"x\":1,\"y\":2}");
        Map<String, Integer> res = JsonUtilsV2.readResponse(response2, new TypeReference<Map<String, Integer>>() {
        });
        assertEquals(1, res.get("x").intValue());
        assertEquals(2, res.get("y").intValue());
    }
}
