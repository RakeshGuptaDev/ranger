/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package org.apache.ranger.plugin.model;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

/**
* @generated by Cursor
* @description <Unit Test for RangerBaseModelObject class>
*/
@TestMethodOrder(MethodOrderer.MethodName.class)
@ExtendWith(MockitoExtension.class)
public class TestRangerBaseModelObject {
    @Test
    public void test01_nullSafeSupplierV1() {
        RangerBaseModelObject.setNullSafeSupplier((RangerBaseModelObject.NullSafeSupplier) null);

        List<String> listCopy = RangerBaseModelObject.nullSafeList(Arrays.asList("a"));
        Set<String> setCopy = RangerBaseModelObject.nullSafeSet(new HashSet<>(Collections.singleton("b")));
        Map<String, String> mapCopy = RangerBaseModelObject.nullSafeMap(Collections.singletonMap("k", "v"));

        Assertions.assertEquals(Arrays.asList("a"), listCopy);
        Assertions.assertEquals(new HashSet<>(Collections.singleton("b")), setCopy);
        Assertions.assertEquals("v", mapCopy.get("k"));

        Assertions.assertTrue(RangerBaseModelObject.nullSafeList(null).isEmpty());
        Assertions.assertTrue(RangerBaseModelObject.nullSafeSet(null).isEmpty());
        Assertions.assertTrue(RangerBaseModelObject.nullSafeMap(null).isEmpty());
    }

    @Test
    public void test02_nullSafeSupplierV2() {
        RangerBaseModelObject.setNullSafeSupplier(RangerBaseModelObject.NULL_SAFE_SUPPLIER_V2);

        List<String> emptyList = RangerBaseModelObject.nullSafeList(null);
        Set<String> emptySet = RangerBaseModelObject.nullSafeSet(null);
        Map<String, String> emptyMap = RangerBaseModelObject.nullSafeMap(null);
        Assertions.assertSame(Collections.emptyList(), emptyList);
        Assertions.assertSame(Collections.emptySet(), emptySet);
        Assertions.assertSame(Collections.emptyMap(), emptyMap);

        List<String> base = new ArrayList<>(Arrays.asList("x"));
        Assertions.assertSame(base, RangerBaseModelObject.nullSafeList(base));
    }

    @Test
    public void test03_getUpdatableFactories() {
        List<String> l1 = RangerBaseModelObject.getUpdatableList(null);
        List<String> l2 = RangerBaseModelObject.getUpdatableList(Collections.singletonList("a"));
        List<String> l3 = RangerBaseModelObject.getUpdatableList(new ArrayList<>(Arrays.asList("a")));
        Assertions.assertTrue(l1.isEmpty());
        Assertions.assertEquals(Arrays.asList("a"), l2);
        Assertions.assertSame(l3, RangerBaseModelObject.getUpdatableList(l3));

        Set<String> s1 = RangerBaseModelObject.getUpdatableSet(null);
        Set<String> s2 = RangerBaseModelObject.getUpdatableSet(new HashSet<>(Collections.singleton("z")));
        Set<String> s3 = RangerBaseModelObject.getUpdatableSet(new HashSet<>(Collections.singleton("z")));
        Assertions.assertTrue(s1.isEmpty());
        Assertions.assertTrue(s2.contains("z"));
        Assertions.assertTrue(s3.contains("z"));

        Map<String, String> m1 = RangerBaseModelObject.getUpdatableMap(null);
        Map<String, String> m2 = RangerBaseModelObject.getUpdatableMap(Collections.singletonMap("k", "v"));
        Map<String, String> m3 = RangerBaseModelObject.getUpdatableMap(new HashMap<>());
        Assertions.assertTrue(m1.isEmpty());
        Assertions.assertEquals("v", m2.get("k"));
        Assertions.assertSame(m3, RangerBaseModelObject.getUpdatableMap(m3));
    }

    @Test
    public void test04_updateFromAndDefaults() {
        RangerBaseModelObject src = new RangerBaseModelObject();
        src.setIsEnabled(Boolean.FALSE);

        RangerBaseModelObject dest = new RangerBaseModelObject();
        dest.updateFrom(src);
        Assertions.assertEquals(Boolean.FALSE, dest.getIsEnabled());
    }
}
