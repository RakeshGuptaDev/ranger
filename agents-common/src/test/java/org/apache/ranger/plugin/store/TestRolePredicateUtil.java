/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package org.apache.ranger.plugin.store;

import org.apache.ranger.plugin.model.RangerRole;
import org.apache.ranger.plugin.util.SearchFilter;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

/**
 * @generated by Cursor
 * @description <Unit Test for RolePredicateUtil class>
 */
@ExtendWith(MockitoExtension.class)
@TestMethodOrder(MethodOrderer.MethodName.class)
public class TestRolePredicateUtil {
    private static RangerRole newRole(long id, String name) {
        RangerRole r = new RangerRole();
        r.setId(id);
        r.setName(name);
        r.setUsers(new ArrayList<>());
        r.setGroups(new ArrayList<>());
        r.setRoles(new ArrayList<>());
        return r;
    }

    private static RangerRole.RoleMember member(String name) {
        RangerRole.RoleMember m = new RangerRole.RoleMember();
        m.setName(name);
        return m;
    }

    @Test
    public void test01_roleName_and_partialRoleName_matchRoleOrNestedMembers() {
        RangerRole role = newRole(1L, "adminRole");
        List<RangerRole> list = new ArrayList<>(Collections.singletonList(role));

        RolePredicateUtil util = new RolePredicateUtil();
        SearchFilter f1 = new SearchFilter();
        f1.setParam(SearchFilter.ROLE_NAME, "adminRole");
        util.applyFilter(list, f1);
        Assertions.assertEquals(1, list.size());

        // now make role name non-matching, but nested role member matches
        role.setName("different");
        role.getRoles().add(member("nestedAdmin"));
        List<RangerRole> list2 = new ArrayList<>(Collections.singletonList(role));
        SearchFilter f2 = new SearchFilter();
        f2.setParam(SearchFilter.ROLE_NAME, "nestedAdmin");
        util.applyFilter(list2, f2);
        Assertions.assertEquals(1, list2.size());

        List<RangerRole> list3 = new ArrayList<>(Collections.singletonList(role));
        SearchFilter f3 = new SearchFilter();
        f3.setParam(SearchFilter.ROLE_NAME_PARTIAL, "stedad");
        util.applyFilter(list3, f3);
        Assertions.assertEquals(1, list3.size());
    }

    @Test
    public void test02_roleId_group_and_user_exact_and_partial() {
        RangerRole role = newRole(5L, "roleX");
        role.getGroups().add(member("analytics"));
        role.getUsers().add(member("alice"));
        List<RangerRole> list = new ArrayList<>(Collections.singletonList(role));

        RolePredicateUtil util = new RolePredicateUtil();

        SearchFilter byId = new SearchFilter();
        byId.setParam(SearchFilter.ROLE_ID, "5");
        util.applyFilter(list, byId);
        Assertions.assertEquals(1, list.size());

        List<RangerRole> list2 = new ArrayList<>(Collections.singletonList(role));
        SearchFilter byGroup = new SearchFilter();
        byGroup.setParam(SearchFilter.GROUP_NAME, "analytics");
        util.applyFilter(list2, byGroup);
        Assertions.assertEquals(1, list2.size());

        List<RangerRole> list3 = new ArrayList<>(Collections.singletonList(role));
        SearchFilter byGroupPartial = new SearchFilter();
        byGroupPartial.setParam(SearchFilter.GROUP_NAME_PARTIAL, "lyt");
        util.applyFilter(list3, byGroupPartial);
        Assertions.assertEquals(1, list3.size());

        List<RangerRole> list4 = new ArrayList<>(Collections.singletonList(role));
        SearchFilter byUser = new SearchFilter();
        byUser.setParam(SearchFilter.USER_NAME, "alice");
        util.applyFilter(list4, byUser);
        Assertions.assertEquals(1, list4.size());

        List<RangerRole> list5 = new ArrayList<>(Collections.singletonList(role));
        SearchFilter byUserPartial = new SearchFilter();
        byUserPartial.setParam(SearchFilter.USER_NAME_PARTIAL, "ali");
        util.applyFilter(list5, byUserPartial);
        Assertions.assertEquals(1, list5.size());
    }
}
