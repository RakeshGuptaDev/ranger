/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package org.apache.ranger.plugin.model.validation;

import org.apache.ranger.plugin.errors.ValidationErrorCode;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;

/**
 * @generated by Cursor
 * @description <Unit Test for ValidationFailureDetails class>
 */
@ExtendWith(MockitoExtension.class)
@TestMethodOrder(MethodOrderer.MethodName.class)
public class TestValidationFailureDetails {
    @Test
    public void test01_equals_hashCode_builderVsCtor() {
        ValidationFailureDetails a = new ValidationFailureDetailsBuilder().field("name").subField("sub").isMissing()
                .errorCode(101).becauseOf("reason1").build();

        ValidationFailureDetails b = new ValidationFailureDetails(101, "name", "sub", true, false, false, "reason1");

        Assertions.assertEquals(a, b);
        Assertions.assertEquals(a.hashCode(), b.hashCode());
    }

    @Test
    public void test02_equals_differentFields() {
        ValidationFailureDetails base = new ValidationFailureDetails(101, "f", "sf", true, false, false, "r");
        ValidationFailureDetails diffError = new ValidationFailureDetails(102, "f", "sf", true, false, false, "r");
        ValidationFailureDetails diffMissing = new ValidationFailureDetails(101, "f", "sf", false, false, false, "r");
        ValidationFailureDetails diffSemantic = new ValidationFailureDetails(101, "f", "sf", true, true, false, "r");
        ValidationFailureDetails diffInternal = new ValidationFailureDetails(101, "f", "sf", true, false, true, "r");
        ValidationFailureDetails diffField = new ValidationFailureDetails(101, "f2", "sf", true, false, false, "r");
        ValidationFailureDetails diffSub = new ValidationFailureDetails(101, "f", "sf2", true, false, false, "r");
        ValidationFailureDetails diffReason = new ValidationFailureDetails(101, "f", "sf", true, false, false, "r2");

        Assertions.assertNotEquals(base, diffError);
        Assertions.assertNotEquals(base, diffMissing);
        Assertions.assertNotEquals(base, diffSemantic);
        Assertions.assertNotEquals(base, diffInternal);
        Assertions.assertNotEquals(base, diffField);
        Assertions.assertNotEquals(base, diffSub);
        Assertions.assertNotEquals(base, diffReason);
    }

    @Test
    public void test03_toString_includesType_missing() {
        ValidationFailureDetails d = new ValidationFailureDetails(0, "f", "sf", true, false, false, "rr");
        String s = d.toString();
        Assertions.assertTrue(s.contains("type[missing]"));
    }

    @Test
    public void test04_toString_includesType_semantic() {
        ValidationFailureDetails d = new ValidationFailureDetails(0, "f", "sf", false, true, false, "rr");
        String s = d.toString();
        Assertions.assertTrue(s.contains("type[semantically incorrect]"));
    }

    @Test
    public void test05_toString_includesType_internal() {
        ValidationFailureDetails d = new ValidationFailureDetails(0, "f", "sf", false, false, true, "rr");
        String s = d.toString();
        Assertions.assertTrue(s.contains("type[internal error]"));
    }

    @Test
    public void test06_ctor_fromErrorCode_messageFormatting() {
        ValidationFailureDetails d = new ValidationFailureDetails(
                ValidationErrorCode.ROLE_VALIDATION_ERR_INVALID_ROLE_ID, "id", 7L);
        String s = d.toString();
        Assertions.assertTrue(s.contains(
                "error code[" + ValidationErrorCode.ROLE_VALIDATION_ERR_INVALID_ROLE_ID.getErrorCode() + "]"));
        Assertions.assertTrue(s.contains("field[id]"));
        Assertions.assertTrue(s.contains("reason["));
    }
}
