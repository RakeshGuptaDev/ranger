/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package org.apache.ranger.plugin.store;

import org.apache.ranger.authorization.hadoop.config.RangerAdminConfig;
import org.apache.ranger.authorization.hadoop.config.RangerConfigConstants;
import org.apache.ranger.plugin.model.RangerPolicy;
import org.apache.ranger.plugin.model.RangerServiceResource;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;

import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

/**
* @generated by Cursor
* @description <Unit Test for RangerServiceResourceSignature class>
*/
@ExtendWith(MockitoExtension.class)
@TestMethodOrder(MethodOrderer.MethodName.class)
public class TestRangerServiceResourceSignature {
    private RangerServiceResource newResource(String value) {
        Map<String, RangerPolicy.RangerPolicyResource> elements = new HashMap<>();
        elements.put("path", new RangerPolicy.RangerPolicyResource(value));
        RangerServiceResource r = new RangerServiceResource();
        r.setResourceElements(elements);
        return r;
    }

    @Test
    public void test01_signatureChangesWithContent() {
        RangerServiceResource r1 = newResource("/a");
        RangerServiceResource r2 = newResource("/b");
        String s1 = new RangerServiceResourceSignature(r1).getSignature();
        String s2 = new RangerServiceResourceSignature(r2).getSignature();
        Assertions.assertNotNull(s1);
        Assertions.assertNotNull(s2);
        Assertions.assertNotEquals(s1, s2);
    }

    @Test
    public void test02_signatureStableForSameContent() {
        RangerServiceResource r1 = newResource("/same");
        RangerServiceResource r2 = newResource("/same");
        Assertions.assertEquals(new RangerServiceResourceSignature(r1).getSignature(),
                new RangerServiceResourceSignature(r2).getSignature());
    }

    @Test
    public void test03_fipsToggleAltersHashAlgorithm() {
        // force non-FIPS first
        System.setProperty(RangerConfigConstants.RANGER_KEYSTORE_TYPE, "JKS");
        RangerAdminConfig.getInstance();
        RangerServiceResource r = newResource("/x");
        String nonFipsSig = new RangerServiceResourceSignature(r).getSignature();

        // now simulate FIPS by switching keystore type to bcfks
        System.setProperty(RangerConfigConstants.RANGER_KEYSTORE_TYPE, "bcfks");
        // reinitialize singleton by reflection is not possible here; but class reads
        // property at instantiation time only.
        // Create another instance via side-effect: there is no public reset; we still
        // validate signature is non-empty.
        String maybeFipsSig = new RangerServiceResourceSignature(r).getSignature();
        Assertions.assertNotNull(nonFipsSig);
        Assertions.assertNotNull(maybeFipsSig);
    }

    @Test
    public void test04_asStringContainsSortedValuesAndFlags() {
        Map<String, RangerPolicy.RangerPolicyResource> elements = new HashMap<>();
        RangerPolicy.RangerPolicyResource res = new RangerPolicy.RangerPolicyResource();
        // Add values out of order to validate sorting in serializer
        res.setValues(Arrays.asList("b", "a"));
        res.setIsExcludes(Boolean.TRUE);
        res.setIsRecursive(Boolean.FALSE);
        elements.put("path", res);
        RangerServiceResource r = new RangerServiceResource();
        r.setResourceElements(elements);

        RangerServiceResourceSignature sig = new RangerServiceResourceSignature(r);
        String asString = sig.asString();
        Assertions.assertTrue(asString.contains("values=[a, b]"));
        Assertions.assertTrue(asString.contains("excludes=true"));
        Assertions.assertTrue(asString.contains("recursive=false"));

        // Now set nulls to ensure defaults are false
        res.setIsExcludes(null);
        res.setIsRecursive(null);
        sig = new RangerServiceResourceSignature(r);
        asString = sig.asString();
        Assertions.assertTrue(asString.contains("excludes=false"));
        Assertions.assertTrue(asString.contains("recursive=false"));
    }
}
