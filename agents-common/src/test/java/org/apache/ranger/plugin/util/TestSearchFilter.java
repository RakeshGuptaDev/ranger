/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.apache.ranger.plugin.util;

import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;

import java.util.HashMap;
import java.util.Map;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Assertions.assertTrue;

/**
* @generated by Cursor
* @description <Unit Test for SearchFilter class>
*/
@ExtendWith(MockitoExtension.class)
@TestMethodOrder(MethodOrderer.MethodName.class)
public class TestSearchFilter {
    @Test
    public void test01_params_setGetRemove() {
        SearchFilter f = new SearchFilter();
        assertTrue(f.isEmpty());
        f.setParam("a", "1");
        assertEquals("1", f.getParam("a"));
        f.removeParam("a");
        assertNull(f.getParam("a"));
    }

    @Test
    public void test02_getParamsWithPrefix_stripAndKeep() {
        Map<String, String> base = new HashMap<>();
        base.put("pre.x", "1");
        base.put("pre.y", "2");
        base.put("z", "9");
        SearchFilter f = new SearchFilter(base);

        Map<String, String> withStrip = f.getParamsWithPrefix("pre.", true);
        assertEquals(2, withStrip.size());
        assertEquals("1", withStrip.get("x"));
        assertEquals("2", withStrip.get("y"));

        Map<String, String> withoutStrip = f.getParamsWithPrefix("pre.", false);
        assertEquals(2, withoutStrip.size());
        assertEquals("1", withoutStrip.get("pre.x"));
    }

    @Test
    public void test03_copyCtor_and_basicFields() {
        SearchFilter f = new SearchFilter();
        f.setParam("a", "1");
        f.setStartIndex(5);
        f.setMaxRows(10);
        f.setGetCount(false);
        f.setSortBy("name");
        f.setSortType("asc");

        SearchFilter g = new SearchFilter(f);
        assertEquals("1", g.getParam("a"));
        assertEquals(5, g.getStartIndex());
        assertEquals(10, g.getMaxRows());
        assertFalse(g.isGetCount());
        assertEquals("name", g.getSortBy());
        assertEquals("asc", g.getSortType());
    }

    @Test
    public void test04_equals_hashCode_toString_multiValue() {
        SearchFilter f = new SearchFilter();
        SearchFilter g = new SearchFilter();
        assertEquals(f, g);
        assertEquals(f.hashCode(), g.hashCode());

        f.setParam("a", "1");
        assertFalse(f.equals(g));

        String s = f.toString();
        assertTrue(s.contains("SearchFilter={"));

        f.setMultiValueParam("k", new Object[] {"x", "y"});
        assertNotNull(f.getMultiValueParam("k"));
    }
}
