/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package org.apache.ranger.plugin.model;

import org.apache.ranger.plugin.model.RangerGds.DataShareInDatasetSummary;
import org.apache.ranger.plugin.model.RangerGds.DataShareSummary;
import org.apache.ranger.plugin.model.RangerGds.DatasetSummary;
import org.apache.ranger.plugin.model.RangerGds.DatasetsSummary;
import org.apache.ranger.plugin.model.RangerGds.GdsPermission;
import org.apache.ranger.plugin.model.RangerGds.GdsShareStatus;
import org.apache.ranger.plugin.model.RangerGds.RangerDataShare;
import org.apache.ranger.plugin.model.RangerGds.RangerDataShareInDataset;
import org.apache.ranger.plugin.model.RangerGds.RangerDataset;
import org.apache.ranger.plugin.model.RangerGds.RangerDatasetInProject;
import org.apache.ranger.plugin.model.RangerGds.RangerGdsBaseModelObject;
import org.apache.ranger.plugin.model.RangerGds.RangerGdsMaskInfo;
import org.apache.ranger.plugin.model.RangerGds.RangerGdsObjectACL;
import org.apache.ranger.plugin.model.RangerGds.RangerProject;
import org.apache.ranger.plugin.model.RangerGds.RangerSharedResource;
import org.apache.ranger.plugin.model.RangerPolicy.RangerPolicyItemDataMaskInfo;
import org.apache.ranger.plugin.model.RangerPolicy.RangerPolicyItemRowFilterInfo;
import org.apache.ranger.plugin.model.RangerPolicy.RangerPolicyResource;
import org.apache.ranger.plugin.model.RangerPrincipal.PrincipalType;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

/**
* @generated by Cursor
* @description <Unit Test for RangerGds class>
*/
@TestMethodOrder(MethodOrderer.MethodName.class)
@ExtendWith(MockitoExtension.class)
public class TestRangerGds {
    @Test
    public void test01_baseModelObjectToString() {
        RangerGdsBaseModelObject base = new RangerGdsBaseModelObject();
        base.setGuid("g1");
        base.setDescription("desc");
        Map<String, String> opts = new HashMap<>();
        opts.put("k", "v");
        base.setOptions(opts);
        Map<String, String> add = new HashMap<>();
        add.put("a", "b");
        base.setAdditionalInfo(add);

        String s = base.toString(new StringBuilder()).toString();
        Assertions.assertTrue(s.contains("description={desc}"));
        Assertions.assertTrue(s.contains("options={"));
        Assertions.assertTrue(s.contains("additionalInfo={"));
    }

    @Test
    public void test02_datasetToString() {
        RangerDataset ds = new RangerDataset();
        ds.setName("ds1");
        ds.setAcl(new RangerGdsObjectACL());
        ds.setValiditySchedule(new RangerValiditySchedule());
        ds.setTermsOfUse("terms");
        List<String> labels = new ArrayList<>();
        labels.add("L1");
        ds.setLabels(labels);
        List<String> keywords = new ArrayList<>();
        keywords.add("K1");
        ds.setKeywords(keywords);

        String s = ds.toString(new StringBuilder()).toString();
        Assertions.assertTrue(s.contains("RangerDataset={"));
        Assertions.assertTrue(s.contains("name={ds1}"));
        Assertions.assertTrue(s.contains("termsOfUse={terms}"));
    }

    @Test
    public void test03_projectToString() {
        RangerProject pr = new RangerProject();
        pr.setName("p1");
        pr.setAcl(new RangerGdsObjectACL());
        pr.setValiditySchedule(new RangerValiditySchedule());
        pr.setTermsOfUse("termsP");
        String s = pr.toString(new StringBuilder()).toString();
        Assertions.assertTrue(s.contains("RangerProject={"));
        Assertions.assertTrue(s.contains("name={p1}"));
        Assertions.assertTrue(s.contains("termsOfUse={termsP}"));
    }

    @Test
    public void test04_dataShareToString() {
        RangerDataShare ds = new RangerDataShare();
        ds.setName("share1");
        ds.setAcl(new RangerGdsObjectACL());
        ds.setService("svc");
        ds.setZone("zone");
        ds.setConditionExpr("x > 5");
        List<RangerGdsMaskInfo> masks = new ArrayList<>();
        RangerGdsMaskInfo mi = new RangerGdsMaskInfo();
        mi.setValues(new ArrayList<>());
        mi.setMaskInfo(new RangerPolicyItemDataMaskInfo("MASK", null, null));
        masks.add(mi);
        ds.setDefaultTagMasks(masks);

        Set<String> access = new HashSet<>();
        access.add("read");
        ds.setDefaultAccessTypes(access);
        ds.setTermsOfUse("termsS");

        String s = ds.toString(new StringBuilder()).toString();
        Assertions.assertTrue(s.contains("RangerDataShare={"));
        Assertions.assertTrue(s.contains("defaultAccessTypes={"));
        Assertions.assertTrue(s.contains("defaultTagMasks={"));
    }

    @Test
    public void test05_sharedResourceToString() {
        RangerSharedResource sr = new RangerSharedResource();
        sr.setName("res1");
        sr.setDataShareId(9L);
        Map<String, RangerPolicyResource> res = new HashMap<>();
        res.put("db", new RangerPolicyResource());
        sr.setResource(res);
        sr.setSubResource(new RangerPolicyResource());
        sr.setSubResourceType("table");
        sr.setConditionExpr("a=1");
        Set<String> accessTypes = new HashSet<>();
        accessTypes.add("use");
        sr.setAccessTypes(accessTypes);
        sr.setRowFilter(new RangerPolicyItemRowFilterInfo("dept = 'hr'"));
        List<RangerGdsMaskInfo> subMasks = new ArrayList<>();
        subMasks.add(new RangerGdsMaskInfo());
        sr.setSubResourceMasks(subMasks);
        Set<String> profiles = new HashSet<>();
        profiles.add("p1");
        sr.setProfiles(profiles);

        String s = sr.toString(new StringBuilder()).toString();
        Assertions.assertTrue(s.contains("RangerSharedResource={"));
        Assertions.assertTrue(s.contains("rowFilterInfo={"));
        Assertions.assertTrue(s.contains("profiles={"));
    }

    @Test
    public void test06_maskInfoToString() {
        RangerGdsMaskInfo mi = new RangerGdsMaskInfo();
        List<String> vals = new ArrayList<>();
        vals.add("v");
        mi.setValues(vals);
        mi.setMaskInfo(new RangerPolicyItemDataMaskInfo("MASK", "c", "x"));
        String s = mi.toString();
        Assertions.assertTrue(s.contains("RangerGdsMaskInfo={"));
        Assertions.assertTrue(s.contains("values="));
        Assertions.assertTrue(s.contains("maskInfo="));
    }

    @Test
    public void test07_dataShareInDatasetToString() {
        RangerDataShareInDataset did = new RangerDataShareInDataset();
        did.setDataShareId(1L);
        did.setDatasetId(2L);
        did.setStatus(GdsShareStatus.ACTIVE);
        did.setValiditySchedule(new RangerValiditySchedule());
        Set<String> profiles = new HashSet<>();
        profiles.add("p");
        did.setProfiles(profiles);
        did.setApprover("root");
        String s = did.toString(new StringBuilder()).toString();
        Assertions.assertTrue(s.contains("RangerDataShareInDataset={"));
        Assertions.assertTrue(s.contains("status={ACTIVE}"));
    }

    @Test
    public void test08_datasetInProjectToString() {
        RangerDatasetInProject dip = new RangerDatasetInProject();
        dip.setDatasetId(3L);
        dip.setProjectId(4L);
        dip.setStatus(GdsShareStatus.REQUESTED);
        dip.setValiditySchedule(new RangerValiditySchedule());
        Set<String> profiles = new HashSet<>();
        profiles.add("q");
        dip.setProfiles(profiles);
        dip.setApprover("boss");
        String s = dip.toString(new StringBuilder()).toString();
        Assertions.assertTrue(s.contains("RangerDatasetInProject={"));
        Assertions.assertTrue(s.contains("datasetGuid={"));
        Assertions.assertTrue(s.contains("projectGuid={"));
    }

    @Test
    public void test09_aclToString() {
        RangerGdsObjectACL acl = new RangerGdsObjectACL();
        Map<String, GdsPermission> users = new HashMap<>();
        users.put("u", GdsPermission.ADMIN);
        Map<String, GdsPermission> groups = new HashMap<>();
        groups.put("g", GdsPermission.VIEW);
        Map<String, GdsPermission> roles = new HashMap<>();
        roles.put("r", GdsPermission.LIST);
        acl.setUsers(users);
        acl.setGroups(groups);
        acl.setRoles(roles);
        String s = acl.toString();
        Assertions.assertTrue(s.contains("RangerGdsObjectACL={"));
        Assertions.assertTrue(s.contains("users={"));
        Assertions.assertTrue(s.contains("groups={"));
        Assertions.assertTrue(s.contains("roles={"));
    }

    @Test
    public void test10_datasetSummaryToString() {
        DatasetSummary sum = new DatasetSummary();
        sum.setName("ds");
        sum.setDescription("d");
        sum.setPermissionForCaller(GdsPermission.VIEW);
        Map<PrincipalType, Integer> pc = new HashMap<>();
        pc.put(PrincipalType.USER, 2);
        sum.setPrincipalsCount(pc);
        Map<PrincipalType, Integer> ap = new HashMap<>();
        ap.put(PrincipalType.GROUP, 1);
        sum.setAclPrincipalsCount(ap);
        sum.setProjectsCount(5L);
        sum.setTotalResourceCount(7L);
        sum.setValiditySchedule(new RangerValiditySchedule());
        List<DataShareInDatasetSummary> shares = new ArrayList<>();
        shares.add(new DataShareInDatasetSummary());
        sum.setDataShares(shares);
        List<String> labels = new ArrayList<>();
        labels.add("L");
        sum.setLabels(labels);
        List<String> keywords = new ArrayList<>();
        keywords.add("K");
        sum.setKeywords(keywords);
        String s = sum.toString();
        Assertions.assertTrue(s.contains("DatasetSummary={"));
        Assertions.assertTrue(s.contains("permissionForCaller={VIEW}"));
    }

    @Test
    public void test11_datasetsSummaryToStringAndGetters() {
        Map<String, Map<String, Integer>> info = new HashMap<>();
        Map<String, Integer> inner = new HashMap<>();
        inner.put("key", 1);
        info.put("outer", inner);
        DatasetsSummary dss = new DatasetsSummary(null, info);
        Assertions.assertEquals(info, dss.getAdditionalInfo());
        String s = dss.toString();
        Assertions.assertTrue(s.contains("DatasetsSummary={"));
        Assertions.assertTrue(s.contains("additionalInfo={"));
    }

    @Test
    public void test12_dataShareSummaryToString() {
        DataShareSummary sum = new DataShareSummary();
        sum.setName("s");
        sum.setDescription("d");
        sum.setPermissionForCaller(GdsPermission.POLICY_ADMIN);
        sum.setResourceCount(2L);
        sum.setServiceId(11L);
        sum.setServiceName("svc");
        sum.setServiceType("hive");
        sum.setZoneId(3L);
        sum.setZoneName("z");
        List<DataShareInDatasetSummary> lst = new ArrayList<>();
        lst.add(new DataShareInDatasetSummary());
        sum.setDatasets(lst);
        String s = sum.toString();
        Assertions.assertTrue(s.contains("DataShareSummary={"));
        Assertions.assertTrue(s.contains("serviceType={hive}"));
    }

    @Test
    public void test13_dataShareInDatasetSummaryToString() {
        DataShareInDatasetSummary sum = new DataShareInDatasetSummary();
        sum.setDatasetName("d");
        sum.setDatasetId(1L);
        sum.setDataShareId(2L);
        sum.setDataShareName("s");
        sum.setServiceId(3L);
        sum.setServiceName("svc");
        sum.setZoneId(4L);
        sum.setZoneName("z");
        sum.setResourceCount(5L);
        sum.setShareStatus(GdsShareStatus.GRANTED);
        sum.setApprover("a");
        String s = sum.toString();
        Assertions.assertTrue(s.contains("DataShareInDatasetSummary={"));
        Assertions.assertTrue(s.contains("shareStatus={GRANTED}"));
    }
}
