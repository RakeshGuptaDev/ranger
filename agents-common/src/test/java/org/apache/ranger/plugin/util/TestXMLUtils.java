/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.apache.ranger.plugin.util;

import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;

import java.io.ByteArrayInputStream;
import java.nio.charset.StandardCharsets;
import java.util.HashMap;
import java.util.Map;

import static org.junit.jupiter.api.Assertions.assertEquals;

/**
* @generated by Cursor
* @description <Unit Test for XMLUtils class>
*/
@ExtendWith(MockitoExtension.class)
@TestMethodOrder(MethodOrderer.MethodName.class)
public class TestXMLUtils {
    @Test
    public void test01_loadConfig_fromStream() {
        String xml = "<configuration>" + "<property><name>a</name><value>1</value></property>"
                + "<property><name>b</name><value>2</value></property>" + "</configuration>";
        ByteArrayInputStream in = new ByteArrayInputStream(xml.getBytes(StandardCharsets.UTF_8));
        Map<Object, Object> props = new HashMap<>();
        XMLUtils.loadConfig(in, props);
        assertEquals("1", props.get("a"));
        assertEquals("2", props.get("b"));
    }

    @Test
    public void test02_loadConfig_handlesBadStream() {
        ByteArrayInputStream in = new ByteArrayInputStream("<not-xml".getBytes(StandardCharsets.UTF_8));
        Map<Object, Object> props = new HashMap<>();
        XMLUtils.loadConfig(in, props);
        assertEquals(0, props.size());
    }

    @Test
    public void test03_loadConfig_fromFilename_missingIsHandled() {
        Map<Object, Object> props = new HashMap<>();
        XMLUtils.loadConfig("no-such-file.xml", props);
        // no throw and no entries added
        assertEquals(0, props.size());
    }

    @Test
    public void test04_duplicateKeys_overwriteLast() {
        String xml = "<configuration>" +
                "<property><name>a</name><value>1</value></property>" +
                "<property><name>a</name><value>2</value></property>" +
                "</configuration>";
        ByteArrayInputStream in = new ByteArrayInputStream(xml.getBytes(StandardCharsets.UTF_8));
        Map<Object, Object> props = new HashMap<>();
        XMLUtils.loadConfig(in, props);
        assertEquals("2", props.get("a"));
    }
}
