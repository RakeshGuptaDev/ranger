/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.apache.ranger.plugin.contextenricher.externalretrievers;

import org.apache.ranger.admin.client.RangerAdminClient;
import org.apache.ranger.authorization.hadoop.config.RangerPluginConfig;
import org.apache.ranger.plugin.model.RangerRole;
import org.apache.ranger.plugin.policyengine.RangerPluginContext;
import org.apache.ranger.plugin.util.RangerRoles;
import org.apache.ranger.plugin.util.RangerRolesUtil;
import org.apache.ranger.plugin.util.RangerUserStore;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;

import java.io.BufferedReader;
import java.io.File;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.net.ServerSocket;
import java.net.Socket;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.util.Arrays;
import java.util.Base64;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.mockito.Mockito.when;

/**
 * @generated by Cursor
 * @description <Unit Test for RangerMultiSourceUserStoreRetriever class>
 */
@ExtendWith(MockitoExtension.class)
@TestMethodOrder(MethodOrderer.MethodName.class)
public class TestRangerMultiSourceUserStoreRetriever {
    @Test
    public void test01_toRetrieverOptions_parsesKeyValuePairs() throws Exception {
        RangerMultiSourceUserStoreRetriever r = new RangerMultiSourceUserStoreRetriever();
        Method m = RangerMultiSourceUserStoreRetriever.class.getDeclaredMethod("toRetrieverOptions", Map.class);
        m.setAccessible(true);
        Map<String, String> opts = new HashMap<>();
        opts.put("retriever0_api", "attrName=region, userStoreURL=http://host");

        @SuppressWarnings("unchecked")
        Map<String, Map<String, String>> parsed = (Map<String, Map<String, String>>) m.invoke(r, opts);
        assertEquals("region", parsed.get("retriever0_api").get("attrName"));
        assertEquals("http://host", parsed.get("retriever0_api").get("userStoreURL"));
    }

    @Test
    public void test02_retrieveUserAttrFromRoles_filtersByPrefixAndFlattensValues() {
        RangerRoles roles = new RangerRoles();
        Set<RangerRole> roleSet = new HashSet<>();

        RangerRole role1 = new RangerRole();
        role1.setName("region.US");
        role1.setUsers(Arrays.asList(new RangerRole.RoleMember("alice", true)));
        roleSet.add(role1);

        RangerRole role2 = new RangerRole();
        role2.setName("region.EU");
        role2.setUsers(Arrays.asList(new RangerRole.RoleMember("alice", true)));
        roleSet.add(role2);

        RangerRoles rr = new RangerRoles();
        rr.setRangerRoles(roleSet);

        RangerMultiSourceUserStoreRetriever r = new RangerMultiSourceUserStoreRetriever();
        RangerPluginConfig pc = Mockito.mock(RangerPluginConfig.class);
        RangerPluginContext ctx = new RangerPluginContext(pc);
        r.setPluginContext(ctx);

        Map<String, String> options = new HashMap<>();
        options.put("attrName", "region");

        try {
            Field f = RangerMultiSourceUserStoreRetriever.class.getDeclaredField("rolesUtil");
            f.setAccessible(true);
            f.set(r, new RangerRolesUtil(rr));
        } catch (Exception e) {
            throw new RuntimeException(e);
        }

        Map<String, Map<String, String>> out = r.retrieveUserAttrFromRoles("retriever0_role", options);
        assertEquals("US,EU", out.get("alice").get("region"));
    }

    @Test
    public void test03_retrieveUserStoreInfo_fetchesRolesWhenRoleRetrieverConfigured() throws Exception {
        RangerMultiSourceUserStoreRetriever r = new RangerMultiSourceUserStoreRetriever();
        Map<String, String> enricherOptions = new HashMap<>();
        enricherOptions.put("retriever0_role", "attrName=region");

        RangerPluginConfig pc = Mockito.mock(RangerPluginConfig.class);
        when(pc.getServiceName()).thenReturn("svc");
        when(pc.getAppId()).thenReturn("app");
        when(pc.getPropertyPrefix()).thenReturn("ranger.plugin.svc");
        when(pc.get("ranger.plugin.svc.policy.rest.url")).thenReturn("http://localhost:6080");
        RangerPluginContext ctx = Mockito.spy(new RangerPluginContext(pc));

        RangerAdminClient admin = Mockito.mock(RangerAdminClient.class);
        Mockito.doReturn(admin).when(ctx).createAdminClient(pc);
        when(admin.getRolesIfUpdated(Mockito.anyLong(), Mockito.anyLong())).thenReturn(new RangerRoles());

        r.setPluginContext(ctx);
        r.setPluginConfig(pc);
        r.init(enricherOptions);

        RangerUserStore store = r.retrieveUserStoreInfo(-1, System.currentTimeMillis());
        assertNotNull(store);
        assertNotNull(store.getUserAttrMapping());
        assertTrue(store.getUserAttrMapping().isEmpty());
    }

    @Test
    public void test04_toRetrieverOptions_invalidOptions_parsesEmptyValue() throws Exception {
        RangerMultiSourceUserStoreRetriever r = new RangerMultiSourceUserStoreRetriever();
        Method m = RangerMultiSourceUserStoreRetriever.class.getDeclaredMethod("toRetrieverOptions", String.class,
                String.class);
        m.setAccessible(true);
        @SuppressWarnings("unchecked")
        Map<String, String> parsed = (Map<String, String>) m.invoke(r, "retriever0_api",
                "attrName=region, userStoreURL");
        assertEquals("region", parsed.get("attrName"));
        assertTrue(parsed.containsKey("userStoreURL"));
        assertEquals("", parsed.get("userStoreURL"));
    }

    @Test
    public void test05_retrieveAll_withUnknownSource_throws() throws Exception {
        RangerMultiSourceUserStoreRetriever r = new RangerMultiSourceUserStoreRetriever();
        Map<String, Map<String, String>> opts = new HashMap<>();
        opts.put("retriever9_unknown", new HashMap<String, String>());
        Field f = RangerMultiSourceUserStoreRetriever.class.getDeclaredField("retrieverOptions");
        f.setAccessible(true);
        f.set(r, opts);

        Method retrieveAll = RangerMultiSourceUserStoreRetriever.class.getDeclaredMethod("retrieveAll");
        retrieveAll.setAccessible(true);
        assertThrows(Exception.class, () -> {
            try {
                retrieveAll.invoke(r);
            } catch (Exception e) {
                throw new RuntimeException(e);
            }
        });
    }

    @Test
    public void test06_mergeUserAttributes_mergesAndOverwrites() throws Exception {
        RangerMultiSourceUserStoreRetriever r = new RangerMultiSourceUserStoreRetriever();
        Method merge = RangerMultiSourceUserStoreRetriever.class.getDeclaredMethod("mergeUserAttributes", Map.class,
                Map.class);
        merge.setAccessible(true);
        Map<String, Map<String, String>> dest = new HashMap<>();
        Map<String, String> alice = new HashMap<>();
        alice.put("region", "US");
        dest.put("alice", alice);
        Map<String, Map<String, String>> src = new HashMap<>();
        Map<String, String> alice2 = new HashMap<>();
        alice2.put("dept", "eng");
        alice2.put("region", "EU");
        src.put("alice", alice2);

        merge.invoke(r, src, dest);
        assertEquals("EU", dest.get("alice").get("region"));
        assertEquals("eng", dest.get("alice").get("dept"));
    }

    @Test
    public void test07_retrieveUserAttributes_fromDataFile_path() throws Exception {
        RangerMultiSourceUserStoreRetriever r = new RangerMultiSourceUserStoreRetriever();
        Method m = RangerMultiSourceUserStoreRetriever.class.getDeclaredMethod("retrieveUserAttributes", String.class,
                Map.class);
        m.setAccessible(true);
        File tmp = File.createTempFile("userattrs", ".properties");
        Files.write(tmp.toPath(), "alice=US\n".getBytes(StandardCharsets.UTF_8));
        Map<String, String> options = new HashMap<>();
        options.put("attrName", "region");
        options.put("dataFile", tmp.getAbsolutePath());
        @SuppressWarnings("unchecked")
        Map<String, Map<String, String>> out = (Map<String, Map<String, String>>) m.invoke(r, "retriever0_api",
                options);
        assertEquals("US", out.get("alice").get("region"));
    }

    @Test
    public void test08_retrieveUserAttributes_missingAttrName_throws() throws Exception {
        RangerMultiSourceUserStoreRetriever r = new RangerMultiSourceUserStoreRetriever();
        Method m = RangerMultiSourceUserStoreRetriever.class.getDeclaredMethod("retrieveUserAttributes", String.class,
                Map.class);
        m.setAccessible(true);
        Map<String, String> options = new HashMap<>();
        options.put("userStoreURL", "http://host");
        assertThrows(Exception.class, () -> {
            try {
                m.invoke(r, "retriever0_api", options);
            } catch (Exception e) {
                throw new RuntimeException(e);
            }
        });
    }

    @Test
    public void test09_retrieveUserAttributes_missingUrlAndDataFile_throws() throws Exception {
        RangerMultiSourceUserStoreRetriever r = new RangerMultiSourceUserStoreRetriever();
        Method m = RangerMultiSourceUserStoreRetriever.class.getDeclaredMethod("retrieveUserAttributes", String.class,
                Map.class);
        m.setAccessible(true);
        Map<String, String> options = new HashMap<>();
        options.put("attrName", "region");
        assertThrows(Exception.class, () -> {
            try {
                m.invoke(r, "retriever0_api", options);
            } catch (Exception e) {
                throw new RuntimeException(e);
            }
        });
    }

    public static class Response {
        public final int status;
        public final String body;

        public Response(int status, String body) {
            this.status = status;
            this.body = body == null ? "" : body;
        }
    }

    public static class MiniHttpServer implements AutoCloseable {
        private final Map<String, Response> routes;
        private ServerSocket server;
        private Thread thread;
        private volatile boolean running;

        public MiniHttpServer(Map<String, Response> routes) {
            this.routes = routes;
        }

        public int start() throws IOException {
            server = new ServerSocket(0);
            running = true;
            thread = new Thread(() -> {
                while (running && !server.isClosed()) {
                    try (Socket socket = server.accept();
                            BufferedReader reader = new BufferedReader(
                                    new InputStreamReader(socket.getInputStream(), StandardCharsets.UTF_8));
                            PrintWriter writer = new PrintWriter(
                                    new OutputStreamWriter(socket.getOutputStream(), StandardCharsets.UTF_8), true)) {
                        String requestLine = reader.readLine();
                        if (requestLine == null) {
                            continue;
                        }
                        String[] parts = requestLine.split(" ");
                        String path = parts.length >= 2 ? parts[1] : "/";
                        String line;
                        while ((line = reader.readLine()) != null && !line.isEmpty()) {
                            /* ignore */ }
                        Response resp = routes.getOrDefault(path, new Response(404, ""));
                        byte[] bodyBytes = resp.body.getBytes(StandardCharsets.UTF_8);
                        writer.printf("HTTP/1.1 %d %s\r\n", resp.status, resp.status == 200 ? "OK" : "ERR");
                        writer.printf("Content-Length: %d\r\n", bodyBytes.length);
                        writer.print("Content-Type: application/json\r\n");
                        writer.print("Connection: close\r\n\r\n");
                        writer.flush();
                        socket.getOutputStream().write(bodyBytes);
                        socket.getOutputStream().flush();
                    } catch (IOException e) {
                        if (running) {
                            // ignore
                        }
                    }
                }
            }, "mini-http");
            thread.setDaemon(true);
            thread.start();
            return server.getLocalPort();
        }

        @Override
        public void close() throws IOException {
            running = false;
            if (server != null && !server.isClosed()) {
                server.close();
            }
            try {
                if (thread != null) {
                    thread.join(1000);
                }
            } catch (InterruptedException ignored) {
                Thread.currentThread().interrupt();
            }
        }
    }

    @Test
    public void test10_retrieveUserAttributes_urlSuccess_and_httpError() throws Exception {
        // success path
        Map<String, Response> routes1 = new HashMap<>();
        routes1.put("/token", new Response(200, "{\"access_token\":\"t123\"}"));
        routes1.put("/user", new Response(200, "{\"body\":{\"alice\":{\"region\":[\"US\",\"EU\"]}}}"));
        try (MiniHttpServer server = new MiniHttpServer(routes1)) {
            int port = server.start();
            File secrets = File.createTempFile("secrets", ".txt");
            try {
                String json = "{\"tokenUrl\":\"http://127.0.0.1:" + port
                        + "/token\",\"headers\":[{\"Content-Type\":\"application/x-www-form-urlencoded\"}],\"params\":[]}";
                String encoded = Base64.getEncoder().encodeToString(json.getBytes(StandardCharsets.UTF_8));
                Files.write(secrets.toPath(), encoded.getBytes(StandardCharsets.UTF_8));

                RangerMultiSourceUserStoreRetriever r = new RangerMultiSourceUserStoreRetriever();
                Method m = RangerMultiSourceUserStoreRetriever.class.getDeclaredMethod("retrieveUserAttributes",
                        String.class, Map.class);
                m.setAccessible(true);
                Map<String, String> options = new HashMap<>();
                options.put("attrName", "region");
                options.put("userStoreURL", "http://127.0.0.1:" + port + "/user");
                options.put("configFile", secrets.getAbsolutePath());
                @SuppressWarnings("unchecked")
                Map<String, Map<String, String>> out = (Map<String, Map<String, String>>) m.invoke(r, "retriever0_api",
                        options);
                assertEquals("US,EU", out.get("alice").get("region"));
            } finally {
                secrets.delete();
            }
        }

        // error path: token 400
        Map<String, Response> routes2 = new HashMap<>();
        routes2.put("/badtoken", new Response(400, ""));
        routes2.put("/user", new Response(200, "{\"body\":{}}"));
        try (MiniHttpServer server = new MiniHttpServer(routes2)) {
            int port = server.start();
            File secrets = File.createTempFile("secrets", ".txt");
            try {
                String json = "{\"tokenUrl\":\"http://127.0.0.1:" + port
                        + "/badtoken\",\"headers\":[{\"Content-Type\":\"application/x-www-form-urlencoded\"}],\"params\":[]}";
                String encoded = Base64.getEncoder().encodeToString(json.getBytes(StandardCharsets.UTF_8));
                Files.write(secrets.toPath(), encoded.getBytes(StandardCharsets.UTF_8));

                RangerMultiSourceUserStoreRetriever r = new RangerMultiSourceUserStoreRetriever();
                Method m = RangerMultiSourceUserStoreRetriever.class.getDeclaredMethod("retrieveUserAttributes",
                        String.class, Map.class);
                m.setAccessible(true);
                Map<String, String> options = new HashMap<>();
                options.put("attrName", "region");
                options.put("userStoreURL", "http://127.0.0.1:" + port + "/user");
                options.put("configFile", secrets.getAbsolutePath());
                assertThrows(Exception.class, () -> {
                    try {
                        m.invoke(r, "retriever0_api", options);
                    } catch (Exception e) {
                        throw new RuntimeException(e);
                    }
                });
            } finally {
                secrets.delete();
            }
        }
    }
}
