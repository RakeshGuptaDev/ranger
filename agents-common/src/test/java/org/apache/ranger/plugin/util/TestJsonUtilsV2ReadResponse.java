/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.apache.ranger.plugin.util;

import com.fasterxml.jackson.core.type.TypeReference;
import com.sun.jersey.api.client.ClientResponse;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;

import java.util.Map;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;

/**
* @generated by Cursor
* @description <Unit Test for JsonUtilsV2ReadResponse class>
*/
@ExtendWith(MockitoExtension.class)
@TestMethodOrder(MethodOrderer.MethodName.class)
public class TestJsonUtilsV2ReadResponse {
    private static class SimpleResponse extends ClientResponse {
        private final String body;

        SimpleResponse(String body) {
            // status 200 OK
            super(200, null, null, null);
            this.body = body;
        }

        @Override
        public <T> T getEntity(Class<T> c) {
            if (c == String.class) {
                return c.cast(body);
            }
            return super.getEntity(c);
        }
    }

    @Test
    public void test01_readResponseWithClass() throws Exception {
        SimpleResponse resp = new SimpleResponse("{\"a\":1}");
        @SuppressWarnings("unchecked")
        Map<String, Object> out = JsonUtilsV2.readResponse(resp, Map.class);
        assertNotNull(out);
        assertEquals(1, ((Number) out.get("a")).intValue());
    }

    @Test
    public void test02_readResponseWithTypeRef() throws Exception {
        SimpleResponse resp = new SimpleResponse("{\"x\":2}");
        Map<String, Integer> out = JsonUtilsV2.readResponse(resp, new TypeReference<Map<String, Integer>>() {
        });
        assertEquals(2, out.get("x").intValue());
    }
}
