/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package org.apache.ranger.plugin.model;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;

/**
* @generated by Cursor
* @description <Unit Test for RangerValidityRecurrence class>
*/
@TestMethodOrder(MethodOrderer.MethodName.class)
@ExtendWith(MockitoExtension.class)
public class TestRangerValidityRecurrence {
    @Test
    public void test01_validityIntervalComputationAndToString() {
        RangerValidityRecurrence.ValidityInterval vi = new RangerValidityRecurrence.ValidityInterval(1, 2, 30);
        int minutes = RangerValidityRecurrence.ValidityInterval.getValidityIntervalInMinutes(vi);
        Assertions.assertEquals((1 * 24 + 2) * 60 + 30, minutes);

        Assertions.assertEquals(0, RangerValidityRecurrence.ValidityInterval.getValidityIntervalInMinutes(null));

        String s = vi.toString();
        Assertions.assertTrue(s.contains("days=1"));
        Assertions.assertTrue(s.contains("hours=2"));
        Assertions.assertTrue(s.contains("minutes=30"));
    }

    @Test
    public void test02_recurrenceScheduleSetAndGet() {
        RangerValidityRecurrence.RecurrenceSchedule rs = new RangerValidityRecurrence.RecurrenceSchedule();
        rs.setFieldValue(RangerValidityRecurrence.RecurrenceSchedule.ScheduleFieldSpec.minute, "0,30");
        rs.setFieldValue(RangerValidityRecurrence.RecurrenceSchedule.ScheduleFieldSpec.hour, "1");
        rs.setFieldValue(RangerValidityRecurrence.RecurrenceSchedule.ScheduleFieldSpec.dayOfMonth, "*");
        rs.setFieldValue(RangerValidityRecurrence.RecurrenceSchedule.ScheduleFieldSpec.dayOfWeek, "1-5");
        rs.setFieldValue(RangerValidityRecurrence.RecurrenceSchedule.ScheduleFieldSpec.month, "0-11");
        rs.setFieldValue(RangerValidityRecurrence.RecurrenceSchedule.ScheduleFieldSpec.year, "2025");

        Assertions.assertEquals("0,30",
                rs.getFieldValue(RangerValidityRecurrence.RecurrenceSchedule.ScheduleFieldSpec.minute));
        Assertions.assertEquals("1",
                rs.getFieldValue(RangerValidityRecurrence.RecurrenceSchedule.ScheduleFieldSpec.hour));
        Assertions.assertEquals("*",
                rs.getFieldValue(RangerValidityRecurrence.RecurrenceSchedule.ScheduleFieldSpec.dayOfMonth));
        Assertions.assertEquals("1-5",
                rs.getFieldValue(RangerValidityRecurrence.RecurrenceSchedule.ScheduleFieldSpec.dayOfWeek));
        Assertions.assertEquals("0-11",
                rs.getFieldValue(RangerValidityRecurrence.RecurrenceSchedule.ScheduleFieldSpec.month));
        Assertions.assertEquals("2025",
                rs.getFieldValue(RangerValidityRecurrence.RecurrenceSchedule.ScheduleFieldSpec.year));

        String s = rs.toString();
        Assertions.assertTrue(s.contains("minute=0,30"));
        Assertions.assertTrue(s.contains("dayOfWeek=1-5"));
    }

    @Test
    public void test03_validityRecurrenceToStringAndAccessors() {
        RangerValidityRecurrence.RecurrenceSchedule rs = new RangerValidityRecurrence.RecurrenceSchedule("0", "12", "*",
                "1-5", "0-11", "2030");
        RangerValidityRecurrence.ValidityInterval vi = new RangerValidityRecurrence.ValidityInterval(0, 1, 0);
        RangerValidityRecurrence rvr = new RangerValidityRecurrence(rs, vi);

        Assertions.assertEquals(rs, rvr.getSchedule());
        Assertions.assertEquals(vi, rvr.getInterval());

        String s = rvr.toString();
        Assertions.assertTrue(s.contains("Schedule={"));
        Assertions.assertTrue(s.contains("ValidityInterval"));
    }
}
