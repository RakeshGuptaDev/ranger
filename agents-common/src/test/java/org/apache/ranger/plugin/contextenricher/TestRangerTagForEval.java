/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package org.apache.ranger.plugin.contextenricher;

import org.apache.ranger.plugin.model.RangerTag;
import org.apache.ranger.plugin.model.RangerValiditySchedule;
import org.apache.ranger.plugin.policyresourcematcher.RangerPolicyResourceMatcher;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.TimeZone;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertTrue;

/**
* @generated by Cursor
* @description <Unit Test for RangerTagForEval class>
*/
@ExtendWith(MockitoExtension.class)
@TestMethodOrder(MethodOrderer.MethodName.class)
public class TestRangerTagForEval {
    @Test
    public void test01_IsApplicable_NoValidityPeriods_ReturnsTrue() {
        RangerTag tag = new RangerTag();
        tag.setType("TYPE1");
        tag.setAttributes(new HashMap<>());
        tag.setOptions(new HashMap<>());
        tag.setValidityPeriods(new ArrayList<>());

        RangerTagForEval forEval = new RangerTagForEval(tag, RangerPolicyResourceMatcher.MatchType.SELF);

        assertTrue(forEval.isApplicable(new Date()));
    }

    @Test
    public void test02_IsApplicable_WithSchedule_CoversTrueAndFalse() {
        RangerValiditySchedule schedule = new RangerValiditySchedule();
        SimpleDateFormat fmt = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss");
        schedule.setTimeZone(TimeZone.getDefault().getID());
        String nowMinus = fmt.format(new Date(System.currentTimeMillis() - 1000));
        String nowPlus  = fmt.format(new Date(System.currentTimeMillis() + 1000));
        schedule.setStartTime(nowMinus);
        schedule.setEndTime(nowPlus);

        List<RangerValiditySchedule> validity = new ArrayList<>();
        validity.add(schedule);

        RangerTag tag = new RangerTag();
        tag.setType("TYPE2");
        tag.setValidityPeriods(validity);
        tag.setOptions(new HashMap<>());

        RangerTagForEval forEval = new RangerTagForEval(tag, RangerPolicyResourceMatcher.MatchType.ANCESTOR);

        assertTrue(forEval.isApplicable(new Date()));

        // Outside window: set start in future and end in further future so now is outside
        String futureStart = fmt.format(new Date(System.currentTimeMillis() + 600_000));
        String futureEnd   = fmt.format(new Date(System.currentTimeMillis() + 1_200_000));
        schedule.setStartTime(futureStart);
        schedule.setEndTime(futureEnd);
        RangerTagForEval forEval2 = new RangerTagForEval(tag, RangerPolicyResourceMatcher.MatchType.ANCESTOR);
        assertFalse(forEval2.isApplicable(new Date()));
    }

    @Test
    public void test03_IsApplicable_WithOptionsLazyInit() {
        Map<String, Object> opts = new HashMap<>();
        // Put a validity period JSON string to trigger lazy init path in isApplicable
        opts.put(RangerTag.OPTION_TAG_VALIDITY_PERIODS, "[{\"startTime\":\"1\",\"endTime\":\"4102444800000\"}]");

        RangerTag tag = new RangerTag();
        tag.setType("TYPE3");
        tag.setOptions(opts);

        RangerTagForEval forEval = new RangerTagForEval(tag, RangerPolicyResourceMatcher.MatchType.DESCENDANT);

        assertTrue(forEval.isApplicable(new Date()));
    }

    @Test
    public void test04_Equals_HashCode_ToString() {
        RangerTag tag1 = new RangerTag();
        tag1.setType("T");
        tag1.setAttributes(new HashMap<>());
        tag1.setOptions(new HashMap<>());

        RangerTag tag2 = new RangerTag();
        tag2.setType("T");
        tag2.setAttributes(new HashMap<>());
        tag2.setOptions(new HashMap<>());

        RangerTagForEval a = new RangerTagForEval(tag1, RangerPolicyResourceMatcher.MatchType.SELF);
        RangerTagForEval b = new RangerTagForEval(tag2, RangerPolicyResourceMatcher.MatchType.SELF);

        assertEquals(a, b);
        assertEquals(a.hashCode(), b.hashCode());
        assertTrue(a.toString().contains("RangerTagForEval"));
    }

    @Test
    public void test05_IsApplicable_NullAccessTime_ReturnsTrue() {
        RangerTag tag = new RangerTag();
        tag.setType("T");
        RangerTagForEval forEval = new RangerTagForEval(tag, RangerPolicyResourceMatcher.MatchType.SELF);
        assertTrue(forEval.isApplicable(null));
    }

    @Test
    public void test06_IsApplicable_OptionsNonString_NoEvaluatorCreated_ReturnsTrue() {
        Map<String, Object> opts = new HashMap<>();
        opts.put(RangerTag.OPTION_TAG_VALIDITY_PERIODS, 12345L); // non-string triggers empty evaluators
        RangerTag tag = new RangerTag();
        tag.setType("T");
        tag.setOptions(opts);
        RangerTagForEval forEval = new RangerTagForEval(tag, RangerPolicyResourceMatcher.MatchType.SELF);
        assertTrue(forEval.isApplicable(new Date()));
    }
}
