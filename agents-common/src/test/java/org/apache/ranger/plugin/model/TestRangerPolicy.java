/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package org.apache.ranger.plugin.model;

import org.apache.ranger.plugin.model.RangerPolicy.RangerDataMaskPolicyItem;
import org.apache.ranger.plugin.model.RangerPolicy.RangerPolicyItem;
import org.apache.ranger.plugin.model.RangerPolicy.RangerPolicyItemAccess;
import org.apache.ranger.plugin.model.RangerPolicy.RangerPolicyItemCondition;
import org.apache.ranger.plugin.model.RangerPolicy.RangerPolicyItemDataMaskInfo;
import org.apache.ranger.plugin.model.RangerPolicy.RangerPolicyItemRowFilterInfo;
import org.apache.ranger.plugin.model.RangerPolicy.RangerPolicyResource;
import org.apache.ranger.plugin.model.RangerPolicy.RangerRowFilterPolicyItem;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

/**
* @generated by Cursor
* @description <Unit Test for RangerPolicy class>
*/
@ExtendWith(MockitoExtension.class)
@TestMethodOrder(MethodOrderer.MethodName.class)
public class TestRangerPolicy {
    @Test
    public void test01_Policy_SetListMethods() {
        RangerPolicy           policy         = new RangerPolicy();
        List<RangerPolicyItem> policyItemList = getList(new RangerPolicyItem());

        Assertions.assertEquals(0, policy.getPolicyItems().size(), "RangerPolicy.getPolicyItems()");
        policy.addPolicyItem(new RangerPolicyItem());
        Assertions.assertEquals(1, policy.getPolicyItems().size(), "RangerPolicy.addPolicyItem()");
        policy.setPolicyItems(policyItemList);
        Assertions.assertEquals(policyItemList.size(), policy.getPolicyItems().size(), "RangerPolicy.setPolicyItems()");

        Assertions.assertEquals(0, policy.getDenyPolicyItems().size(), "RangerPolicy.getDenyPolicyItems()");
        policy.addDenyPolicyItem(new RangerPolicyItem());
        Assertions.assertEquals(1, policy.getDenyPolicyItems().size(), "RangerPolicy.addDenyPolicyItem()");
        policy.setDenyPolicyItems(policyItemList);
        Assertions.assertEquals(policyItemList.size(), policy.getDenyPolicyItems().size(), "RangerPolicy.setDenyPolicyItems()");

        Assertions.assertEquals(0, policy.getAllowExceptions().size(), "RangerPolicy.getAllowExceptions()");
        policy.addAllowException(new RangerPolicyItem());
        Assertions.assertEquals(1, policy.getAllowExceptions().size(), "RangerPolicy.addAllowException()");
        policy.setAllowExceptions(policyItemList);
        Assertions.assertEquals(policyItemList.size(), policy.getAllowExceptions().size(), "RangerPolicy.setAllowExceptions()");

        Assertions.assertEquals(0, policy.getDenyExceptions().size(), "RangerPolicy.getDenyExceptions()");
        policy.addDenyException(new RangerPolicyItem());
        Assertions.assertEquals(1, policy.getDenyExceptions().size(), "RangerPolicy.addDenyException()");
        policy.setDenyExceptions(policyItemList);
        Assertions.assertEquals(policyItemList.size(), policy.getDenyExceptions().size(), "RangerPolicy.setDenyExceptions()");
    }

    @Test
    public void test02_PolicyItem_SetListMethods() {
        RangerPolicyItem                policyItem = new RangerPolicyItem();
        List<RangerPolicyItemAccess>    accesses   = getList(new RangerPolicyItemAccess());
        List<String>                    users      = getList("user");
        List<String>                    groups     = getList("group");
        List<RangerPolicyItemCondition> conditions = getList(new RangerPolicyItemCondition());

        Assertions.assertEquals(0, policyItem.getAccesses().size(), "RangerPolicyItem.getAccesses()");
        policyItem.addAccess(new RangerPolicyItemAccess());
        Assertions.assertEquals(1, policyItem.getAccesses().size(), "RangerPolicyItem.addAccess()");
        policyItem.setAccesses(accesses);
        Assertions.assertEquals(accesses.size(), policyItem.getAccesses().size(), "RangerPolicyItem.setAccesses()");

        Assertions.assertEquals(0, policyItem.getUsers().size(), "RangerPolicyItem.getUsers()");
        policyItem.addUser(new String());
        Assertions.assertEquals(1, policyItem.getUsers().size(), "RangerPolicyItem.addUser()");
        policyItem.setUsers(users);
        Assertions.assertEquals(users.size(), policyItem.getUsers().size(), "RangerPolicyItem.setUsers()");

        Assertions.assertEquals(0, policyItem.getGroups().size(), "RangerPolicyItem.getGroups()");
        policyItem.addGroup(new String());
        Assertions.assertEquals(1, policyItem.getGroups().size(), "RangerPolicyItem.addGroup()");
        policyItem.setGroups(groups);
        Assertions.assertEquals(groups.size(), policyItem.getGroups().size(), "RangerPolicyItem.setGroups()");

        Assertions.assertEquals(0, policyItem.getConditions().size(), "RangerPolicyItem.getConditions()");
        policyItem.addCondition(new RangerPolicyItemCondition());
        Assertions.assertEquals(1, policyItem.getConditions().size(), "RangerPolicyItem.addCondition()");
        policyItem.setConditions(conditions);
        Assertions.assertEquals(conditions.size(), policyItem.getConditions().size(), "RangerPolicyItem.setConditions()");
    }

    @Test
    public void test03_PolicyResource_SetListMethods() {
        RangerPolicyResource policyResource = new RangerPolicyResource();
        List<String>         values         = getList("value");

        Assertions.assertEquals(0, policyResource.getValues().size(), "RangerPolicyResource.getValues()");
        policyResource.addValue(new String());
        Assertions.assertEquals(1, policyResource.getValues().size(), "RangerPolicyResource.addValue()");
        policyResource.setValues(values);
        Assertions.assertEquals(values.size(), policyResource.getValues().size(), "RangerPolicyResource.setValues()");
    }

    @Test
    public void test04_PolicyItemCondition_SetListMethods() {
        RangerPolicyItemCondition policyItemCondition = new RangerPolicyItemCondition();
        List<String>              values              = getList("value");

        Assertions.assertEquals(0, policyItemCondition.getValues().size(), "RangerPolicyItemCondition.getValues()");
        policyItemCondition.addValue(new String());
        Assertions.assertEquals(1, policyItemCondition.getValues().size(), "RangerPolicyItemCondition.addValue()");
        policyItemCondition.setValues(values);
        Assertions.assertEquals(values.size(), policyItemCondition.getValues().size(), "RangerPolicyItemCondition.setValues()");
    }

    @Test
    public void test01_DefaultsAndPriorityAuditFlags() {
        RangerPolicy p = new RangerPolicy();
        Assertions.assertEquals(RangerPolicy.POLICY_PRIORITY_NORMAL, p.getPolicyPriority());
        Assertions.assertEquals(Boolean.TRUE, p.getIsAuditEnabled());

        p.setPolicyPriority(null);
        Assertions.assertEquals(RangerPolicy.POLICY_PRIORITY_NORMAL, p.getPolicyPriority());

        p.setIsAuditEnabled(null);
        Assertions.assertEquals(Boolean.TRUE, p.getIsAuditEnabled());

        p.addPolicyLabel("L1");
        Assertions.assertTrue(p.getPolicyLabels().contains("L1"));
    }

    @Test
    public void test02_PolicyResourceEqualsHashCodeAndFlags() {
        RangerPolicyResource r1 = new RangerPolicyResource("db1", null, null);
        RangerPolicyResource r2 = new RangerPolicyResource("db1", null, null);
        Assertions.assertEquals(r1, r2);
        Assertions.assertEquals(r1.hashCode(), r2.hashCode());

        r1.setIsExcludes(null);
        r1.setIsRecursive(null);
        Assertions.assertEquals(Boolean.FALSE, r1.getIsExcludes());
        Assertions.assertEquals(Boolean.FALSE, r1.getIsRecursive());

        r1.setValues(Arrays.asList("a", "b"));
        Assertions.assertEquals(Arrays.asList("a", "b"), r1.getValues());

        r1.addValue("c");
        Assertions.assertTrue(r1.getValues().contains("c"));
        r1.addValues(Arrays.asList("x", "y"));
        r1.addValues(new String[] {"z"});
        Assertions.assertTrue(r1.getValues().containsAll(Arrays.asList("x", "y", "z")));
    }

    @Test
    public void test03_PolicyItemAddRemoveApisAndEquals() {
        RangerPolicyItem item = new RangerPolicyItem();
        RangerPolicyItemAccess a = new RangerPolicyItemAccess("read", null);
        item.addAccess(a);
        item.addUsers(Arrays.asList("u1", "u2"));
        item.addGroups(Collections.singletonList("g1"));
        item.addRoles(Collections.singletonList("r1"));
        item.addConditions(Collections.singletonList(new RangerPolicyItemCondition("type", Arrays.asList("v"))));
        item.setDelegateAdmin(null);

        Assertions.assertEquals(Boolean.FALSE, item.getDelegateAdmin());
        Assertions.assertTrue(item.getUsers().contains("u1"));
        Assertions.assertTrue(item.getGroups().contains("g1"));
        Assertions.assertTrue(item.getRoles().contains("r1"));

        Assertions.assertTrue(item.removeUser("u2"));
        Assertions.assertTrue(item.removeGroup("g1"));
        Assertions.assertTrue(item.removeRole("r1"));

        RangerPolicyItem copy = new RangerPolicyItem(item);
        Assertions.assertEquals(item, copy);
        Assertions.assertEquals(item.hashCode(), copy.hashCode());
    }

    @Test
    public void test04_DataMaskAndRowFilterItems() {
        RangerPolicyItemDataMaskInfo dm = new RangerPolicyItemDataMaskInfo("MASK", "col > 1", "val");
        RangerDataMaskPolicyItem dmItem = new RangerDataMaskPolicyItem(Collections.emptyList(), dm, Collections.emptyList(), Collections.emptyList(), Collections.emptyList(), Collections.emptyList(), Boolean.TRUE);
        Assertions.assertEquals(dm, dmItem.getDataMaskInfo());
        Assertions.assertTrue(dmItem.toString().contains("dataMaskInfo={"));

        RangerPolicyItemRowFilterInfo rf = new RangerPolicyItemRowFilterInfo("col=1");
        RangerRowFilterPolicyItem rfItem = new RangerRowFilterPolicyItem(rf, Collections.emptyList(), Collections.emptyList(), Collections.emptyList(), Collections.emptyList(), Collections.emptyList(), Boolean.FALSE);
        Assertions.assertEquals(rf, rfItem.getRowFilterInfo());
        Assertions.assertTrue(rfItem.toString().contains("rowFilterInfo={"));
    }

    @Test
    public void test05_PolicySettersAndNullSafeSupplierV2() {
        RangerPolicy p = new RangerPolicy();
        p.setResources(new HashMap<>());
        p.addResource(new HashMap<>()); // should do nothing harmful
        p.setOptions(new HashMap<>());
        p.setValiditySchedules(Collections.emptyList());
        p.setConditions(Collections.emptyList());
        p.setPolicyItems(Collections.emptyList());
        p.setDenyPolicyItems(Collections.emptyList());
        p.setAllowExceptions(Collections.emptyList());
        p.setDenyExceptions(Collections.emptyList());
        p.setDataMaskPolicyItems(Collections.emptyList());
        p.setRowFilterPolicyItems(Collections.emptyList());

        Assertions.assertNotNull(p.getResources());
        Assertions.assertNotNull(p.getOptions());
        Assertions.assertNotNull(p.getValiditySchedules());

        // switch supplier to V2 and verify empty collections are immutable empty
        RangerBaseModelObject.setNullSafeSupplier(RangerBaseModelObject.NULL_SAFE_SUPPLIER_V2);
        p.setPolicyItems(null);
        Assertions.assertEquals(0, p.getPolicyItems().size());
        // revert to default
        RangerBaseModelObject.setNullSafeSupplier((RangerBaseModelObject.NullSafeSupplier) null);
    }

    @Test
    public void test06_AdditionalResourcesAndToString() {
        RangerPolicy p = new RangerPolicy();
        Map<String, RangerPolicyResource> res = new LinkedHashMap<>();
        res.put("db", new RangerPolicyResource("db1"));
        p.setResources(new HashMap<>());
        p.addResource(res); // with existing base resources -> should go to additionalResources

        String s = p.toString();
        Assertions.assertTrue(s.contains("additionalResources={"));
    }

    @Test
    public void test07_PolicyIdComparator() {
        RangerPolicy p1 = new RangerPolicy();
        p1.setId(5L);
        RangerPolicy p2 = new RangerPolicy();
        p2.setId(10L);

        Assertions.assertTrue(RangerPolicy.POLICY_ID_COMPARATOR.compare(p1, p2) < 0);
        Assertions.assertTrue(RangerPolicy.POLICY_ID_COMPARATOR.compare(p2, p1) > 0);
        Assertions.assertEquals(0, RangerPolicy.POLICY_ID_COMPARATOR.compare(p1, p1));
    }

    @Test
    public void test08_NestedEqualsNullPaths() {
        RangerPolicy.RangerPolicyItemAccess a1 = new RangerPolicy.RangerPolicyItemAccess(null, null);
        RangerPolicy.RangerPolicyItemAccess a2 = new RangerPolicy.RangerPolicyItemAccess(null, null);
        Assertions.assertEquals(a1, a2);

        RangerPolicy.RangerPolicyItemCondition c1 = new RangerPolicy.RangerPolicyItemCondition(null, null);
        RangerPolicy.RangerPolicyItemCondition c2 = new RangerPolicy.RangerPolicyItemCondition(null, null);
        Assertions.assertEquals(c1, c2);

        RangerPolicy.RangerPolicyItemDataMaskInfo dm1 = new RangerPolicy.RangerPolicyItemDataMaskInfo();
        RangerPolicy.RangerPolicyItemDataMaskInfo dm2 = new RangerPolicy.RangerPolicyItemDataMaskInfo();
        Assertions.assertEquals(dm1, dm2);

        RangerPolicy.RangerPolicyItemRowFilterInfo rf1 = new RangerPolicy.RangerPolicyItemRowFilterInfo();
        RangerPolicy.RangerPolicyItemRowFilterInfo rf2 = new RangerPolicy.RangerPolicyItemRowFilterInfo();
        Assertions.assertEquals(rf1, rf2);
    }

    private <T> List<T> getList(T value) {
        List<T> ret = new ArrayList<>();

        int count = getRandomNumber(10);
        for (int i = 0; i < count; i++) {
            ret.add(value);
        }

        return ret;
    }

    private int getRandomNumber(int maxValue) {
        return (int) (Math.random() * maxValue);
    }
}
