/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package org.apache.ranger.plugin.store;

import org.apache.ranger.plugin.model.RangerPolicy;
import org.apache.ranger.plugin.model.RangerPolicy.RangerPolicyItem;
import org.apache.ranger.plugin.model.RangerPolicy.RangerPolicyResource;
import org.apache.ranger.plugin.model.RangerSecurityZone;
import org.apache.ranger.plugin.model.RangerService;
import org.apache.ranger.plugin.model.RangerServiceDef;
import org.apache.ranger.plugin.util.SearchFilter;
import org.apache.ranger.plugin.util.ServicePolicies;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * @generated by Cursor
 * @description <Unit Test for AbstractPredicateUtil class>
 */
@ExtendWith(MockitoExtension.class)
@TestMethodOrder(MethodOrderer.MethodName.class)
public class TestAbstractPredicateUtil {
    @Test
    public void test01_basicFilterByServiceAndPolicy() {
        RangerPolicy p1 = new RangerPolicy();
        p1.setId(1L);
        p1.setService("svc1");
        p1.setName("read-policy");

        RangerPolicy p2 = new RangerPolicy();
        p2.setId(2L);
        p2.setService("svc2");
        p2.setName("write-policy");

        List<RangerPolicy> list = new ArrayList<>(Arrays.asList(p1, p2));

        AbstractPredicateUtil util = new AbstractPredicateUtil();
        SearchFilter f = new SearchFilter();
        f.setParam(SearchFilter.SERVICE_NAME, "svc1");
        f.setParam(SearchFilter.POLICY_NAME_PARTIAL, "read");
        util.applyFilter(list, f);

        Assertions.assertEquals(1, list.size());
        Assertions.assertEquals("svc1", list.get(0).getService());
    }

    @Test
    public void test02_sortingByPolicyIdDesc() {
        RangerPolicy p1 = new RangerPolicy();
        p1.setId(1L);
        RangerPolicy p2 = new RangerPolicy();
        p2.setId(3L);
        RangerPolicy p3 = new RangerPolicy();
        p3.setId(2L);
        List<RangerPolicy> list = new ArrayList<>(Arrays.asList(p1, p2, p3));

        AbstractPredicateUtil util = new AbstractPredicateUtil();
        SearchFilter f = new SearchFilter();
        f.setSortBy(SearchFilter.POLICY_ID);
        f.setSortType("desc");
        util.applyFilter(list, f);
        Assertions.assertEquals(3L, list.get(0).getId().longValue());
        Assertions.assertEquals(1L, list.get(2).getId().longValue());
    }

    @Test
    public void test03_filterResourcesWildcardMatch() {
        RangerPolicy p = new RangerPolicy();
        Map<String, RangerPolicyResource> res = new HashMap<>();
        res.put("path", new RangerPolicyResource("/data/*"));
        p.setResources(res);
        List<RangerPolicy> list = new ArrayList<>(Collections.singletonList(p));

        AbstractPredicateUtil util = new AbstractPredicateUtil();
        SearchFilter f = new SearchFilter();
        f.setParam(SearchFilter.RESOURCE_PREFIX + "path", "/data/2024");
        util.applyFilter(list, f);
        Assertions.assertEquals(1, list.size());
    }

    @Test
    public void test04_rolePredicateUtilByUserGroupRole() {
        RangerPolicyItem item = new RangerPolicyItem();
        item.addUser("alice");
        item.addGroup("analytics");
        item.addRole("analyst");
        RangerPolicy p = new RangerPolicy();
        p.addPolicyItem(item);
        List<RangerPolicy> policies = new ArrayList<>(Collections.singletonList(p));

        AbstractPredicateUtil util = new AbstractPredicateUtil();
        SearchFilter f = new SearchFilter();
        f.setParam(SearchFilter.USER, "ali");
        f.setParam(SearchFilter.GROUP, "lyt");
        f.setParam(SearchFilter.ROLE, "ana");
        util.applyFilter(policies, f);
        Assertions.assertEquals(1, policies.size());
    }

    @Test
    public void test05_servicePredicateUtilUsesServiceStore() throws Exception {
        ServiceStore stub = new ServiceStore() {
            @Override
            public void init() {
            }

            @Override
            public RangerServiceDef createServiceDef(RangerServiceDef serviceDef) {
                return null;
            }

            @Override
            public RangerServiceDef updateServiceDef(RangerServiceDef serviceDef) {
                return null;
            }

            @Override
            public void deleteServiceDef(Long id, Boolean forceDelete) {
            }

            @Override
            public void updateTagServiceDefForAccessTypes() {
            }

            @Override
            public RangerServiceDef getServiceDef(Long id) {
                return null;
            }

            @Override
            public RangerServiceDef getServiceDefByName(String name) {
                return null;
            }

            @Override
            public RangerServiceDef getServiceDefByDisplayName(String name) {
                return null;
            }

            @Override
            public List<RangerServiceDef> getServiceDefs(SearchFilter filter) {
                return null;
            }

            @Override
            public PList<RangerServiceDef> getPaginatedServiceDefs(SearchFilter filter) {
                return null;
            }

            @Override
            public RangerService createService(RangerService service) {
                return null;
            }

            @Override
            public RangerService updateService(RangerService service, Map<String, Object> options) {
                return null;
            }

            @Override
            public void deleteService(Long id) {
            }

            @Override
            public boolean serviceExists(String name) {
                return false;
            }

            @Override
            public RangerService getService(Long id) {
                return null;
            }

            @Override
            public RangerService getServiceByName(String name) {
                RangerService s = new RangerService();
                s.setName(name);
                s.setId(100L);
                s.setType("hive");
                return s;
            }

            @Override
            public RangerService getServiceByDisplayName(String displayName) {
                return null;
            }

            @Override
            public List<RangerService> getServices(SearchFilter filter) {
                return null;
            }

            @Override
            public PList<RangerService> getPaginatedServices(SearchFilter filter) {
                return null;
            }

            @Override
            public RangerPolicy createPolicy(RangerPolicy policy) {
                return null;
            }

            @Override
            public RangerPolicy createDefaultPolicy(RangerPolicy policy) {
                return null;
            }

            @Override
            public RangerPolicy updatePolicy(RangerPolicy policy) {
                return null;
            }

            @Override
            public void deletePolicy(RangerPolicy policy, RangerService service) {
            }

            @Override
            public void deletePolicy(RangerPolicy policy) {
            }

            @Override
            public boolean policyExists(Long id) {
                return false;
            }

            @Override
            public RangerPolicy getPolicy(Long id) {
                return null;
            }

            @Override
            public List<RangerPolicy> getPolicies(SearchFilter filter) {
                return null;
            }

            @Override
            public Long getPolicyId(Long serviceId, String policyName, Long zoneId) {
                return null;
            }

            @Override
            public PList<RangerPolicy> getPaginatedPolicies(SearchFilter filter) {
                return null;
            }

            @Override
            public List<RangerPolicy> getPoliciesByResourceSignature(String serviceName, String policySignature,
                    Boolean isPolicyEnabled) {
                return null;
            }

            @Override
            public List<RangerPolicy> getServicePolicies(Long serviceId, SearchFilter filter) {
                return null;
            }

            @Override
            public PList<RangerPolicy> getPaginatedServicePolicies(Long serviceId, SearchFilter filter) {
                return null;
            }

            @Override
            public List<RangerPolicy> getServicePolicies(String serviceName, SearchFilter filter) {
                return null;
            }

            @Override
            public PList<RangerPolicy> getPaginatedServicePolicies(String serviceName, SearchFilter filter) {
                return null;
            }

            @Override
            public ServicePolicies getServicePoliciesIfUpdated(String serviceName,
                    Long lastKnownVersion, boolean needsBackwardCompatibility) {
                return null;
            }

            @Override
            public Long getServicePolicyVersion(String serviceName) {
                return null;
            }

            @Override
            public ServicePolicies getServicePolicyDeltasOrPolicies(String serviceName,
                    Long lastKnownVersion) {
                return null;
            }

            @Override
            public ServicePolicies getServicePolicyDeltas(String serviceName,
                    Long lastKnownVersion, Long cachedPolicyVersion) {
                return null;
            }

            @Override
            public ServicePolicies getServicePolicies(String serviceName,
                    Long lastKnownVersion) {
                return null;
            }

            @Override
            public RangerPolicy getPolicyFromEventTime(String eventTimeStr, Long policyId) {
                return null;
            }

            @Override
            public Boolean getPopulateExistingBaseFields() {
                return null;
            }

            @Override
            public void setPopulateExistingBaseFields(Boolean populateExistingBaseFields) {
            }

            @Override
            public RangerSecurityZone getSecurityZone(Long id) {
                return null;
            }

            @Override
            public RangerSecurityZone getSecurityZone(String name) {
                return null;
            }

            @Override
            public long getPoliciesCount(String serviceName) {
                return 0;
            }

            @Override
            public Map<String, String> getServiceConfigForPlugin(Long serviceId) {
                return null;
            }

            @Override
            public List<RangerPolicy> getPoliciesWithMetaAttributes(List<RangerPolicy> policies) {
                return null;
            }
        };

        ServicePredicateUtil util = new ServicePredicateUtil(stub);
        RangerPolicy pol = new RangerPolicy();
        pol.setService("svc1");
        List<RangerPolicy> list = new ArrayList<>(Collections.singletonList(pol));
        SearchFilter f = new SearchFilter();
        f.setParam(SearchFilter.SERVICE_TYPE, "hive");
        util.applyFilter(list, f);
        Assertions.assertEquals(1, list.size());
    }

    @Test
    public void test06_securityZonePredicateUtil() {
        RangerSecurityZone z = new RangerSecurityZone();
        z.setId(1L);
        z.setName("zone-a");
        Map<String, RangerSecurityZone.RangerSecurityZoneService> services = new HashMap<>();
        services.put("svc1", new RangerSecurityZone.RangerSecurityZoneService());
        z.setServices(services);
        z.setCreatedBy("admin");
        List<RangerSecurityZone> zones = new ArrayList<>(Collections.singletonList(z));

        SecurityZonePredicateUtil util = new SecurityZonePredicateUtil();
        SearchFilter f = new SearchFilter();
        f.setParam(SearchFilter.SERVICE_NAME, "svc1");
        f.setParam(SearchFilter.ZONE_ID, "1");
        f.setParam(SearchFilter.ZONE_NAME, "zone-a");
        f.setParam(SearchFilter.NOT_ZONE_NAME, "zone-b");
        f.setParam(SearchFilter.ZONE_NAME_PARTIAL, "zone");
        f.setParam(SearchFilter.CREATED_BY, "admin");
        util.applyFilter(zones, f);
        Assertions.assertEquals(1, zones.size());
    }

    @Test
    public void test07_isRecursivePredicate() {
        RangerPolicy p = new RangerPolicy();
        Map<String, RangerPolicyResource> res = new HashMap<>();
        RangerPolicyResource r = new RangerPolicyResource("/a", false, true);
        res.put("path", r);
        p.setResources(res);
        List<RangerPolicy> list = new ArrayList<>(Collections.singletonList(p));

        AbstractPredicateUtil util = new AbstractPredicateUtil();
        SearchFilter f = new SearchFilter();
        f.setParam(SearchFilter.IS_RECURSIVE, "true");
        util.applyFilter(list, f);
        Assertions.assertEquals(1, list.size());

        // Now set recursive to false and ensure mismatch when filter is true
        res.put("path", new RangerPolicyResource("/a", false, false));
        p.setResources(res);
        list = new ArrayList<>(Collections.singletonList(p));
        util.applyFilter(list, f);
        Assertions.assertEquals(0, list.size());
    }

    @Test
    public void test08_policyPriorityFilter() {
        RangerPolicy p = new RangerPolicy();
        p.setPolicyPriority(RangerPolicy.POLICY_PRIORITY_OVERRIDE);
        List<RangerPolicy> list = new ArrayList<>(Collections.singletonList(p));

        AbstractPredicateUtil util = new AbstractPredicateUtil();
        SearchFilter f = new SearchFilter();
        f.setParam(SearchFilter.POLICY_PRIORITY, RangerPolicy.POLICY_PRIORITY_NAME_OVERRIDE);
        util.applyFilter(list, f);
        Assertions.assertEquals(1, list.size());

        f.setParam(SearchFilter.POLICY_PRIORITY, RangerPolicy.POLICY_PRIORITY_NAME_NORMAL);
        list = new ArrayList<>(Collections.singletonList(p));
        util.applyFilter(list, f);
        Assertions.assertEquals(0, list.size());
    }

    @Test
    public void test09_zoneNamePredicateForPolicy() {
        RangerPolicy p = new RangerPolicy();
        p.setZoneName("zone-x");
        List<RangerPolicy> list = new ArrayList<>(Collections.singletonList(p));

        AbstractPredicateUtil util = new AbstractPredicateUtil();
        SearchFilter f = new SearchFilter();
        f.setParam(SearchFilter.ZONE_NAME, "zone-x");
        util.applyFilter(list, f);
        Assertions.assertEquals(1, list.size());

        f.setParam(SearchFilter.ZONE_NAME, "other");
        list = new ArrayList<>(Collections.singletonList(p));
        util.applyFilter(list, f);
        Assertions.assertEquals(0, list.size());
    }

    @Test
    public void test10_tagServiceNamePredicateForService() {
        RangerService s = new RangerService();
        s.setTagService("tagsvc");
        List<RangerService> list = new ArrayList<>(Collections.singletonList(s));

        AbstractPredicateUtil util = new AbstractPredicateUtil();
        SearchFilter f = new SearchFilter();
        f.setParam(SearchFilter.TAG_SERVICE_NAME, "tagsvc");
        util.applyFilter(list, f);
        Assertions.assertEquals(1, list.size());

        f.setParam(SearchFilter.TAG_SERVICE_NAME, "other");
        list = new ArrayList<>(Collections.singletonList(s));
        util.applyFilter(list, f);
        Assertions.assertEquals(0, list.size());
    }

    @Test
    public void test11_reverseOrderWhenNoSorterButDesc() {
        RangerPolicy p1 = new RangerPolicy();
        p1.setId(1L);
        RangerPolicy p2 = new RangerPolicy();
        p2.setId(2L);
        List<RangerPolicy> list = new ArrayList<>(Arrays.asList(p1, p2));

        AbstractPredicateUtil util = new AbstractPredicateUtil();
        SearchFilter f = new SearchFilter();
        f.setSortType("desc"); // no sortBy
        util.applyFilter(list, f);
        Assertions.assertEquals(2L, list.get(0).getId().longValue());
    }

    @Test
    public void test12_isEnabledPredicateTrueAndFalse() {
        RangerPolicy enabled = new RangerPolicy();
        enabled.setIsEnabled(true);
        RangerPolicy disabled = new RangerPolicy();
        disabled.setIsEnabled(false);
        List<RangerPolicy> list = new ArrayList<>(Arrays.asList(enabled, disabled));

        AbstractPredicateUtil util = new AbstractPredicateUtil();
        SearchFilter f = new SearchFilter();
        f.setParam(SearchFilter.IS_ENABLED, "true");
        List<RangerPolicy> copy = new ArrayList<>(list);
        util.applyFilter(copy, f);
        Assertions.assertEquals(1, copy.size());
        Assertions.assertTrue(copy.get(0).getIsEnabled());

        f.setParam(SearchFilter.IS_ENABLED, "false");
        copy = new ArrayList<>(list);
        util.applyFilter(copy, f);
        Assertions.assertEquals(1, copy.size());
        Assertions.assertFalse(copy.get(0).getIsEnabled());
    }

    @Test
    public void test13_policyResourceContainsMatch() {
        RangerPolicy p = new RangerPolicy();
        Map<String, RangerPolicyResource> res = new HashMap<>();
        res.put("db", new RangerPolicyResource("sales"));
        p.setResources(res);
        List<RangerPolicy> list = new ArrayList<>(Collections.singletonList(p));

        AbstractPredicateUtil util = new AbstractPredicateUtil();
        SearchFilter f = new SearchFilter();
        f.setParam(SearchFilter.POL_RESOURCE, "ale"); // partial in 'sales'
        util.applyFilter(list, f);
        Assertions.assertEquals(1, list.size());
    }

    @Test
    public void test14_resourceSignaturePredicate() {
        RangerPolicy p = new RangerPolicy();
        p.setResourceSignature("sig-123");
        List<RangerPolicy> list = new ArrayList<>(Collections.singletonList(p));

        AbstractPredicateUtil util = new AbstractPredicateUtil();
        SearchFilter f = new SearchFilter();
        f.setParam(SearchFilter.RESOURCE_SIGNATURE, "sig-123");
        util.applyFilter(list, f);
        Assertions.assertEquals(1, list.size());

        list = new ArrayList<>(Collections.singletonList(p));
        f.setParam(SearchFilter.RESOURCE_SIGNATURE, "other");
        util.applyFilter(list, f);
        Assertions.assertEquals(0, list.size());
    }

    @Test
    public void test15_sorterMapOtherSorters() {
        RangerServiceDef sd1 = new RangerServiceDef();
        sd1.setName("a");
        RangerServiceDef sd2 = new RangerServiceDef();
        sd2.setName("b");
        List<RangerServiceDef> defs = new ArrayList<>(Arrays.asList(sd2, sd1));
        AbstractPredicateUtil util = new AbstractPredicateUtil();
        SearchFilter f = new SearchFilter();
        f.setSortBy(SearchFilter.SERVICE_TYPE);
        util.applyFilter(defs, f);
        Assertions.assertEquals("a", defs.get(0).getName());

        RangerPolicy p1 = new RangerPolicy();
        p1.setName("alpha");
        RangerPolicy p2 = new RangerPolicy();
        p2.setName("beta");
        List<RangerPolicy> policies = new ArrayList<>(Arrays.asList(p2, p1));
        f = new SearchFilter();
        f.setSortBy(SearchFilter.POLICY_NAME);
        util.applyFilter(policies, f);
        Assertions.assertEquals("alpha", policies.get(0).getName());
    }
}
