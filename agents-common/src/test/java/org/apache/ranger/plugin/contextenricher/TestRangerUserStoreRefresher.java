/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package org.apache.ranger.plugin.contextenricher;

import com.sun.jersey.api.client.ClientResponse;
import org.apache.ranger.plugin.util.DownloadTrigger;
import org.apache.ranger.plugin.util.JsonUtilsV2;
import org.apache.ranger.plugin.util.RangerRESTClient;
import org.apache.ranger.plugin.util.RangerServiceNotFoundException;
import org.apache.ranger.plugin.util.RangerUserStore;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;

import javax.servlet.http.HttpServletResponse;

import java.io.File;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.mockito.ArgumentMatchers.anyLong;
import static org.mockito.ArgumentMatchers.anyMap;
import static org.mockito.ArgumentMatchers.anyString;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

/**
* @generated by Cursor
* @description <Unit Test for RangerUserStoreRefresher class>
*/
@ExtendWith(MockitoExtension.class)
@TestMethodOrder(MethodOrderer.MethodName.class)
public class TestRangerUserStoreRefresher {
    @Test
    public void test01_populateFromRetriever_savesCache_andUpdatesActivation() throws Exception {
        BlockingQueue<DownloadTrigger> queue = new LinkedBlockingQueue<>();
        File cache = File.createTempFile("ruserstore-", ".json");
        cache.deleteOnExit();

        RangerUserStoreRetriever retriever = mock(RangerUserStoreRetriever.class);
        RangerUserStoreEnricher enricher = mock(RangerUserStoreEnricher.class);

        RangerUserStore store = new RangerUserStore();
        store.setUserStoreVersion(7L);

        when(retriever.getServiceName()).thenReturn("svc");
        when(retriever.retrieveUserStoreInfo(anyLong(), anyLong())).thenReturn(store);

        RangerUserStoreRefresher refresher = new RangerUserStoreRefresher(retriever, enricher, null, -1L, queue,
                cache.getAbsolutePath());

        RangerUserStore ret = refresher.populateUserStoreInfo();

        assertNotNull(ret);
        verify(enricher, times(1)).setRangerUserStore(store);
        assertTrue(cache.exists());
        assertTrue(refresher.getLastActivationTimeInMillis() > 0);
    }

    @Test
    public void test02_populateFromCache_whenRetrieverReturnsNull() throws Exception {
        BlockingQueue<DownloadTrigger> queue = new LinkedBlockingQueue<>();
        File cache = File.createTempFile("ruserstore-", ".json");
        cache.deleteOnExit();

        RangerUserStoreRetriever retrieverForSeed = mock(RangerUserStoreRetriever.class);
        RangerUserStoreEnricher enricherForSeed = mock(RangerUserStoreEnricher.class);
        when(retrieverForSeed.getServiceName()).thenReturn("svc");

        RangerUserStoreRefresher seed = new RangerUserStoreRefresher(retrieverForSeed, enricherForSeed, null, -1L,
                queue, cache.getAbsolutePath());
        RangerUserStore seedStore = new RangerUserStore();
        seedStore.setUserStoreVersion(10L);
        seed.saveToCache(seedStore);
        assertTrue(cache.exists());

        RangerUserStoreRetriever retriever = mock(RangerUserStoreRetriever.class);
        RangerUserStoreEnricher enricher = mock(RangerUserStoreEnricher.class);
        when(retriever.getServiceName()).thenReturn("svc");
        when(retriever.retrieveUserStoreInfo(anyLong(), anyLong())).thenReturn(null);

        RangerUserStoreRefresher refresher = new RangerUserStoreRefresher(retriever, enricher, null, -1L, queue,
                cache.getAbsolutePath());

        RangerUserStore ret = refresher.populateUserStoreInfo();
        assertNotNull(ret);
        assertEquals(10L, ret.getUserStoreVersion());
        verify(enricher, times(1)).setRangerUserStore(ret);
    }

    @Test
    public void test03_serviceNotFound_disablesCache_andSetsActivation() throws Exception {
        BlockingQueue<DownloadTrigger> queue = new LinkedBlockingQueue<>();
        File cache = File.createTempFile("ruserstore-", ".json");
        cache.deleteOnExit();

        RangerUserStoreRetriever retriever = mock(RangerUserStoreRetriever.class);
        RangerUserStoreEnricher enricher = mock(RangerUserStoreEnricher.class);

        when(retriever.getServiceName()).thenReturn("svc");
        when(enricher.isDisableCacheIfServiceNotFound()).thenReturn(true);
        when(retriever.retrieveUserStoreInfo(anyLong(), anyLong()))
                .thenThrow(new RangerServiceNotFoundException("svc"));

        // seed a cache file to be disabled
        RangerUserStoreRefresher seed = new RangerUserStoreRefresher(retriever, enricher, null, -1L, queue,
                cache.getAbsolutePath());
        RangerUserStore seedStore = new RangerUserStore();
        seedStore.setUserStoreVersion(5L);
        seed.saveToCache(seedStore);
        assertTrue(cache.exists());

        RangerUserStoreRefresher refresher = new RangerUserStoreRefresher(retriever, enricher, null, -1L, queue,
                cache.getAbsolutePath());
        RangerUserStore ret = refresher.populateUserStoreInfo();
        assertNull(ret);
        assertTrue(refresher.getLastActivationTimeInMillis() > 0);
        assertTrue(!cache.exists());
    }

    @Test
    public void test04_restClient_notModified_returnsNull() throws Exception {
        BlockingQueue<DownloadTrigger> queue = new LinkedBlockingQueue<>();
        File cache = File.createTempFile("ruserstore-", ".json");
        cache.deleteOnExit();

        RangerRESTClient restClient = mock(RangerRESTClient.class);
        ClientResponse response = mock(ClientResponse.class);
        when(response.getStatus()).thenReturn(HttpServletResponse.SC_NOT_MODIFIED);
        when(restClient.get(anyString(), anyMap())).thenReturn(response);

        RangerUserStoreRetriever retrieverForName = mock(RangerUserStoreRetriever.class);
        when(retrieverForName.getServiceName()).thenReturn("svc");

        RangerUserStoreRefresher refresher = new RangerUserStoreRefresher(retrieverForName, null, restClient, -1L, queue,
                cache.getAbsolutePath());
        RangerUserStore ret = refresher.populateUserStoreInfo();
        assertNull(ret);
    }

    @Test
    public void test05_restClient_ok_readsAndSavesCache() throws Exception {
        BlockingQueue<DownloadTrigger> queue = new LinkedBlockingQueue<>();
        File cache = File.createTempFile("ruserstore-", ".json");
        cache.deleteOnExit();

        RangerUserStore store = new RangerUserStore();
        store.setUserStoreVersion(77L);
        String json = JsonUtilsV2.objToJson(store);

        RangerRESTClient restClient = mock(RangerRESTClient.class);
        ClientResponse response = mock(ClientResponse.class);
        when(response.getStatus()).thenReturn(HttpServletResponse.SC_OK);
        when(response.getEntity(String.class)).thenReturn(json);
        when(restClient.get(anyString(), anyMap())).thenReturn(response);
        RangerUserStoreRetriever retrieverForName = mock(RangerUserStoreRetriever.class);
        when(retrieverForName.getServiceName()).thenReturn("svc");

        RangerUserStoreRefresher refresher = new RangerUserStoreRefresher(retrieverForName, null, restClient, -1L, queue,
                cache.getAbsolutePath());
        RangerUserStore ret = refresher.populateUserStoreInfo();
        assertNotNull(ret);
        assertEquals(77L, ret.getUserStoreVersion());
        assertTrue(cache.exists());
        assertTrue(refresher.getLastActivationTimeInMillis() > 0);
    }

    @Test
    public void test06_restClient_notFound_returnsNull() throws Exception {
        BlockingQueue<DownloadTrigger> queue = new LinkedBlockingQueue<>();
        RangerRESTClient restClient = mock(RangerRESTClient.class);
        ClientResponse response = mock(ClientResponse.class);
        when(response.getStatus()).thenReturn(HttpServletResponse.SC_NOT_FOUND);
        when(restClient.get(anyString(), anyMap())).thenReturn(response);
        RangerUserStoreRetriever retrieverForName = mock(RangerUserStoreRetriever.class);
        when(retrieverForName.getServiceName()).thenReturn("svc");

        RangerUserStoreRefresher refresher = new RangerUserStoreRefresher(retrieverForName, null, restClient, -1L, queue, null);
        RangerUserStore ret = refresher.populateUserStoreInfo();
        assertNull(ret);
    }

    @Test
    public void test07_runLoop_processesTrigger_and_stopRefresher() throws Exception {
        BlockingQueue<DownloadTrigger> queue = new LinkedBlockingQueue<>();
        RangerUserStoreRetriever retriever = mock(RangerUserStoreRetriever.class);
        RangerUserStoreEnricher enricher = mock(RangerUserStoreEnricher.class);
        when(retriever.getServiceName()).thenReturn("svc");

        RangerUserStoreRefresher refresher = new RangerUserStoreRefresher(retriever, enricher, null, -1L, queue, null);
        refresher.setDaemon(true);
        refresher.startRefresher();

        DownloadTrigger token = new DownloadTrigger();
        queue.put(token);
        token.waitForCompletion();

        refresher.stopRefresher();
        assertTrue(true);
    }

    @Test
    public void test08_noReceiverNoRestClient_returnsNullAndLogsError() throws Exception {
        BlockingQueue<DownloadTrigger> queue = new LinkedBlockingQueue<>();
        RangerUserStoreRetriever retrieverForName = mock(RangerUserStoreRetriever.class);
        when(retrieverForName.getServiceName()).thenReturn("svc");
        RangerUserStoreRefresher refresher = new RangerUserStoreRefresher(retrieverForName, null, null, -1L, queue, null);
        RangerUserStore ret = refresher.populateUserStoreInfo();
        assertNull(ret);
    }

    @Test
    public void test09_restClient_internalServerError_returnsNull() throws Exception {
        BlockingQueue<DownloadTrigger> queue = new LinkedBlockingQueue<>();
        RangerRESTClient restClient = mock(RangerRESTClient.class);
        ClientResponse response = mock(ClientResponse.class);
        when(response.getStatus()).thenReturn(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
        when(restClient.get(anyString(), anyMap())).thenReturn(response);
        RangerUserStoreRetriever retrieverForName = mock(RangerUserStoreRetriever.class);
        when(retrieverForName.getServiceName()).thenReturn("svc");

        RangerUserStoreRefresher refresher = new RangerUserStoreRefresher(retrieverForName, null, restClient, -1L, queue, null);
        RangerUserStore ret = refresher.populateUserStoreInfo();
        assertNull(ret);
    }
}
