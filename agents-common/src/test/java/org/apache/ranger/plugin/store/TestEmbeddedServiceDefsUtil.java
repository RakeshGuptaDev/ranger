/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package org.apache.ranger.plugin.store;

import org.apache.ranger.authorization.hadoop.config.RangerAdminConfig;
import org.apache.ranger.plugin.model.RangerPolicy;
import org.apache.ranger.plugin.model.RangerSecurityZone;
import org.apache.ranger.plugin.model.RangerService;
import org.apache.ranger.plugin.model.RangerServiceDef;
import org.apache.ranger.plugin.policyengine.gds.GdsPolicyEngine;
import org.apache.ranger.plugin.util.SearchFilter;
import org.apache.ranger.plugin.util.ServicePolicies;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * @generated by Cursor
 * @description <Unit Test for EmbeddedServiceDefsUtil class>
 */
@ExtendWith(MockitoExtension.class)
@TestMethodOrder(MethodOrderer.MethodName.class)
public class TestEmbeddedServiceDefsUtil {
    public static class CapturingServiceStore implements ServiceStore {
        private final Map<String, RangerServiceDef> nameToServiceDef = new HashMap<>();
        private final Map<Long, RangerServiceDef> idToServiceDef = new HashMap<>();
        private final Map<String, RangerService> nameToService = new HashMap<>();
        private final List<String> createdServiceDefNames = new ArrayList<>();
        private int idSeq = 1;
        private boolean populateExistingBaseFields;
        private int updateTagServiceDefForAccessTypesCalls;

        @Override
        public void init() {
        }

        @Override
        public RangerServiceDef createServiceDef(RangerServiceDef serviceDef) {
            if (serviceDef.getId() == null) {
                serviceDef.setId((long) idSeq++);
            }
            nameToServiceDef.put(serviceDef.getName(), serviceDef);
            idToServiceDef.put(serviceDef.getId(), serviceDef);
            createdServiceDefNames.add(serviceDef.getName());
            return serviceDef;
        }

        @Override
        public RangerServiceDef updateServiceDef(RangerServiceDef serviceDef) {
            nameToServiceDef.put(serviceDef.getName(), serviceDef);
            idToServiceDef.put(serviceDef.getId(), serviceDef);
            return serviceDef;
        }

        @Override
        public void deleteServiceDef(Long id, Boolean forceDelete) {
            RangerServiceDef sd = idToServiceDef.remove(id);
            if (sd != null) {
                nameToServiceDef.remove(sd.getName());
            }
        }

        @Override
        public void updateTagServiceDefForAccessTypes() {
            updateTagServiceDefForAccessTypesCalls++;
        }

        @Override
        public RangerServiceDef getServiceDef(Long id) {
            return idToServiceDef.get(id);
        }

        @Override
        public RangerServiceDef getServiceDefByName(String name) {
            return nameToServiceDef.get(name);
        }

        @Override
        public RangerServiceDef getServiceDefByDisplayName(String name) {
            return null;
        }

        @Override
        public List<RangerServiceDef> getServiceDefs(SearchFilter filter) {
            return new ArrayList<>(nameToServiceDef.values());
        }

        @Override
        public PList<RangerServiceDef> getPaginatedServiceDefs(SearchFilter filter) {
            return null;
        }

        @Override
        public RangerService createService(RangerService service) {
            if (service.getId() == null) {
                service.setId((long) idSeq++);
            }
            nameToService.put(service.getName(), service);
            return service;
        }

        @Override
        public RangerService updateService(RangerService service, Map<String, Object> options) {
            nameToService.put(service.getName(), service);
            return service;
        }

        @Override
        public void deleteService(Long id) {
        }

        @Override
        public boolean serviceExists(String name) {
            return nameToService.containsKey(name);
        }

        @Override
        public RangerService getService(Long id) {
            return null;
        }

        @Override
        public RangerService getServiceByName(String name) {
            return nameToService.get(name);
        }

        @Override
        public RangerService getServiceByDisplayName(String displayName) {
            return null;
        }

        @Override
        public List<RangerService> getServices(SearchFilter filter) {
            return null;
        }

        @Override
        public PList<RangerService> getPaginatedServices(SearchFilter filter) {
            return null;
        }

        @Override
        public RangerPolicy createPolicy(RangerPolicy policy) {
            return null;
        }

        @Override
        public RangerPolicy createDefaultPolicy(RangerPolicy policy) {
            return null;
        }

        @Override
        public RangerPolicy updatePolicy(RangerPolicy policy) {
            return null;
        }

        @Override
        public void deletePolicy(RangerPolicy policy, RangerService service) {
        }

        @Override
        public void deletePolicy(RangerPolicy policy) {
        }

        @Override
        public boolean policyExists(Long id) {
            return false;
        }

        @Override
        public RangerPolicy getPolicy(Long id) {
            return null;
        }

        @Override
        public List<RangerPolicy> getPolicies(SearchFilter filter) {
            return null;
        }

        @Override
        public PList<RangerPolicy> getPaginatedPolicies(SearchFilter filter) {
            return null;
        }

        @Override
        public Long getPolicyId(Long serviceId, String policyName, Long zoneId) {
            return null;
        }

        @Override
        public List<RangerPolicy> getServicePolicies(Long serviceId, SearchFilter filter) {
            return null;
        }

        @Override
        public PList<RangerPolicy> getPaginatedServicePolicies(Long serviceId, SearchFilter filter) {
            return null;
        }

        @Override
        public List<RangerPolicy> getServicePolicies(String serviceName, SearchFilter filter) {
            return null;
        }

        @Override
        public PList<RangerPolicy> getPaginatedServicePolicies(String serviceName, SearchFilter filter) {
            return null;
        }

        @Override
        public ServicePolicies getServicePoliciesIfUpdated(String serviceName, Long lastKnownVersion, boolean needsBackwardCompatibility) {
            return null;
        }

        @Override
        public Long getServicePolicyVersion(String serviceName) {
            return null;
        }

        @Override
        public ServicePolicies getServicePolicyDeltasOrPolicies(String serviceName, Long lastKnownVersion) {
            return null;
        }

        @Override
        public ServicePolicies getServicePolicyDeltas(String serviceName, Long lastKnownVersion, Long cachedPolicyVersion) {
            return null;
        }

        @Override
        public ServicePolicies getServicePolicies(String serviceName, Long lastKnownVersion) {
            return null;
        }

        @Override
        public RangerPolicy getPolicyFromEventTime(String eventTimeStr, Long policyId) {
            return null;
        }

        @Override
        public Boolean getPopulateExistingBaseFields() {
            return populateExistingBaseFields;
        }

        @Override
        public void setPopulateExistingBaseFields(Boolean populateExistingBaseFields) {
            this.populateExistingBaseFields = populateExistingBaseFields != null && populateExistingBaseFields;
        }

        @Override
        public RangerSecurityZone getSecurityZone(Long id) {
            return null;
        }

        @Override
        public RangerSecurityZone getSecurityZone(String name) {
            return null;
        }

        @Override
        public long getPoliciesCount(String serviceName) {
            return 0L;
        }

        @Override
        public Map<String, String> getServiceConfigForPlugin(Long serviceId) {
            return null;
        }

        @Override
        public List<RangerPolicy> getPoliciesWithMetaAttributes(List<RangerPolicy> policies) {
            return policies;
        }

        @Override
        public List<RangerPolicy> getPoliciesByResourceSignature(String serviceName, String policySignature, Boolean isPolicyEnabled) {
            return null;
        }
    }

    @Test
    public void test01_getEmbeddedServiceDef_tagLoadsFromClasspath() throws Exception {
        RangerServiceDef tag = EmbeddedServiceDefsUtil.instance().getEmbeddedServiceDef(EmbeddedServiceDefsUtil.EMBEDDED_SERVICEDEF_TAG_NAME);
        Assertions.assertNotNull(tag);
        Assertions.assertEquals(EmbeddedServiceDefsUtil.EMBEDDED_SERVICEDEF_TAG_NAME, tag.getName());
        Assertions.assertEquals(tag.getName(), tag.getDisplayName());
    }

    @Test
    public void test02_init_createsTagAndGdsAndCallsUpdateAndCreatesGdsService() {
        RangerAdminConfig.getInstance().setBoolean(EmbeddedServiceDefsUtil.PROPERTY_CREATE_EMBEDDED_SERVICE_DEFS, true);

        CapturingServiceStore store = new CapturingServiceStore();
        EmbeddedServiceDefsUtil.instance().init(store);

        Assertions.assertTrue(store.createdServiceDefNames.contains(EmbeddedServiceDefsUtil.EMBEDDED_SERVICEDEF_TAG_NAME));
        Assertions.assertTrue(store.createdServiceDefNames.contains(EmbeddedServiceDefsUtil.EMBEDDED_SERVICEDEF_GDS_NAME));
        Assertions.assertTrue(store.updateTagServiceDefForAccessTypesCalls >= 1);
        RangerService gdsSvc = store.getServiceByName(GdsPolicyEngine.GDS_SERVICE_NAME);
        Assertions.assertNotNull(gdsSvc);
        Assertions.assertEquals(EmbeddedServiceDefsUtil.EMBEDDED_SERVICEDEF_GDS_NAME, gdsSvc.getType());
    }

    @Test
    public void test03_isRecursiveEnabled_checksResourceDefFlag() {
        RangerServiceDef def = new RangerServiceDef();
        List<RangerServiceDef.RangerResourceDef> resources = new ArrayList<>();
        RangerServiceDef.RangerResourceDef r = new RangerServiceDef.RangerResourceDef();
        r.setName("path");
        r.setLevel(1);
        r.setRecursiveSupported(true);
        resources.add(r);
        def.setResources(resources);

        boolean recursive = EmbeddedServiceDefsUtil.isRecursiveEnabled(def, "path");
        Assertions.assertTrue(recursive);
    }

    @Test
    public void test04_getEmbeddedServiceDef_unknownOrEmpty() throws Exception {
        Assertions.assertNull(EmbeddedServiceDefsUtil.instance().getEmbeddedServiceDef("unknown-type"));
        Assertions.assertNull(EmbeddedServiceDefsUtil.instance().getEmbeddedServiceDef(null));
        Assertions.assertNull(EmbeddedServiceDefsUtil.instance().getEmbeddedServiceDef(""));
    }
}
