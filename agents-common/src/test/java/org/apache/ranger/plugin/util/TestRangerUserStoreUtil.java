/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.apache.ranger.plugin.util;

import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;

import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertNull;

/**
* @generated by Cursor
* @description <Unit Test for RangerUserStoreUtil class>
*/
@ExtendWith(MockitoExtension.class)
@TestMethodOrder(MethodOrderer.MethodName.class)
public class TestRangerUserStoreUtil {
    @Test
    public void test01_printableOptions_and_getAttrVal_and_cloudId() {
        assertEquals("{}", RangerUserStoreUtil.getPrintableOptions(null));
        Map<String, String> m = new HashMap<>();
        m.put("k", "v");
        String printed = RangerUserStoreUtil.getPrintableOptions(m);
        assertNotNull(printed);

        Map<String, Map<String, String>> attrMap = new HashMap<>();
        attrMap.put("u", Collections.singletonMap("a", "b"));
        assertEquals("b", RangerUserStoreUtil.getAttrVal(attrMap, "u", "a"));
        assertNull(RangerUserStoreUtil.getAttrVal(attrMap, null, "a"));
        assertNull(RangerUserStoreUtil.getAttrVal(attrMap, "u", null));
        assertNull(RangerUserStoreUtil.getAttrVal(attrMap, "x", "a"));
    }

    @Test
    public void test02_userMappings_emails_and_groups_and_attributes() {
        RangerUserStore store = new RangerUserStore();
        Map<String, Set<String>> userGroups = new HashMap<>();
        Set<String> groups = new HashSet<>();
        groups.add("g1");
        userGroups.put("u1", groups);
        store.setUserGroupMapping(userGroups);

        Map<String, Map<String, String>> userAttrs = new HashMap<>();
        Map<String, String> u1 = new HashMap<>();
        u1.put(RangerCommonConstants.SCRIPT_FIELD__EMAIL_ADDRESS, "u1@x");
        userAttrs.put("u1", u1);
        store.setUserAttrMapping(userAttrs);

        RangerUserStoreUtil util = new RangerUserStoreUtil(store);
        assertEquals(groups, util.getUserGroups("u1"));
        assertEquals(u1, util.getUserAttributes("u1"));
        assertNull(util.getGroupAttributes("g1"));
        assertEquals("u1", util.getUserNameFromEmail("u1@x"));
        assertNull(util.getUserNameFromEmail("none@x"));

        Map<String, Map<String, String>> groupAttrs = new HashMap<>();
        Map<String, String> g1 = new HashMap<>();
        g1.put(RangerUserStore.CLOUD_IDENTITY_NAME, "g1Cloud");
        groupAttrs.put("g1", g1);
        store.setGroupAttrMapping(groupAttrs);

        assertEquals("g1Cloud", util.getCloudId(groupAttrs, "g1"));
    }
}
