/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package org.apache.ranger.plugin.model.validation;

import org.apache.ranger.plugin.errors.ValidationErrorCode;
import org.apache.ranger.plugin.model.RangerRole;
import org.apache.ranger.plugin.model.validation.RangerValidator.Action;
import org.apache.ranger.plugin.store.RoleStore;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;

import java.util.ArrayList;
import java.util.List;

/**
* @generated by Cursor
* @description <Unit Test for RangerRoleValidator class>
*/
@ExtendWith(MockitoExtension.class)
@TestMethodOrder(MethodOrderer.MethodName.class)
public class TestRangerRoleValidator {
    @Test
    public void test01_isValidId_unsupportedAction() {
        RoleStore roleStore = Mockito.mock(RoleStore.class);
        RangerRoleValidator validator = new RangerRoleValidator(roleStore);

        List<ValidationFailureDetails> failures = new ArrayList<>();
        boolean valid = validator.isValid(1L, Action.CREATE, failures);

        Assertions.assertFalse(valid);
        ValidationErrorCode error = ValidationErrorCode.ROLE_VALIDATION_ERR_UNSUPPORTED_ACTION;
        ValidationFailureDetails expected = new ValidationFailureDetailsBuilder().isAnInternalError()
                .becauseOf(error.getMessage()).errorCode(error.getErrorCode()).build();
        Assertions.assertTrue(failures.contains(expected));
    }

    @Test
    public void test02_isValidId_nullId() {
        RoleStore roleStore = Mockito.mock(RoleStore.class);
        RangerRoleValidator validator = new RangerRoleValidator(roleStore);

        List<ValidationFailureDetails> failures = new ArrayList<>();
        boolean valid = validator.isValid((Long) null, Action.DELETE, failures);

        Assertions.assertFalse(valid);
        ValidationErrorCode error = ValidationErrorCode.ROLE_VALIDATION_ERR_MISSING_FIELD;
        ValidationFailureDetails expected = new ValidationFailureDetailsBuilder().field("id").isMissing()
                .errorCode(error.getErrorCode()).becauseOf(error.getMessage((Object) null)).build();
        Assertions.assertTrue(failures.contains(expected));
    }

    @Test
    public void test03_isValidId_roleDoesNotExist() throws Exception {
        RoleStore roleStore = Mockito.mock(RoleStore.class);
        Mockito.when(roleStore.roleExists(7L)).thenReturn(false);
        RangerRoleValidator validator = new RangerRoleValidator(roleStore);

        List<ValidationFailureDetails> failures = new ArrayList<>();
        boolean valid = validator.isValid(7L, Action.DELETE, failures);

        Assertions.assertFalse(valid);
        ValidationErrorCode error = ValidationErrorCode.ROLE_VALIDATION_ERR_INVALID_ROLE_ID;
        ValidationFailureDetails expected = new ValidationFailureDetailsBuilder().field("id").isMissing()
                .errorCode(error.getErrorCode()).becauseOf(error.getMessage(7L)).build();
        Assertions.assertTrue(failures.contains(expected));
    }

    @Test
    public void test04_isValidId_success() throws Exception {
        RoleStore roleStore = Mockito.mock(RoleStore.class);
        Mockito.when(roleStore.roleExists(9L)).thenReturn(true);
        RangerRoleValidator validator = new RangerRoleValidator(roleStore);

        List<ValidationFailureDetails> failures = new ArrayList<>();
        boolean valid = validator.isValid(9L, Action.DELETE, failures);

        Assertions.assertTrue(valid);
        Assertions.assertTrue(failures.isEmpty());
    }

    @Test
    public void test05_isValidName_unsupportedAction() throws Exception {
        RoleStore roleStore = Mockito.mock(RoleStore.class);
        RangerRoleValidator validator = new RangerRoleValidator(roleStore);

        List<ValidationFailureDetails> failures = new ArrayList<>();
        boolean valid = validator.isValid("roleA", Action.UPDATE, failures);

        Assertions.assertFalse(valid);
        ValidationErrorCode error = ValidationErrorCode.ROLE_VALIDATION_ERR_UNSUPPORTED_ACTION;
        ValidationFailureDetails expected = new ValidationFailureDetailsBuilder().isAnInternalError()
                .becauseOf(error.getMessage()).errorCode(error.getErrorCode()).build();
        Assertions.assertTrue(failures.contains(expected));
    }

    @Test
    public void test06_isValidName_nullName() {
        RoleStore roleStore = Mockito.mock(RoleStore.class);
        RangerRoleValidator validator = new RangerRoleValidator(roleStore);

        List<ValidationFailureDetails> failures = new ArrayList<>();
        boolean valid = validator.isValid((String) null, Action.DELETE, failures);

        Assertions.assertFalse(valid);
        ValidationErrorCode error = ValidationErrorCode.ROLE_VALIDATION_ERR_MISSING_FIELD;
        // Implementation uses field("id") for name-missing; test reflects current
        // behavior
        ValidationFailureDetails expected = new ValidationFailureDetailsBuilder().field("id").isMissing()
                .errorCode(error.getErrorCode()).becauseOf(error.getMessage((Object) null)).build();
        Assertions.assertTrue(failures.contains(expected));
    }

    @Test
    public void test07_isValidName_notExist() throws Exception {
        RoleStore roleStore = Mockito.mock(RoleStore.class);
        Mockito.when(roleStore.roleExists("unknown")).thenReturn(false);
        RangerRoleValidator validator = new RangerRoleValidator(roleStore);

        List<ValidationFailureDetails> failures = new ArrayList<>();
        boolean valid = validator.isValid("unknown", Action.DELETE, failures);

        Assertions.assertFalse(valid);
        ValidationErrorCode error = ValidationErrorCode.ROLE_VALIDATION_ERR_INVALID_ROLE_NAME;
        ValidationFailureDetails expected = new ValidationFailureDetailsBuilder().field("name").isMissing()
                .errorCode(error.getErrorCode()).becauseOf(error.getMessage("unknown")).build();
        Assertions.assertTrue(failures.contains(expected));
    }

    @Test
    public void test08_isValidRole_nullRole() throws Exception {
        RoleStore roleStore = Mockito.mock(RoleStore.class);
        RangerRoleValidator validator = new RangerRoleValidator(roleStore);

        List<ValidationFailureDetails> failures = new ArrayList<>();
        boolean valid = validator.isValid((RangerRole) null, Action.CREATE, failures);

        Assertions.assertFalse(valid);
        ValidationErrorCode error = ValidationErrorCode.ROLE_VALIDATION_ERR_NULL_RANGER_ROLE_OBJECT;
        ValidationFailureDetails expected = new ValidationFailureDetailsBuilder().isAnInternalError().isMissing()
                .becauseOf(error.getMessage()).errorCode(error.getErrorCode()).build();
        Assertions.assertTrue(failures.contains(expected));
    }

    @Test
    public void test09_isValidRole_emptyName() {
        RoleStore roleStore = Mockito.mock(RoleStore.class);
        RangerRoleValidator validator = new RangerRoleValidator(roleStore);
        RangerRole role = new RangerRole();
        role.setName("");

        List<ValidationFailureDetails> failures = new ArrayList<>();
        boolean valid = validator.isValid(role, Action.CREATE, failures);

        Assertions.assertFalse(valid);
        ValidationErrorCode error = ValidationErrorCode.ROLE_VALIDATION_ERR_NULL_RANGER_ROLE_NAME;
        ValidationFailureDetails expected = new ValidationFailureDetailsBuilder().field("name").isMissing()
                .becauseOf(error.getMessage()).errorCode(error.getErrorCode()).build();
        Assertions.assertTrue(failures.contains(expected));
    }

    @Test
    public void test10_isValidRole_create_conflictOnSameName() throws Exception {
        RoleStore roleStore = Mockito.mock(RoleStore.class);
        RangerRole existing = new RangerRole();
        existing.setName("r1");
        Mockito.when(roleStore.getRole(5L)).thenReturn(existing);
        RangerRoleValidator validator = new RangerRoleValidator(roleStore);

        RangerRole input = new RangerRole();
        input.setId(5L);
        input.setName("r1");

        List<ValidationFailureDetails> failures = new ArrayList<>();
        boolean valid = validator.isValid(input, Action.CREATE, failures);

        Assertions.assertFalse(valid);
        ValidationErrorCode error = ValidationErrorCode.ROLE_VALIDATION_ERR_ROLE_NAME_CONFLICT;
        ValidationFailureDetails expected = new ValidationFailureDetailsBuilder().field("name")
                .isSemanticallyIncorrect().becauseOf(error.getMessage("r1")).errorCode(error.getErrorCode()).build();
        Assertions.assertTrue(failures.contains(expected));
    }

    @Test
    public void test11_isValidRole_update_missingId() throws Exception {
        RoleStore roleStore = Mockito.mock(RoleStore.class);
        RangerRoleValidator validator = new RangerRoleValidator(roleStore);

        RangerRole input = new RangerRole();
        input.setName("r1");

        List<ValidationFailureDetails> failures = new ArrayList<>();
        boolean valid = validator.isValid(input, Action.UPDATE, failures);

        Assertions.assertFalse(valid);
        ValidationErrorCode error = ValidationErrorCode.ROLE_VALIDATION_ERR_MISSING_FIELD;
        ValidationFailureDetails expected = new ValidationFailureDetailsBuilder().field("id").isMissing()
                .becauseOf(error.getMessage((Object) null)).errorCode(error.getErrorCode()).build();
        Assertions.assertTrue(failures.contains(expected));
    }

    @Test
    public void test12_isValidRole_update_invalidId() throws Exception {
        RoleStore roleStore = Mockito.mock(RoleStore.class);
        Mockito.when(roleStore.getRole(100L)).thenReturn(null);
        RangerRoleValidator validator = new RangerRoleValidator(roleStore);

        RangerRole input = new RangerRole();
        input.setId(100L);
        input.setName("r1");

        List<ValidationFailureDetails> failures = new ArrayList<>();
        boolean valid = validator.isValid(input, Action.UPDATE, failures);

        Assertions.assertFalse(valid);
        ValidationErrorCode error = ValidationErrorCode.ROLE_VALIDATION_ERR_INVALID_ROLE_ID;
        ValidationFailureDetails expected = new ValidationFailureDetailsBuilder().field("id").isSemanticallyIncorrect()
                .becauseOf(error.getMessage(100L)).errorCode(error.getErrorCode()).build();
        Assertions.assertTrue(failures.contains(expected));
    }

    @Test
    public void test13_validate_throws_onInvalid() {
        RoleStore roleStore = Mockito.mock(RoleStore.class);
        RangerRoleValidator validator = new RangerRoleValidator(roleStore);
        RangerRole input = null;

        Exception ex = Assertions.assertThrows(Exception.class, () -> validator.validate(input, Action.CREATE));
        Assertions.assertTrue(ex.getMessage() != null && ex.getMessage().contains("Validation failure"));
    }

    @Test
    public void test14_validate_ok_onUpdateWithExistingId() throws Exception {
        RoleStore roleStore = Mockito.mock(RoleStore.class);
        RangerRole existing = new RangerRole();
        existing.setName("x");
        Mockito.when(roleStore.getRole(11L)).thenReturn(existing);
        RangerRoleValidator validator = new RangerRoleValidator(roleStore);

        RangerRole input = new RangerRole();
        input.setId(11L);
        input.setName("new-name");

        List<ValidationFailureDetails> failures = new ArrayList<>();
        Assertions.assertTrue(validator.isValid(input, Action.UPDATE, failures));
        validator.validate(input, Action.UPDATE);
    }

    @Test
    public void test15_isValidRole_create_ok_withoutId() {
        RoleStore roleStore = Mockito.mock(RoleStore.class);
        RangerRoleValidator validator = new RangerRoleValidator(roleStore);

        RangerRole input = new RangerRole();
        input.setName("create-ok");

        List<ValidationFailureDetails> failures = new ArrayList<>();
        boolean valid = validator.isValid(input, Action.CREATE, failures);

        Assertions.assertTrue(valid);
        Assertions.assertTrue(failures.isEmpty());
    }
}
