/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package org.apache.ranger.plugin.store;

import org.apache.ranger.plugin.model.RangerServiceResource;
import org.apache.ranger.plugin.model.RangerTag;
import org.apache.ranger.plugin.model.RangerTagDef;
import org.apache.ranger.plugin.model.RangerTagResourceMap;
import org.apache.ranger.plugin.util.SearchFilter;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

/**
 * @generated by Cursor
 * @description <Unit Test for TagPredicateUtil class>
 */
@ExtendWith(MockitoExtension.class)
@TestMethodOrder(MethodOrderer.MethodName.class)
public class TestTagPredicateUtil {
    @Test
    public void test01_predicatesForTagDefAndTag() {
        RangerTagDef def = new RangerTagDef();
        def.setId(1L);
        def.setGuid("gd");
        def.setName("PII");
        List<RangerTagDef> defs = new ArrayList<>(Collections.singletonList(def));

        TagPredicateUtil util = new TagPredicateUtil();
        SearchFilter f = new SearchFilter();
        f.setParam(SearchFilter.TAG_DEF_ID, "1");
        f.setParam(SearchFilter.TAG_DEF_GUID, "gd");
        f.setParam(SearchFilter.TAG_TYPE, "PII");
        util.applyFilter(defs, f);
        Assertions.assertEquals(1, defs.size());

        RangerTag tag = new RangerTag();
        tag.setId(2L);
        tag.setGuid("tg");
        tag.setType("PII");
        List<RangerTag> tags = new ArrayList<>(Collections.singletonList(tag));
        SearchFilter f2 = new SearchFilter();
        f2.setParam(SearchFilter.TAG_ID, "2");
        f2.setParam(SearchFilter.TAG_GUID, "tg");
        f2.setParam(SearchFilter.TAG_TYPE, "PII");
        util.applyFilter(tags, f2);
        Assertions.assertEquals(1, tags.size());
    }

    @Test
    public void test02_predicatesForResourceAndMap() {
        RangerServiceResource res = new RangerServiceResource();
        res.setId(10L);
        res.setGuid("rg");
        res.setServiceName("svc");
        res.setResourceSignature("sig");
        List<RangerServiceResource> resources = new ArrayList<>(Collections.singletonList(res));

        TagPredicateUtil util = new TagPredicateUtil();
        SearchFilter f = new SearchFilter();
        f.setParam(SearchFilter.TAG_RESOURCE_ID, "10");
        f.setParam(SearchFilter.TAG_RESOURCE_GUID, "rg");
        f.setParam(SearchFilter.TAG_RESOURCE_SERVICE_NAME, "svc");
        f.setParam(SearchFilter.TAG_RESOURCE_SIGNATURE, "sig");
        util.applyFilter(resources, f);
        Assertions.assertEquals(1, resources.size());

        RangerTagResourceMap map = new RangerTagResourceMap();
        map.setId(99L);
        map.setTagId(2L);
        map.setResourceId(10L);
        List<RangerTagResourceMap> maps = new ArrayList<>(Collections.singletonList(map));
        SearchFilter f2 = new SearchFilter();
        f2.setParam(SearchFilter.TAG_MAP_ID, "99");
        f2.setParam(SearchFilter.TAG_ID, "2");
        // For TagResourceMap, current implementation of TAG_RESOURCE_ID predicate
        // matches map id
        f2.setParam(SearchFilter.TAG_RESOURCE_ID, "99");
        util.applyFilter(maps, f2);
        Assertions.assertEquals(1, maps.size());
    }
}
