/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package org.apache.ranger.plugin.store;

import org.apache.ranger.plugin.model.RangerSecurityZone;
import org.apache.ranger.plugin.util.SearchFilter;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * @generated by Cursor
 * @description <Unit Test for SecurityZonePredicateUtil class>
 */
@ExtendWith(MockitoExtension.class)
@TestMethodOrder(MethodOrderer.MethodName.class)
public class TestSecurityZonePredicateUtil {
    @Test
    public void test01_allPredicates() {
        RangerSecurityZone z = new RangerSecurityZone();
        z.setId(10L);
        z.setName("zone-a");
        z.setCreatedBy("admin");
        Map<String, RangerSecurityZone.RangerSecurityZoneService> services = new HashMap<>();
        services.put("svc1", new RangerSecurityZone.RangerSecurityZoneService());
        z.setServices(services);

        List<RangerSecurityZone> zones = new ArrayList<>(Collections.singletonList(z));

        SecurityZonePredicateUtil util = new SecurityZonePredicateUtil();
        SearchFilter f = new SearchFilter();
        f.setParam(SearchFilter.SERVICE_NAME, "svc1");
        f.setParam(SearchFilter.ZONE_ID, "10");
        f.setParam(SearchFilter.ZONE_NAME, "zone-a");
        f.setParam(SearchFilter.NOT_ZONE_NAME, "zone-b");
        f.setParam(SearchFilter.ZONE_NAME_PARTIAL, "zone");
        f.setParam(SearchFilter.CREATED_BY, "admin");
        util.applyFilter(zones, f);
        Assertions.assertEquals(1, zones.size());
    }
}
