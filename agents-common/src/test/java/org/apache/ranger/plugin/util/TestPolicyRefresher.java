/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.apache.ranger.plugin.util;

import org.apache.hadoop.conf.Configuration;
import org.apache.ranger.admin.client.RangerAdminClient;
import org.apache.ranger.authorization.hadoop.config.RangerPluginConfig;
import org.apache.ranger.plugin.model.RangerRole;
import org.apache.ranger.plugin.policyengine.RangerPluginContext;
import org.apache.ranger.plugin.service.RangerBasePlugin;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;

import java.io.File;
import java.io.FileWriter;
import java.nio.file.Files;
import java.util.ArrayList;
import java.util.List;

import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertTrue;

/**
* @generated by Cursor
* @description <Unit Test for PolicyRefresher class>
*/
@ExtendWith(MockitoExtension.class)
@TestMethodOrder(MethodOrderer.MethodName.class)
public class TestPolicyRefresher {
    public static class DummyAdmin implements RangerAdminClient {
        @Override
        public void init(String serviceName, String appId, String configPropertyPrefix, Configuration config) {
        }

        @Override
        public ServicePolicies getServicePoliciesIfUpdated(long lastKnownVersion, long lastActivationTimeInMillis) {
            return null;
        }

        @Override
        public RangerRoles getRolesIfUpdated(long lastKnownRoleVersion, long lastActivationTimeInMills) {
            return null;
        }

        @Override
        public RangerRole createRole(RangerRole request) {
            return null;
        }

        @Override
        public void dropRole(String execUser, String roleName) {
        }

        @Override
        public List<String> getAllRoles(String execUser) {
            return null;
        }

        @Override
        public List<String> getUserRoles(String execUser) {
            return null;
        }

        @Override
        public RangerRole getRole(String execUser, String roleName) {
            return null;
        }

        @Override
        public void grantRole(GrantRevokeRoleRequest request) {
        }

        @Override
        public void revokeRole(GrantRevokeRoleRequest request) {
        }

        @Override
        public void grantAccess(GrantRevokeRequest request) {
        }

        @Override
        public void revokeAccess(GrantRevokeRequest request) {
        }

        @Override
        public ServiceTags getServiceTagsIfUpdated(long lastKnownVersion, long lastActivationTimeInMillis) {
            return null;
        }

        @Override
        public List<String> getTagTypes(String tagTypePattern) {
            return null;
        }

        @Override
        public RangerUserStore getUserStoreIfUpdated(long lastKnownUserStoreVersion, long lastActivationTimeInMillis) {
            return null;
        }

        @Override
        public ServiceGdsInfo getGdsInfoIfUpdated(long lastKnownVersion, long lastActivationTimeInMillis) {
            return null;
        }
    }

    public static class DummyPlugin extends RangerBasePlugin {
        public DummyPlugin() {
            super(new RangerPluginConfig("svcType", "svcName", "app", null, null, null));
        }

        @Override
        public RangerPluginContext getPluginContext() {
            RangerPluginContext ctx = super.getPluginContext();
            ctx.setAdminClient(new DummyAdmin());
            return ctx;
        }
    }

    @Test
    public void test01_startAndStopRefresher_handlesTimerFailureGracefully() {
        DummyPlugin plugin = new DummyPlugin();
        PolicyRefresher refresher = new PolicyRefresher(plugin);
        assertNotNull(refresher.getRangerAdminClient());
        // starting twice should not throw; timer may fail to schedule in constrained
        // envs
        assertDoesNotThrow(refresher::startRefresher);
        assertDoesNotThrow(refresher::stopRefresher);
    }

    @Test
    public void test02_saveToCache_withNullPolicies_noop() {
        DummyPlugin plugin = new DummyPlugin();
        PolicyRefresher refresher = new PolicyRefresher(plugin);
        assertDoesNotThrow(() -> refresher.saveToCache(null));
    }

    @Test
    public void test03_syncPoliciesWithAdmin_putsAndWaits() throws InterruptedException {
        DummyPlugin plugin = new DummyPlugin();
        PolicyRefresher refresher = new PolicyRefresher(plugin);
        DownloadTrigger trigger = new DownloadTrigger();
        // queue is empty initially; put token and it should complete quickly when taken
        // by run loop only after start
        refresher.start();
        assertDoesNotThrow(() -> refresher.syncPoliciesWithAdmin(trigger));
        refresher.stopRefresher();
    }

    @Test
    public void test04_loadFromCache_warnsWhenMissingAndHandles() {
        DummyPlugin plugin = new DummyPlugin();
        PolicyRefresher refresher = new PolicyRefresher(plugin);
        // exercise private loadFromCache via public startRefresher path when Admin returns null
        // No exception should be thrown during start and stop even when cache not present
        assertDoesNotThrow(refresher::startRefresher);
        assertDoesNotThrow(refresher::stopRefresher);
    }

    @Test
    public void test05_deleteOldestVersionCacheFileInCacheDirectory_prunes() throws Exception {
        // Prepare a temp dir and plugin pointing to it via property
        File tmpDir = Files.createTempDirectory("ranger-cache").toFile();
        tmpDir.deleteOnExit();

        RangerPluginConfig cfg = new RangerPluginConfig("svcType", "svcName", "app", null, null, null);
        cfg.set(cfg.getPropertyPrefix() + ".policy.rest.url", "http://localhost");
        cfg.set(cfg.getPropertyPrefix() + ".policy.cache.dir", tmpDir.getAbsolutePath());
        cfg.setInt(cfg.getPropertyPrefix() + "max.versions.to.preserve", 1);

        RangerBasePlugin plugin = new RangerBasePlugin(cfg) {};
        PolicyRefresher refresher = new PolicyRefresher(plugin);

        // Write two versioned files in main cache dir to trigger prune
        String cacheFileName = cfg.getAppId() + "_" + cfg.getServiceName() + ".json";
        File f1 = new File(tmpDir, cacheFileName + "_10");
        File f2 = new File(tmpDir, cacheFileName + "_20");
        try (FileWriter w = new FileWriter(f1)) {
            w.write("{}");
        }
        try (FileWriter w = new FileWriter(f2)) {
            w.write("{}");
        }

        // Call saveToCache with policyDeltas empty to go to non-deltas dir; prune runs after close
        ServicePolicies sp = new ServicePolicies();
        sp.setServiceName(cfg.getServiceName());
        sp.setPolicyVersion(30L);
        sp.setPolicies(new ArrayList<>());
        // preserve.deltas=false by default
        refresher.saveToCache(sp);

        // After pruning logic, at most one json_* file should remain in tmpDir
        File[] remaining = tmpDir.listFiles((dir, name) -> name.matches(".+json_.+"));
        // remaining might be null on some FS; treat as zero
        int count = remaining == null ? 0 : remaining.length;
        // allow 0 or 1 depending on execution timing, but not more than 1
        assertNotNull(remaining);
        assertTrue(count <= 1);
    }

    @Test
    public void test06_disableCache_handlesMissingCacheFile() {
        DummyPlugin plugin = new DummyPlugin();
        PolicyRefresher refresher = new PolicyRefresher(plugin);
        // invoke start/stop which internally may reach disable path on exceptions; ensure no throws
        assertDoesNotThrow(refresher::stopRefresher);
    }
}
