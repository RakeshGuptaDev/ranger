/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.apache.ranger.plugin.util;

import org.apache.ranger.plugin.model.GroupInfo;
import org.apache.ranger.plugin.model.UserInfo;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;

import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertTrue;

/**
* @generated by Cursor
* @description <Unit Test for RangerUserStore class>
*/
@ExtendWith(MockitoExtension.class)
@TestMethodOrder(MethodOrderer.MethodName.class)
public class TestRangerUserStore {
    @Test
    public void test01_defaultConstructor_and_toString() {
        RangerUserStore store = new RangerUserStore();
        assertNotNull(store.getUserStoreVersion());
        assertNotNull(store.getUserStoreUpdateTime());
        String s = store.toString();
        assertNotNull(s);
        assertTrue(s.contains("RangerUserStore"));
    }

    @Test
    public void test02_paramConstructor_buildsMaps_and_dedupStrings() {
        Set<UserInfo> users = new HashSet<>();
        UserInfo u = new UserInfo();
        u.setName("user1");
        Map<String, String> ua = new HashMap<>();
        ua.put(RangerUserStore.CLOUD_IDENTITY_NAME, "cid");
        u.setOtherAttributes(ua);
        users.add(u);

        Set<GroupInfo> groups = new HashSet<>();
        GroupInfo g = new GroupInfo();
        g.setName("group1");
        Map<String, String> ga = new HashMap<>();
        ga.put(RangerUserStore.CLOUD_IDENTITY_NAME, "gid");
        g.setOtherAttributes(ga);
        groups.add(g);

        Map<String, Set<String>> ug = new HashMap<>();
        ug.put("user1", Collections.singleton("group1"));

        RangerUserStore store = new RangerUserStore(1L, users, groups, ug);
        store.dedupStrings();
        assertNotNull(store.getUserAttrMapping());
        assertNotNull(store.getGroupAttrMapping());
        assertNotNull(store.getUserGroupMapping());
        assertNotNull(store.getUserCloudIdMapping());
        assertNotNull(store.getGroupCloudIdMapping());
    }

    @Test
    public void test03_setters_changeFields() {
        RangerUserStore store = new RangerUserStore();
        store.setUserStoreVersion(5L);
        store.setUserStoreUpdateTime(new Date());
        store.setUserAttrMapping(new HashMap<>());
        store.setGroupAttrMapping(new HashMap<>());
        store.setUserGroupMapping(new HashMap<>());
        store.setUserCloudIdMapping(new HashMap<>());
        store.setGroupCloudIdMapping(new HashMap<>());
        assertNotNull(store.toString());
    }
}
