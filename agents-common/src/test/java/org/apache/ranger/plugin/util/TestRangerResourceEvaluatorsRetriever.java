/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.apache.ranger.plugin.util;

import org.apache.commons.collections.Predicate;
import org.apache.ranger.plugin.model.RangerPolicy;
import org.apache.ranger.plugin.model.RangerServiceDef;
import org.apache.ranger.plugin.policyengine.RangerAccessRequest;
import org.apache.ranger.plugin.policyengine.RangerResourceTrie;
import org.apache.ranger.plugin.policyresourcematcher.RangerPolicyResourceMatcher;
import org.apache.ranger.plugin.policyresourcematcher.RangerResourceEvaluator;
import org.apache.ranger.plugin.resourcematcher.RangerResourceMatcher;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;

import java.util.Collection;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;

import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Assertions.assertTrue;

/**
* @generated by Cursor
* @description <Unit Test for RangerResourceEvaluatorsRetriever class>
*/
@ExtendWith(MockitoExtension.class)
@TestMethodOrder(MethodOrderer.MethodName.class)
public class TestRangerResourceEvaluatorsRetriever {
    private static class DummyEval implements RangerResourceEvaluator {
        @Override
        public long getId() {
            return 1L;
        }

        @Override
        public RangerPolicyResourceMatcher getPolicyResourceMatcher() {
            return null;
        }

        @Override
        public Map<String, RangerPolicy.RangerPolicyResource> getPolicyResource() {
            return Collections.emptyMap();
        }

        @Override
        public RangerResourceMatcher getResourceMatcher(String resourceName) {
            return null;
        }

        @Override
        public boolean isAncestorOf(RangerServiceDef.RangerResourceDef resourceDef) {
            return false;
        }

        @Override
        public boolean isLeaf(String resourceName) {
            return true;
        }
    }

    private static class FakeTrie<T extends RangerResourceEvaluator> extends RangerResourceTrie<T> {
        private final int count;
        private final Set<T> set;

        FakeTrie(String resourceName, int count, Set<T> set) {
            super(makeResDef(resourceName), Collections.emptyList());
            this.count = count;
            this.set = set;
        }

        private static RangerServiceDef.RangerResourceDef makeResDef(String name) {
            RangerServiceDef.RangerResourceDef def = new RangerServiceDef.RangerResourceDef();
            def.setName(name);
            return def;
        }

        @Override
        public int getEvaluatorsCountForResource(Object r, RangerAccessRequest.ResourceElementMatchingScope s,
                Predicate p) {
            return count;
        }

        @Override
        public Set<T> getEvaluatorsForResource(Object r, RangerAccessRequest.ResourceElementMatchingScope s,
                Predicate p) {
            return set;
        }

        @Override
        public Set<T> getEvaluatorsForResource(Object r, RangerAccessRequest.ResourceElementMatchingScope s,
                Set<T> filter, Predicate p) {
            return set;
        }
    }

    @Test
    public void test01_emptyInputsReturnNull() {
        Collection<RangerResourceEvaluator> out = RangerResourceEvaluatorsRetriever
                .getEvaluators(Collections.emptyMap(), Collections.emptyMap());
        assertNull(out);
    }

    @Test
    public void test02_singleKeySkipsCountAndReturnsSet() {
        Map<String, RangerResourceTrie<RangerResourceEvaluator>> trie = new HashMap<>();
        Set<RangerResourceEvaluator> evals = new HashSet<>();
        evals.add(new DummyEval());
        trie.put("db", new FakeTrie<>("db", 1, evals));
        Map<String, Object> resource = new HashMap<>();
        resource.put("db", "sales");
        Collection<RangerResourceEvaluator> out = RangerResourceEvaluatorsRetriever.getEvaluators(trie, resource,
                new HashMap<>());
        assertNotNull(out);
        assertTrue(out.containsAll(evals));
    }

    @Test
    public void test03_multiKeyChoosesMinCountAndIntersects() {
        Map<String, RangerResourceTrie<RangerResourceEvaluator>> trie = new HashMap<>();
        Set<RangerResourceEvaluator> setDb = new HashSet<>();
        RangerResourceEvaluator e1 = new DummyEval();
        setDb.add(e1);
        Set<RangerResourceEvaluator> setTable = new HashSet<>();
        setTable.add(e1); // intersection not empty
        trie.put("db", new FakeTrie<>("db", 1, setDb));
        trie.put("table", new FakeTrie<>("table", 2, setTable));
        Map<String, Object> resource = new HashMap<>();
        resource.put("db", "sales");
        resource.put("table", "orders");
        Collection<RangerResourceEvaluator> out = RangerResourceEvaluatorsRetriever.getEvaluators(trie, resource,
                new HashMap<>(), null);
        assertNotNull(out);
        assertTrue(out.contains(e1));
    }
}
