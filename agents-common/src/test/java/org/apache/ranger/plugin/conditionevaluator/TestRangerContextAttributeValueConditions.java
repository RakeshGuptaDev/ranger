/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package org.apache.ranger.plugin.conditionevaluator;

import org.apache.ranger.plugin.model.RangerPolicy.RangerPolicyItemCondition;
import org.apache.ranger.plugin.model.RangerServiceDef.RangerPolicyConditionDef;
import org.apache.ranger.plugin.policyengine.RangerAccessRequest;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;

import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.Map;

import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

/**
* @generated by Cursor
* @description <Unit Test for RangerContextAttributeValueConditions class>
*/
@ExtendWith(MockitoExtension.class)
@TestMethodOrder(MethodOrderer.MethodName.class)
public class TestRangerContextAttributeValueConditions {
    @Test
    public void test01_inCondition_attributeMissing_returnsTrue() {
        RangerContextAttributeValueInCondition evaluator = new RangerContextAttributeValueInCondition();

        RangerPolicyConditionDef conditionDef = mock(RangerPolicyConditionDef.class);
        when(conditionDef.getEvaluatorOptions()).thenReturn(Collections.singletonMap("attributeName", "site"));
        evaluator.setConditionDef(conditionDef);

        RangerPolicyItemCondition condition = mock(RangerPolicyItemCondition.class);
        when(condition.getValues()).thenReturn(Arrays.asList("10", "20"));
        evaluator.setPolicyItemCondition(condition);

        evaluator.init();

        RangerAccessRequest request = mock(RangerAccessRequest.class);
        when(request.getContext()).thenReturn(new HashMap<>());

        Assertions.assertTrue(evaluator.isMatched(request));
    }

    @Test
    public void test02_inCondition_attributePresent_withMatch_returnsTrue() {
        RangerContextAttributeValueInCondition evaluator = new RangerContextAttributeValueInCondition();

        RangerPolicyConditionDef conditionDef = mock(RangerPolicyConditionDef.class);
        when(conditionDef.getEvaluatorOptions()).thenReturn(Collections.singletonMap("attributeName", "dept"));
        evaluator.setConditionDef(conditionDef);

        RangerPolicyItemCondition condition = mock(RangerPolicyItemCondition.class);
        when(condition.getValues()).thenReturn(Arrays.asList("ENGG", "PROD"));
        evaluator.setPolicyItemCondition(condition);

        evaluator.init();

        Map<String, Object> ctx = new HashMap<>();
        ctx.put("dept", "ENGG");
        RangerAccessRequest request = mock(RangerAccessRequest.class);
        when(request.getContext()).thenReturn(ctx);

        Assertions.assertTrue(evaluator.isMatched(request));
    }

    @Test
    public void test03_inCondition_attributePresent_noMatch_returnsFalse() {
        RangerContextAttributeValueInCondition evaluator = new RangerContextAttributeValueInCondition();

        RangerPolicyConditionDef conditionDef = mock(RangerPolicyConditionDef.class);
        when(conditionDef.getEvaluatorOptions()).thenReturn(Collections.singletonMap("attributeName", "dept"));
        evaluator.setConditionDef(conditionDef);

        RangerPolicyItemCondition condition = mock(RangerPolicyItemCondition.class);
        when(condition.getValues()).thenReturn(Arrays.asList("ENGG", "PROD"));
        evaluator.setPolicyItemCondition(condition);

        evaluator.init();

        Map<String, Object> ctx = new HashMap<>();
        ctx.put("dept", "SALES");
        RangerAccessRequest request = mock(RangerAccessRequest.class);
        when(request.getContext()).thenReturn(ctx);

        Assertions.assertFalse(evaluator.isMatched(request));
    }

    @Test
    public void test04_notInCondition_attributeMissing_returnsTrue() {
        RangerContextAttributeValueNotInCondition evaluator = new RangerContextAttributeValueNotInCondition();

        RangerPolicyConditionDef conditionDef = mock(RangerPolicyConditionDef.class);
        when(conditionDef.getEvaluatorOptions()).thenReturn(Collections.singletonMap("attributeName", "site"));
        evaluator.setConditionDef(conditionDef);

        RangerPolicyItemCondition condition = mock(RangerPolicyItemCondition.class);
        when(condition.getValues()).thenReturn(Arrays.asList("10", "20"));
        evaluator.setPolicyItemCondition(condition);

        evaluator.init();

        RangerAccessRequest request = mock(RangerAccessRequest.class);
        when(request.getContext()).thenReturn(new HashMap<>());

        Assertions.assertTrue(evaluator.isMatched(request));
    }

    @Test
    public void test05_notInCondition_attributePresent_withMatch_returnsFalse() {
        RangerContextAttributeValueNotInCondition evaluator = new RangerContextAttributeValueNotInCondition();

        RangerPolicyConditionDef conditionDef = mock(RangerPolicyConditionDef.class);
        when(conditionDef.getEvaluatorOptions()).thenReturn(Collections.singletonMap("attributeName", "dept"));
        evaluator.setConditionDef(conditionDef);

        RangerPolicyItemCondition condition = mock(RangerPolicyItemCondition.class);
        when(condition.getValues()).thenReturn(Arrays.asList("ENGG", "PROD"));
        evaluator.setPolicyItemCondition(condition);

        evaluator.init();

        Map<String, Object> ctx = new HashMap<>();
        ctx.put("dept", "PROD");
        RangerAccessRequest request = mock(RangerAccessRequest.class);
        when(request.getContext()).thenReturn(ctx);

        Assertions.assertFalse(evaluator.isMatched(request));
    }

    @Test
    public void test06_notInCondition_attributePresent_noMatch_returnsTrue() {
        RangerContextAttributeValueNotInCondition evaluator = new RangerContextAttributeValueNotInCondition();

        RangerPolicyConditionDef conditionDef = mock(RangerPolicyConditionDef.class);
        when(conditionDef.getEvaluatorOptions()).thenReturn(Collections.singletonMap("attributeName", "dept"));
        evaluator.setConditionDef(conditionDef);

        RangerPolicyItemCondition condition = mock(RangerPolicyItemCondition.class);
        when(condition.getValues()).thenReturn(Arrays.asList("ENGG", "PROD"));
        evaluator.setPolicyItemCondition(condition);

        evaluator.init();

        Map<String, Object> ctx = new HashMap<>();
        ctx.put("dept", "SALES");
        RangerAccessRequest request = mock(RangerAccessRequest.class);
        when(request.getContext()).thenReturn(ctx);

        Assertions.assertTrue(evaluator.isMatched(request));
    }
}
