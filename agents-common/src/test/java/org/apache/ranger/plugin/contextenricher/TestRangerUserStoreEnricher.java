/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package org.apache.ranger.plugin.contextenricher;

import org.apache.ranger.plugin.model.RangerServiceDef;
import org.apache.ranger.plugin.model.RangerServiceDef.RangerContextEnricherDef;
import org.apache.ranger.plugin.policyengine.RangerAccessRequestImpl;
import org.apache.ranger.plugin.util.RangerAccessRequestUtil;
import org.apache.ranger.plugin.util.RangerUserStore;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;

import java.util.HashMap;
import java.util.Map;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Assertions.assertTrue;

/**
* @generated by Cursor
* @description <Unit Test for RangerUserStoreEnricher class>
*/
@ExtendWith(MockitoExtension.class)
@TestMethodOrder(MethodOrderer.MethodName.class)
public class TestRangerUserStoreEnricher {
    @Test
    public void test01_Enrich_With_DataStore_And_Fallback() {
        RangerUserStoreEnricher enricher = new RangerUserStoreEnricher();

        RangerUserStore store = new RangerUserStore();
        store.setUserStoreVersion(1L);

        RangerAccessRequestImpl request = new RangerAccessRequestImpl();

        enricher.enrich(request, store);
        assertEquals(store, RangerAccessRequestUtil.getRequestUserStoreFromContext(request.getContext()));

        // with wrong type, falls back to internal field (null)
        enricher.enrich(request, new HashMap<>());
        assertNull(RangerAccessRequestUtil.getRequestUserStoreFromContext(request.getContext()));
    }

    @Test
    public void test02_SetRangerUserStore_Dedup_And_GetVersion() {
        RangerUserStoreEnricher enricher = new RangerUserStoreEnricher();

        RangerUserStore store = new RangerUserStore();
        store.setUserStoreVersion(42L);

        enricher.setRangerUserStore(store);
        assertEquals(42L, enricher.getUserStoreVersion());
        assertEquals(store, enricher.getRangerUserStore());
    }

    @Test
    public void test03_PreCleanup_Nulls_Timer_And_Refresher() {
        RangerUserStoreEnricher enricher = Mockito.spy(new RangerUserStoreEnricher());

        // Directly invoke preCleanup; no NPE should occur and returns true
        assertTrue(enricher.preCleanup());
    }

    @Test
    public void test04_Enrich_Without_DataStore_Delegates_To_Internal() {
        RangerUserStoreEnricher enricher = new RangerUserStoreEnricher();

        RangerUserStore store = new RangerUserStore();
        store.setUserStoreVersion(9L);

        RangerAccessRequestImpl request = new RangerAccessRequestImpl();

        // set internal and call single-arg enrich
        enricher.setRangerUserStore(store);
        enricher.enrich(request);
        assertEquals(store, RangerAccessRequestUtil.getRequestUserStoreFromContext(request.getContext()));
    }

    @Test
    public void test05_SetRangerUserStore_Null_Clears_Internal() {
        RangerUserStoreEnricher enricher = new RangerUserStoreEnricher();

        RangerUserStore store = new RangerUserStore();
        store.setUserStoreVersion(3L);
        enricher.setRangerUserStore(store);
        assertNotNull(enricher.getRangerUserStore());

        enricher.setRangerUserStore(null);
        assertNull(enricher.getRangerUserStore());
        assertNull(enricher.getUserStoreVersion());
    }

    @Test
    public void test06_Init_With_RetrieverClass_Populates_And_PreCleanup() {
        RangerUserStoreEnricher enricher = new RangerUserStoreEnricher();

        RangerServiceDef def = new RangerServiceDef();
        def.setName("svcType");

        enricher.setServiceName("svc");
        enricher.setServiceDef(def);
        enricher.setAppId("app");

        Map<String, String> opts = new HashMap<>();
        opts.put(RangerUserStoreEnricher.USERSTORE_RETRIEVER_CLASSNAME_OPTION, DummyRetriever.class.getName());

        // attach enricherDef options
        RangerContextEnricherDef enricherDef = new RangerContextEnricherDef();
        enricherDef.setName("userstore");
        enricherDef.setEnricherOptions(opts);
        enricher.setEnricherDef(enricherDef);

        enricher.init();

        // Dummy retriever returns a store with version 1L
        assertEquals(1L, enricher.getUserStoreVersion());
        assertNotNull(enricher.getRangerUserStore());

        assertTrue(enricher.preCleanup());
    }

    public static class DummyRetriever extends RangerUserStoreRetriever {
        @Override
        public void init(Map<String, String> options) {
            // no-op
        }

        @Override
        public RangerUserStore retrieveUserStoreInfo(long lastKnownVersion, long lastActivationTimeInMillis) {
            RangerUserStore store = new RangerUserStore();
            store.setUserStoreVersion(1L);
            return store;
        }
    }
}
