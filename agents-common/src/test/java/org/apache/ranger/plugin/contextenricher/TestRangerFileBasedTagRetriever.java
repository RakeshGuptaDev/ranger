/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package org.apache.ranger.plugin.contextenricher;

import org.apache.ranger.authorization.utils.JsonUtils;
import org.apache.ranger.plugin.model.RangerServiceDef;
import org.apache.ranger.plugin.util.ServiceTags;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;

import java.io.File;
import java.io.FileWriter;
import java.util.HashMap;
import java.util.Map;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Assertions.assertTrue;

/**
 * @generated by Cursor
 * @description <Unit Test for RangerFileBasedTagRetriever class>
 */
@ExtendWith(MockitoExtension.class)
@TestMethodOrder(MethodOrderer.MethodName.class)
public class TestRangerFileBasedTagRetriever {
    @Test
    public void test01_Init_With_Options_And_Retrieve_From_Resource() throws Exception {
        RangerFileBasedTagRetriever retriever = new RangerFileBasedTagRetriever();

        RangerServiceDef serviceDef = new RangerServiceDef();
        serviceDef.setName("hive");

        retriever.setServiceName("svc");
        retriever.setServiceDef(serviceDef);
        retriever.setAppId("appid");

        Map<String, String> options = new HashMap<>();
        options.put("serviceTagsFileName", "/policyengine/resourceTags.json");

        retriever.init(options);

        ServiceTags tags = retriever.retrieveTags(-1L, -1L);
        assertNotNull(tags);
        assertEquals("cl1_hive", tags.getServiceName());
    }

    @Test
    public void test02_Init_With_Missing_File_Graceful() {
        RangerFileBasedTagRetriever retriever = new RangerFileBasedTagRetriever();
        RangerServiceDef serviceDef = new RangerServiceDef();
        serviceDef.setName("hive");

        retriever.setServiceName("svc");
        retriever.setServiceDef(serviceDef);
        retriever.setAppId("appid");

        Map<String, String> options = new HashMap<>();
        options.put("serviceTagsFileName", "/does/not/exist.json");

        retriever.init(options);

        ServiceTags out = retriever.retrieveTags(-1L, -1L);
        assertNull(out);
    }

    @Test
    public void test03_Rotate_Tag_Files_When_Not_Initial() throws Exception {
        // prepare temp directory with two tag files suffixed _0.json and _1.json
        File dir = new File(System.getProperty("java.io.tmpdir"), "rtags-" + System.nanoTime());
        assertTrue(dir.mkdirs());
        File base = new File(dir, "tags.json");
        String basePath = base.getAbsolutePath();

        ServiceTags t0 = new ServiceTags();
        t0.setServiceName("svc");
        t0.setTagVersion(100L);
        ServiceTags t1 = new ServiceTags();
        t1.setServiceName("svc");
        t1.setTagVersion(101L);

        writeTags(new File(basePath + "_0.json"), t0);
        writeTags(new File(basePath + "_1.json"), t1);

        RangerFileBasedTagRetriever retriever = new RangerFileBasedTagRetriever();
        RangerServiceDef serviceDef = new RangerServiceDef();
        serviceDef.setName("hive");
        retriever.setServiceName("svc");
        retriever.setServiceDef(serviceDef);
        retriever.setAppId("appid");

        Map<String, String> options = new HashMap<>();
        options.put("serviceTagsFileName", basePath);
        options.put("tagFileCount", "2");
        retriever.init(options);

        // first retrieve uses initial file (basePath), which doesn't exist => null
        assertNull(retriever.retrieveTags(-1L, -1L));

        // simulate parsed tagFilesCount and non-initial state
        retriever.tagFilesCount = 2;
        retriever.currentTagFileIndex = 0;
        retriever.isInitial = false;

        // subsequent retrieves rotate between _0 and _1
        ServiceTags r0 = retriever.retrieveTags(-1L, -1L);
        ServiceTags r1 = retriever.retrieveTags(-1L, -1L);
        assertNotNull(r0);
        assertNotNull(r1);
        assertTrue(r0.getTagVersion() == 100L || r0.getTagVersion() == 101L);
        assertTrue(r1.getTagVersion() == 100L || r1.getTagVersion() == 101L);
    }

    @Test
    public void test04_GetTagFileURL_OpenStreamError_Graceful() {
        RangerFileBasedTagRetriever retriever = new RangerFileBasedTagRetriever();
        RangerServiceDef serviceDef = new RangerServiceDef();
        serviceDef.setName("hive");
        retriever.setServiceName("svc");
        retriever.setServiceDef(serviceDef);
        retriever.setAppId("appid");

        Map<String, String> options = new HashMap<>();
        // Provide a bogus path to force URL lookup to fail and log, returning null
        options.put("serviceTagsFileName", "/this/path/does/not/exist/tags.json");
        retriever.init(options);

        ServiceTags out = retriever.retrieveTags(-1L, -1L);
        assertNull(out);
    }

    private static void writeTags(File file, ServiceTags tags) throws Exception {
        try (FileWriter fw = new FileWriter(file)) {
            fw.write(JsonUtils.objectToJson(tags));
        }
    }
}
