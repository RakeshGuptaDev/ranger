/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package org.apache.ranger.plugin.contextenricher;

import org.apache.ranger.plugin.model.RangerPolicy;
import org.apache.ranger.plugin.model.RangerServiceDef;
import org.apache.ranger.plugin.model.RangerServiceDef.RangerResourceDef;
import org.apache.ranger.plugin.model.RangerServiceResource;
import org.apache.ranger.plugin.policyengine.RangerAccessRequestImpl;
import org.apache.ranger.plugin.policyengine.RangerAccessResourceImpl;
import org.apache.ranger.plugin.policyresourcematcher.RangerDefaultPolicyResourceMatcher;
import org.apache.ranger.plugin.policyresourcematcher.RangerPolicyResourceMatcher;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;

import java.util.Collections;
import java.util.HashMap;
import java.util.Map;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;

/**
* @generated by Cursor
* @description <Unit Test for RangerServiceResourceMatcher class>
*/
@ExtendWith(MockitoExtension.class)
@TestMethodOrder(MethodOrderer.MethodName.class)
public class TestRangerServiceResourceMatcher {
    @Test
    public void test01_Id_IsLeaf_And_GetMatchType() {
        RangerServiceDef serviceDef = new RangerServiceDef();
        serviceDef.setName("hive");
        RangerResourceDef db = new RangerResourceDef();
        db.setItemId(1L);
        db.setName("database");
        db.setType("string");
        db.setLevel(0);
        db.setIsValidLeaf(true);
        serviceDef.setResources(Collections.singletonList(db));

        RangerServiceResource sr = new RangerServiceResource();
        sr.setId(100L);
        sr.setServiceName("hive");
        Map<String, RangerPolicy.RangerPolicyResource> res = new HashMap<>();
        res.put("database", new RangerPolicy.RangerPolicyResource(Collections.singletonList("db1"), false, false));
        sr.setResourceElements(res);

        RangerDefaultPolicyResourceMatcher matcher = new RangerDefaultPolicyResourceMatcher();
        matcher.setServiceDef(serviceDef);
        matcher.setPolicyResources(res, RangerPolicy.POLICY_TYPE_ACCESS);
        matcher.init();

        RangerServiceResourceMatcher srm = new RangerServiceResourceMatcher(sr, matcher);

        assertEquals(100L, srm.getId());
        assertTrue(srm.isLeaf("database"));

        RangerAccessResourceImpl reqRes = new RangerAccessResourceImpl();
        reqRes.setServiceDef(serviceDef);
        reqRes.setValue("database", Collections.singletonList("db1"));
        RangerAccessRequestImpl req = new RangerAccessRequestImpl();
        req.setResource(reqRes);

        RangerPolicyResourceMatcher.MatchType mt = srm.getMatchType(reqRes, req.getResourceElementMatchingScopes(), req.getContext());
        assertNotEquals(RangerPolicyResourceMatcher.MatchType.NONE, mt);
    }
}
