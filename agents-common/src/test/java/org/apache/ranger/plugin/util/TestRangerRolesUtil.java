/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.apache.ranger.plugin.util;

import org.apache.ranger.plugin.model.RangerRole;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertTrue;

/**
 * @generated by Cursor
 * @description <Unit Test for RangerRolesUtil class>
 */
@ExtendWith(MockitoExtension.class)
@TestMethodOrder(MethodOrderer.MethodName.class)
public class TestRangerRolesUtil {
    private RangerRole role(String name, List<String> users, List<String> groups, List<String> roles) {
        RangerRole r = new RangerRole();
        r.setName(name);
        List<RangerRole.RoleMember> u = new ArrayList<>();
        for (String s : users) {
            u.add(new RangerRole.RoleMember(s, false));
        }
        r.setUsers(u);
        List<RangerRole.RoleMember> g = new ArrayList<>();
        for (String s : groups) {
            g.add(new RangerRole.RoleMember(s, false));
        }
        r.setGroups(g);
        List<RangerRole.RoleMember> rr = new ArrayList<>();
        for (String s : roles) {
            rr.add(new RangerRole.RoleMember(s, false));
        }
        r.setRoles(rr);
        return r;
    }

    @Test
    public void test01_mappingsWithNestedRoles() {
        RangerRoles roles = new RangerRoles();
        roles.setRoleVersion(5L);
        Set<RangerRole> set = new HashSet<>();
        set.add(role("roleA", Arrays.asList("u1"), Arrays.asList("g1"), Arrays.asList("roleB")));
        set.add(role("roleB", Arrays.asList("u2"), Arrays.asList("g2"), Arrays.asList("roleC")));
        set.add(role("roleC", Arrays.asList("u3"), Arrays.asList("g3"), new ArrayList<>()));
        roles.setRangerRoles(set);

        RangerRolesUtil util = new RangerRolesUtil(roles);
        assertEquals(5L, util.getRoleVersion());
        assertNotNull(util.getRoles());

        Map<String, Set<String>> userMap = util.getUserRoleMapping();
        Map<String, Set<String>> groupMap = util.getGroupRoleMapping();
        Map<String, Set<String>> roleMap = util.getRoleRoleMapping();
        Map<String, Set<String>> roleToUsers = util.getRoleToUserMapping();
        Map<String, Set<String>> roleToGroups = util.getRoleToGroupMapping();

        assertTrue(userMap.get("u1").contains("roleA"));
        assertTrue(groupMap.get("g1").contains("roleA"));
        assertTrue(roleMap.get("roleB").contains("roleA"));

        // Nested membership propagation
        assertTrue(roleToUsers.get("roleA").contains("u2"));
        assertTrue(roleToGroups.get("roleA").contains("g2"));
        assertTrue(roleToUsers.get("roleA").contains("u3"));
        assertTrue(roleToGroups.get("roleA").contains("g3"));
    }

    @Test
    public void test02_nullRoles_resultsInDefaultVersionAndEmptyMaps() {
        RangerRolesUtil util = new RangerRolesUtil(null);
        assertEquals(-1L, util.getRoleVersion());
        assertTrue(util.getUserRoleMapping().isEmpty());
        assertTrue(util.getGroupRoleMapping().isEmpty());
        assertTrue(util.getRoleRoleMapping().isEmpty());
    }
}
