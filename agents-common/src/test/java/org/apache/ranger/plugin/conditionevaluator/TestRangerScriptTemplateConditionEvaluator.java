/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package org.apache.ranger.plugin.conditionevaluator;

import org.apache.ranger.plugin.model.RangerPolicy.RangerPolicyItemCondition;
import org.apache.ranger.plugin.model.RangerServiceDef;
import org.apache.ranger.plugin.model.RangerServiceDef.RangerPolicyConditionDef;
import org.apache.ranger.plugin.policyengine.RangerAccessRequest;
import org.apache.ranger.plugin.util.ScriptEngineUtil;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.MockedStatic;
import org.mockito.junit.jupiter.MockitoExtension;

import javax.script.Bindings;
import javax.script.ScriptEngine;
import javax.script.SimpleBindings;

import java.util.Collections;
import java.util.HashMap;
import java.util.Map;

import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.anyString;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.mockStatic;
import static org.mockito.Mockito.when;

/**
 * @generated by Cursor
 * @description <Unit Test for RangerScriptTemplateConditionEvaluator class>
 */
@ExtendWith(MockitoExtension.class)
@TestMethodOrder(MethodOrderer.MethodName.class)
public class TestRangerScriptTemplateConditionEvaluator {
    @Test
    public void test01_isMatched_withTemplate_trueExpected_noReverse() throws Exception {
        RangerServiceDef serviceDef = mock(RangerServiceDef.class);
        when(serviceDef.getName()).thenReturn("hive");

        Map<String, String> evalOptions = new HashMap<>();
        evalOptions.put("scriptTemplate", "true");

        RangerPolicyConditionDef conditionDef = mock(RangerPolicyConditionDef.class);
        when(conditionDef.getEvaluatorOptions()).thenReturn(evalOptions);

        RangerPolicyItemCondition condition = mock(RangerPolicyItemCondition.class);
        when(condition.getValues()).thenReturn(Collections.singletonList("true"));

        RangerAccessRequest request = mock(RangerAccessRequest.class);
        when(request.getReadOnlyCopy()).thenReturn(request);

        ScriptEngine engine = mock(ScriptEngine.class);

        try (MockedStatic<ScriptEngineUtil> ignored = mockStatic(ScriptEngineUtil.class)) {
            when(ScriptEngineUtil.createScriptEngine("hive")).thenReturn(engine);
            when(engine.createBindings()).thenReturn(new SimpleBindings());
            when(engine.eval(anyString(), any(Bindings.class))).thenReturn(Boolean.TRUE);

            RangerScriptTemplateConditionEvaluator evaluator = new RangerScriptTemplateConditionEvaluator();
            evaluator.setServiceDef(serviceDef);
            evaluator.setConditionDef(conditionDef);
            evaluator.setPolicyItemCondition(condition);
            evaluator.init();

            Assertions.assertTrue(evaluator.isMatched(request));
        }
    }

    @Test
    public void test02_isMatched_withTemplate_falseExpected_reverseTrue() throws Exception {
        RangerServiceDef serviceDef = mock(RangerServiceDef.class);
        when(serviceDef.getName()).thenReturn("hive");

        Map<String, String> evalOptions = new HashMap<>();
        evalOptions.put("scriptTemplate", "true");

        RangerPolicyConditionDef conditionDef = mock(RangerPolicyConditionDef.class);
        when(conditionDef.getEvaluatorOptions()).thenReturn(evalOptions);

        RangerPolicyItemCondition condition = mock(RangerPolicyItemCondition.class);
        when(condition.getValues()).thenReturn(Collections.singletonList("false"));

        RangerAccessRequest request = mock(RangerAccessRequest.class);
        when(request.getReadOnlyCopy()).thenReturn(request);

        ScriptEngine engine = mock(ScriptEngine.class);

        try (MockedStatic<ScriptEngineUtil> ignored = mockStatic(ScriptEngineUtil.class)) {
            when(ScriptEngineUtil.createScriptEngine("hive")).thenReturn(engine);
            when(engine.createBindings()).thenReturn(new SimpleBindings());
            when(engine.eval(anyString(), any(Bindings.class))).thenReturn(Boolean.TRUE);

            RangerScriptTemplateConditionEvaluator evaluator = new RangerScriptTemplateConditionEvaluator();
            evaluator.setServiceDef(serviceDef);
            evaluator.setConditionDef(conditionDef);
            evaluator.setPolicyItemCondition(condition);
            evaluator.init();

            Assertions.assertFalse(evaluator.isMatched(request));
        }
    }
}
