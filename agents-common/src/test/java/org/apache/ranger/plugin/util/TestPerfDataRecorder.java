/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.apache.ranger.plugin.util;

import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;

import java.util.Collections;
import java.util.Map;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;

/**
* @generated by Cursor
* @description <Unit Test for PerfDataRecorder class>
*/
@ExtendWith(MockitoExtension.class)
@TestMethodOrder(MethodOrderer.MethodName.class)
public class TestPerfDataRecorder {
    @Test
    public void test01_initializeAndRecordAndExposeAndClear() {
        PerfDataRecorder.initialize(true, 0, true, Collections.singletonList("TAG1"));
        assertTrue(PerfDataRecorder.collectStatistics());

        PerfDataRecorder.recordStatistic("TAG1", 10, 20);
        PerfDataRecorder.recordStatistic("TAG1", 5, 7);
        PerfDataRecorder.recordStatistic("TAG2", 3, 4);

        Map<String, PerfDataRecorder.PerfStatistic> stats = PerfDataRecorder.exposeStatistics();
        assertTrue(stats.containsKey("TAG1"));
        PerfDataRecorder.PerfStatistic ps = stats.get("TAG1");
        assertTrue(ps.getNumberOfInvocations() >= 2);
        assertTrue(ps.getMicroSecondsSpent() >= 27);
        assertTrue(ps.getMicroSecondsSpentCpu() >= 15);
        assertTrue(ps.getMaxTimeSpent() >= ps.getMinTimeSpent());

        PerfDataRecorder.printStatistics();
        PerfDataRecorder.clearStatistics();
        assertEquals(0, PerfDataRecorder.exposeStatistics().size());
    }

    @Test
    public void test02_initialize_noRecorder_collectDisabled() {
        PerfDataRecorder.initialize(false, 0, false, null);
        assertTrue(PerfDataRecorder.collectStatistics());
        // record should be no-op with respect to changing instance; map remains
        // accessible
        PerfDataRecorder.recordStatistic("X", 1, 1);
        // size may be >= 1 depending on previous initialization; ensure map is exposed
        PerfDataRecorder.exposeStatistics();
        assertTrue(PerfDataRecorder.exposeStatistics().size() >= 0);
    }
}
