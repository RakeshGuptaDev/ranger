/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package org.apache.ranger.plugin.store;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;

/**
* @generated by Cursor
* @description <Unit Test for PList class>
*/
@ExtendWith(MockitoExtension.class)
@TestMethodOrder(MethodOrderer.MethodName.class)
public class TestPList {
    @Test
    public void test01_defaultConstructorAndGetters() {
        PList<String> p = new PList<>();
        Assertions.assertEquals(0, p.getStartIndex());
        Assertions.assertEquals(0, p.getPageSize());
        Assertions.assertEquals(0, p.getTotalCount());
        Assertions.assertEquals(0, p.getResultSize());
        Assertions.assertNull(p.getSortType());
        Assertions.assertNull(p.getSortBy());
        Assertions.assertEquals(0, p.getListSize());
        Assertions.assertTrue(p.toString().contains("PList"));
    }

    @Test
    public void test02_paramConstructorAndSize() {
        List<String> list = new ArrayList<>(Arrays.asList("a", "b", "c"));
        PList<String> p = new PList<>(list, 1, 10, 3, 3, "asc", "name");
        Assertions.assertEquals(list, p.getList());
        Assertions.assertEquals(1, p.getStartIndex());
        Assertions.assertEquals(10, p.getPageSize());
        Assertions.assertEquals(3, p.getTotalCount());
        Assertions.assertEquals(3, p.getResultSize());
        Assertions.assertEquals("asc", p.getSortType());
        Assertions.assertEquals("name", p.getSortBy());
        Assertions.assertEquals(3, p.getListSize());
    }

    @Test
    public void test03_copyConstructorFromNull() {
        PList<String> p = new PList<>((PList<String>) null);
        Assertions.assertEquals(0, p.getStartIndex());
        Assertions.assertEquals(0, p.getPageSize());
        Assertions.assertEquals(0, p.getTotalCount());
        Assertions.assertEquals(0, p.getResultSize());
        Assertions.assertNull(p.getSortType());
        Assertions.assertNull(p.getSortBy());
        Assertions.assertEquals(0, p.getListSize());
    }

    @Test
    public void test04_settersAffectValues() {
        PList<Integer> p = new PList<>();
        p.setList(new ArrayList<>(Collections.singletonList(42)));
        p.setStartIndex(5);
        p.setPageSize(7);
        p.setTotalCount(11);
        p.setResultSize(1);
        p.setSortType("desc");
        p.setSortBy("id");
        p.setQueryTimeMS(123L);

        Assertions.assertEquals(1, p.getListSize());
        Assertions.assertEquals(5, p.getStartIndex());
        Assertions.assertEquals(7, p.getPageSize());
        Assertions.assertEquals(11, p.getTotalCount());
        Assertions.assertEquals(1, p.getResultSize());
        Assertions.assertEquals("desc", p.getSortType());
        Assertions.assertEquals("id", p.getSortBy());
        Assertions.assertEquals(123L, p.getQueryTimeMS());
    }
}
