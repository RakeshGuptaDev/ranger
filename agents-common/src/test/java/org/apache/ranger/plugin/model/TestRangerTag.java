/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package org.apache.ranger.plugin.model;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
* @generated by Cursor
* @description <Unit Test for RangerTag class>
*/
@TestMethodOrder(MethodOrderer.MethodName.class)
@ExtendWith(MockitoExtension.class)
public class TestRangerTag {
    @Test
    public void test01_constructorsAndSetters() {
        RangerTag tag = new RangerTag();
        tag.setGuid("g1");
        tag.setType("t1");
        tag.setOwner(RangerTag.OWNER_GLOBAL);
        Map<String, String> attrs = new HashMap<>();
        attrs.put("k", "v");
        tag.setAttributes(attrs);
        Map<String, Object> opts = new HashMap<>();
        opts.put(RangerTag.OPTION_TAG_VALIDITY_PERIODS, "true");
        tag.setOptions(opts);
        List<RangerValiditySchedule> vp = new ArrayList<>();
        vp.add(new RangerValiditySchedule());
        tag.setValidityPeriods(vp);

        Assertions.assertEquals("g1", tag.getGuid());
        Assertions.assertEquals("t1", tag.getType());
        Assertions.assertEquals(RangerTag.OWNER_GLOBAL, tag.getOwner());
        Assertions.assertEquals(attrs, tag.getAttributes());
        Assertions.assertEquals(opts, tag.getOptions());
        Assertions.assertEquals(vp, tag.getValidityPeriods());
    }

    @Test
    public void test02_dedupStringsAndToString() {
        Map<String, String> attrs = new HashMap<>();
        attrs.put("a", "b");
        Map<String, Object> opts = new HashMap<>();
        opts.put("x", "y");
        RangerTag tag = new RangerTag("g", "type", attrs, RangerTag.OWNER_SERVICERESOURCE, opts, null);

        Map<String, String> tbl = new HashMap<>();
        tbl.put("type", "type");
        int beforeSize = tbl.size();
        tag.dedupStrings(tbl);
        Assertions.assertTrue(tbl.size() >= beforeSize);

        String s = tag.toString();
        Assertions.assertTrue(s.contains("RangerTag={"));
        Assertions.assertTrue(s.contains("type={type}"));
    }

    @Test
    public void test03_equalsAndHashCode() {
        RangerTag t1 = new RangerTag("g", "type", new HashMap<>(), RangerTag.OWNER_SERVICERESOURCE, new HashMap<>(),
                new ArrayList<>());
        RangerTag t2 = new RangerTag("g", "type", new HashMap<>(), RangerTag.OWNER_SERVICERESOURCE, new HashMap<>(),
                new ArrayList<>());
        Assertions.assertEquals(t1, t2);
        Assertions.assertEquals(t1.hashCode(), t2.hashCode());

        t2.setType("type2");
        Assertions.assertNotEquals(t1, t2);
    }
}
