/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package org.apache.ranger.plugin.model;

import org.apache.ranger.plugin.util.ServiceTags;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
* @generated by Cursor
* @description <Unit Test for RangerServiceTags class>
*/
@ExtendWith(MockitoExtension.class)
@TestMethodOrder(MethodOrderer.MethodName.class)
public class TestRangerServiceTags {
    @Test
    public void test01_DefaultsAndSetters() {
        RangerServiceTags rst = new RangerServiceTags();
        Assertions.assertEquals(RangerServiceTags.OP_SET, rst.getOp());
        Assertions.assertNotNull(rst.getTagDefinitions());
        Assertions.assertNotNull(rst.getTags());
        Assertions.assertNotNull(rst.getServiceResources());
        Assertions.assertNotNull(rst.getResourceToTagIds());

        rst.setOp(RangerServiceTags.OP_REPLACE);
        rst.setServiceName("svc");
        rst.setTagVersion(5L);
        rst.setTagUpdateTime(new Date(0));

        Assertions.assertEquals(RangerServiceTags.OP_REPLACE, rst.getOp());
        Assertions.assertEquals("svc", rst.getServiceName());
        Assertions.assertEquals(5L, rst.getTagVersion());
        Assertions.assertEquals(new Date(0), rst.getTagUpdateTime());

        String s = rst.toString();
        Assertions.assertTrue(s.contains("RangerServiceTags={"));
    }

    @Test
    public void test02_ConvertToServiceTagsAndBack() {
        RangerServiceTags rst = new RangerServiceTags();
        rst.setOp(RangerServiceTags.OP_SET);
        rst.setServiceName("svc");
        rst.setTagVersion(10L);
        rst.setTagUpdateTime(new Date(1000));

        Map<Long, RangerTagDef> tagDefs = new HashMap<>();
        Map<Long, RangerTag> tags = new HashMap<>();
        List<RangerServiceResource> serviceResources = new ArrayList<>();
        Map<Long, List<Long>> r2t = new HashMap<>();

        rst.setTagDefinitions(tagDefs);
        rst.setTags(tags);
        rst.setServiceResources(serviceResources);
        rst.setResourceToTagIds(r2t);

        ServiceTags st = RangerServiceTags.toServiceTags(rst);
        Assertions.assertNotNull(st);
        Assertions.assertEquals(ServiceTags.OP_ADD_OR_UPDATE, st.getOp());
        Assertions.assertEquals("svc", st.getServiceName());
        Assertions.assertEquals(10L, st.getTagVersion());
        Assertions.assertEquals(new Date(1000), st.getTagUpdateTime());
        Assertions.assertSame(tagDefs, st.getTagDefinitions());
        Assertions.assertSame(tags, st.getTags());
        Assertions.assertSame(serviceResources, st.getServiceResources());
        Assertions.assertSame(r2t, st.getResourceToTagIds());

        RangerServiceTags rstBack = RangerServiceTags.toRangerServiceTags(st);
        Assertions.assertNotNull(rstBack);
        Assertions.assertEquals(RangerServiceTags.OP_SET, rstBack.getOp());
        Assertions.assertEquals("svc", rstBack.getServiceName());
        Assertions.assertEquals(10L, rstBack.getTagVersion());
        Assertions.assertEquals(new Date(1000), rstBack.getTagUpdateTime());
    }

    @Test
    public void test03_NullConversionsAndToStringBuilder() {
        Assertions.assertNull(RangerServiceTags.toServiceTags(null));
        Assertions.assertNull(RangerServiceTags.toRangerServiceTags((ServiceTags) null));

        RangerServiceTags rst = new RangerServiceTags();
        StringBuilder sb = new StringBuilder();
        StringBuilder out = rst.toString(sb);
        Assertions.assertSame(sb, out);
        Assertions.assertTrue(out.toString().contains("RangerServiceTags={"));
    }
}
