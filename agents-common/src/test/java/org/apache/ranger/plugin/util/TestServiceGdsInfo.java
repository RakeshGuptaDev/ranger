/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.apache.ranger.plugin.util;

import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertTrue;

/**
* @generated by Cursor
* @description <Unit Test for ServiceGdsInfo class>
*/
@ExtendWith(MockitoExtension.class)
@TestMethodOrder(MethodOrderer.MethodName.class)
public class TestServiceGdsInfo {
    @Test
    public void test01_defaultsAndSetters() {
        ServiceGdsInfo info = new ServiceGdsInfo();
        info.setServiceName("svc");
        info.setIsDelta(null); // should default to FALSE
        assertEquals(Boolean.FALSE, info.getIsDelta());
        assertEquals("svc", info.getServiceName());
    }

    @Test
    public void test02_addersInitializeCollections() {
        ServiceGdsInfo info = new ServiceGdsInfo();
        info.addDataShare(new ServiceGdsInfo.DataShareInfo());
        info.addResource(new ServiceGdsInfo.SharedResourceInfo());
        info.addDataset(new ServiceGdsInfo.DatasetInfo());
        info.addProject(new ServiceGdsInfo.ProjectInfo());
        info.addDataShareInDataset(new ServiceGdsInfo.DataShareInDatasetInfo());
        info.addDatasetInProjectInfo(new ServiceGdsInfo.DatasetInProjectInfo());
        assertTrue(info.getDataShares() != null && !info.getDataShares().isEmpty());
        assertTrue(info.getResources() != null && !info.getResources().isEmpty());
        assertTrue(info.getDatasets() != null && !info.getDatasets().isEmpty());
        assertTrue(info.getProjects() != null && !info.getProjects().isEmpty());
        assertTrue(info.getDshids() != null && !info.getDshids().isEmpty());
        assertTrue(info.getDips() != null && !info.getDips().isEmpty());
    }

    @Test
    public void test03_toStringAndDedupStrings_noExceptions() {
        ServiceGdsInfo info = new ServiceGdsInfo();
        assertNotNull(info.toString());
        info.dedupStrings();
    }

    @Test
    public void test04_toString_withPopulatedLists_and_isDeltaTrue() {
        ServiceGdsInfo info = new ServiceGdsInfo();
        info.setServiceName("svc");
        info.setIsDelta(Boolean.TRUE);

        // populate lists
        ServiceGdsInfo.DataShareInfo dsi = new ServiceGdsInfo.DataShareInfo();
        dsi.setId(1L);
        dsi.setName("ds");
        Set<String> access = new HashSet<>();
        access.add("read");
        dsi.setDefaultAccessTypes(access);
        info.addDataShare(dsi);

        ServiceGdsInfo.DatasetInfo di = new ServiceGdsInfo.DatasetInfo();
        di.setId(2L);
        di.setName("dataset");
        info.addDataset(di);

        ServiceGdsInfo.ProjectInfo pi = new ServiceGdsInfo.ProjectInfo();
        pi.setId(3L);
        pi.setName("project");
        info.addProject(pi);

        ServiceGdsInfo.DataShareInDatasetInfo dshid = new ServiceGdsInfo.DataShareInDatasetInfo();
        dshid.setDataShareId(1L);
        dshid.setDatasetId(2L);
        info.addDataShareInDataset(dshid);

        ServiceGdsInfo.DatasetInProjectInfo dip = new ServiceGdsInfo.DatasetInProjectInfo();
        dip.setDatasetId(2L);
        dip.setProjectId(3L);
        info.addDatasetInProjectInfo(dip);

        List<ServiceGdsInfo.ObjectChangeLog> logs = new ArrayList<>();
        logs.add(new ServiceGdsInfo.ObjectChangeLog(1, 2, 3));
        info.setDeltaLogs(logs);

        String s = info.toString();
        assertNotNull(s);
        assertTrue(s.contains("svc"));
        assertEquals(Boolean.TRUE, info.getIsDelta());
    }
}
