/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package org.apache.ranger.plugin.model;

import org.apache.ranger.plugin.model.RangerPrincipal.PrincipalType;
import org.apache.ranger.plugin.model.RangerSecurityZone.SecurityZoneSummary;
import org.apache.ranger.plugin.model.RangerSecurityZone.ZoneServiceSummary;
import org.apache.ranger.plugin.model.RangerSecurityZoneV2.RangerSecurityZoneResourceBase;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;

import java.util.ArrayList;
import java.util.HashMap;

/**
* @generated by Cursor
* @description <Unit Test for RangerSecurityZone class>
*/
@ExtendWith(MockitoExtension.class)
@TestMethodOrder(MethodOrderer.MethodName.class)
public class TestRangerSecurityZone {
    @Test
    public void test01_DefaultsAndSetters() {
        RangerSecurityZone zone = new RangerSecurityZone();
        Assertions.assertNotNull(zone.getServices());
        Assertions.assertNotNull(zone.getAdminUsers());
        Assertions.assertNotNull(zone.getAdminUserGroups());
        Assertions.assertNotNull(zone.getAuditUsers());
        Assertions.assertNotNull(zone.getAuditUserGroups());
        Assertions.assertNotNull(zone.getTagServices());

        zone.setName("zone1");
        zone.setDescription("desc");
        zone.setAdminRoles(new ArrayList<>());
        zone.setAuditRoles(new ArrayList<>());
        zone.setTagServices(new ArrayList<>());

        Assertions.assertEquals("zone1", zone.getName());
        Assertions.assertEquals("desc", zone.getDescription());

        String s = zone.toString();
        Assertions.assertTrue(s.contains("name=zone1"));
    }

    @Test
    public void test02_ServiceNestedToString() {
        RangerSecurityZone.RangerSecurityZoneService svc = new RangerSecurityZone.RangerSecurityZoneService();
        svc.setResources(new ArrayList<>());
        svc.setResourcesBaseInfo(new ArrayList<RangerSecurityZoneResourceBase>());
        String s = svc.toString();
        Assertions.assertTrue(s.startsWith("{resources=["));
    }

    @Test
    public void test03_SummaryNestedSetters() {
        SecurityZoneSummary summary = new SecurityZoneSummary();
        summary.setName("zn");
        summary.setDescription("desc");
        summary.setTotalResourceCount(5L);
        summary.setAdminCount(new HashMap<PrincipalType, Integer>());
        summary.setAuditorCount(new HashMap<PrincipalType, Integer>());
        summary.setTagServices(new ArrayList<String>());
        summary.setServices(new ArrayList<ZoneServiceSummary>());

        Assertions.assertEquals("zn", summary.getName());
        Assertions.assertEquals("desc", summary.getDescription());
        Assertions.assertEquals(5L, summary.getTotalResourceCount());

        ZoneServiceSummary zss = new ZoneServiceSummary();
        zss.setId(1L);
        zss.setName("svc");
        zss.setType("type");
        zss.setDisplayName("dn");
        zss.setResourceCount(7L);
        Assertions.assertEquals(1L, zss.getId());
        Assertions.assertEquals("svc", zss.getName());
        Assertions.assertEquals("type", zss.getType());
        Assertions.assertEquals("dn", zss.getDisplayName());
        Assertions.assertEquals(7L, zss.getResourceCount());
    }
}
