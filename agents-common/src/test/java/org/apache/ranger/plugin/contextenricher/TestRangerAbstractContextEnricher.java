/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package org.apache.ranger.plugin.contextenricher;

import org.apache.ranger.authorization.hadoop.config.RangerPluginConfig;
import org.apache.ranger.plugin.model.RangerServiceDef;
import org.apache.ranger.plugin.model.RangerServiceDef.RangerContextEnricherDef;
import org.apache.ranger.plugin.policyengine.RangerAccessRequest;
import org.apache.ranger.plugin.policyengine.RangerPluginContext;
import org.apache.ranger.plugin.policyengine.RangerPolicyEngineOptions;
import org.apache.ranger.plugin.service.RangerAuthContext;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;

import java.io.File;
import java.net.URL;
import java.nio.file.Files;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import java.util.Properties;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.doNothing;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;

/**
* @generated by Cursor
* @description <Unit Test for RangerAbstractContextEnricher class>
*/
@ExtendWith(MockitoExtension.class)
@TestMethodOrder(MethodOrderer.MethodName.class)
public class TestRangerAbstractContextEnricher {
    public static class DummyEnricher extends RangerAbstractContextEnricher {
        @Override
        public void enrich(RangerAccessRequest rangerAccessRequest) {
        }
    }

    @Test
    public void test01_Init_And_PreCleanup_With_AuthContext() {
        DummyEnricher enricher = new DummyEnricher();

        RangerAuthContext authContext = Mockito.mock(RangerAuthContext.class);
        doNothing().when(authContext).addOrReplaceRequestContextEnricher(any(RangerContextEnricher.class), any());
        doNothing().when(authContext).cleanupRequestContextEnricher(any(RangerContextEnricher.class));

        RangerPluginConfig  pluginConfig  = new RangerPluginConfig("hive", "svc", "appid", null, null, new RangerPolicyEngineOptions());
        RangerPluginContext pluginContext = Mockito.spy(new RangerPluginContext(pluginConfig));
        pluginContext.setAuthContext(authContext);

        enricher.setPluginContext(pluginContext);
        enricher.init();

        boolean ret = enricher.preCleanup();
        assertTrue(ret);
        verify(authContext, times(1)).cleanupRequestContextEnricher(enricher);
    }

    @Test
    public void test02_Init_With_Null_AuthContext() {
        DummyEnricher enricher = new DummyEnricher();

        RangerPluginConfig  pluginConfig  = new RangerPluginConfig("hive", "svc", "appid", null, null, new RangerPolicyEngineOptions());
        RangerPluginContext pluginContext = new RangerPluginContext(pluginConfig);
        // no authContext
        enricher.setPluginContext(pluginContext);

        enricher.init();
        boolean ret = enricher.preCleanup();
        assertTrue(ret);
    }

    @Test
    public void test03_Getters_Setters_And_GetName() {
        DummyEnricher enricher = new DummyEnricher();
        RangerContextEnricherDef def = new RangerContextEnricherDef(1L, "MyEnricher", DummyEnricher.class.getName(), new HashMap<>());
        enricher.setEnricherDef(def);
        enricher.setServiceName("svc");
        enricher.setServiceDef(new RangerServiceDef());
        enricher.setAppId("appid");

        assertEquals("MyEnricher", enricher.getName());
        assertEquals("svc", enricher.getServiceName());
        assertEquals("appid", enricher.getAppId());
        assertNotNull(enricher.getServiceDef());

        RangerPolicyEngineOptions opts = new RangerPolicyEngineOptions();
        opts.optimizeTagTrieForSpace = true;
        enricher.setPolicyEngineOptions(opts);
        assertEquals(opts, enricher.getPolicyEngineOptions());
    }

    @Test
    public void test04_Options_And_Config_Defaults() {
        DummyEnricher enricher = new DummyEnricher();
        Map<String, String> options = new HashMap<>();
        options.put("opt1", "val1");
        RangerContextEnricherDef def = new RangerContextEnricherDef(1L, "E", DummyEnricher.class.getName(), options);
        enricher.setEnricherDef(def);

        assertEquals("val1", enricher.getOption("opt1"));
        assertEquals("def", enricher.getOption("missing", "def"));
        assertTrue(enricher.getBooleanOption("missingBool", true));
        assertFalse(enricher.getBooleanOption("missingBool", false));
        assertEquals('x', enricher.getCharOption("missingChar", 'x'));
        assertEquals(42L, enricher.getLongOption("missingLong", 42L));

        // plugin config absent -> getConfig/int/bool should return defaults
        assertEquals("dflt", enricher.getConfig("x", "dflt"));
        assertEquals(7, enricher.getIntConfig("x", 7));
        assertTrue(enricher.getBooleanConfig("x", true));
    }

    @Test
    public void test05_GetPropertyPrefix_And_PluginConfig() {
        DummyEnricher enricher = new DummyEnricher();
        RangerServiceDef svcDef = new RangerServiceDef();
        svcDef.setName("svcType");
        enricher.setServiceDef(svcDef);

        // No plugin context
        assertEquals("ranger.plugin.svcType", enricher.getPropertyPrefix());

        RangerPluginConfig  pluginConfig  = new RangerPluginConfig("hive", "svc", "appid", null, null, new RangerPolicyEngineOptions());
        RangerPluginContext pluginContext = new RangerPluginContext(pluginConfig);
        enricher.setPluginContext(pluginContext);

        assertEquals(pluginConfig, enricher.getPluginConfig());
        assertEquals(pluginContext, enricher.getPluginContext());
        assertEquals(pluginConfig.getPropertyPrefix(), enricher.getPropertyPrefix());
    }

    @Test
    public void test06_ReadProperties_From_Resource_And_File() throws Exception {
        DummyEnricher enricher = new DummyEnricher();

        // Resource on classpath (use this test's class as reference): should return null for non-existent
        Properties noProps = enricher.readProperties("/non-existent-file.properties");
        assertNull(noProps);

        // Create a temp properties file and read
        File tmp = File.createTempFile("ranger-test", ".properties");
        Files.write(tmp.toPath(), Arrays.asList("key=value"));
        Properties props = enricher.readProperties(tmp.getAbsolutePath());
        assertNotNull(props);
        assertEquals("value", props.getProperty("key"));

        // Also verify resource loading via getResource (write to temp dir and use URL)
        URL url = tmp.toURI().toURL();
        assertNotNull(url);

        // cleanup
        //noinspection ResultOfMethodCallIgnored
        tmp.delete();
    }
}
