/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package org.apache.ranger.plugin.model;

import org.apache.ranger.plugin.model.RangerPolicy.RangerPolicyResource;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;

import java.util.HashMap;
import java.util.Map;

/**
* @generated by Cursor
* @description <Unit Test for RangerServiceResource class>
*/
@ExtendWith(MockitoExtension.class)
@TestMethodOrder(MethodOrderer.MethodName.class)
public class TestRangerServiceResource {
    @Test
    public void test01_SettersAndToString() {
        Map<String, RangerPolicyResource> elements = new HashMap<>();
        elements.put("db", new RangerPolicyResource("db1"));

        Map<String, String> addl = new HashMap<>();
        addl.put("k", "v");

        RangerServiceResource rsr = new RangerServiceResource("guid-1", "svc", elements, "sig", "owner", addl);

        Assertions.assertEquals("svc", rsr.getServiceName());
        Assertions.assertEquals("sig", rsr.getResourceSignature());
        Assertions.assertEquals("owner", rsr.getOwnerUser());
        Assertions.assertEquals(elements, rsr.getResourceElements());
        Assertions.assertEquals(addl, rsr.getAdditionalInfo());

        String s = rsr.toString();
        Assertions.assertTrue(s.contains("RangerServiceResource={"));
        Assertions.assertTrue(s.contains("serviceName={svc}"));
        Assertions.assertTrue(s.contains("resourceSignature={sig}"));
    }

    @Test
    public void test02_dedupStrings() {
        RangerServiceResource rsr = new RangerServiceResource();
        rsr.setServiceName(new String("svc"));
        rsr.setOwnerUser(new String("owner"));
        Map<String, RangerPolicyResource> elements = new HashMap<>();
        elements.put(new String("db"), new RangerPolicyResource("db1"));
        rsr.setResourceElements(elements);
        Map<String, String> addl = new HashMap<>();
        addl.put(new String("k"), new String("v"));
        rsr.setAdditionalInfo(addl);

        Map<String, String> tbl = new HashMap<>();
        rsr.dedupStrings(tbl);

        // ensure dedup runs without altering semantics
        Assertions.assertEquals("svc", rsr.getServiceName());
        Assertions.assertEquals("owner", rsr.getOwnerUser());
        Assertions.assertTrue(rsr.getResourceElements().containsKey("db"));
        Assertions.assertEquals("v", rsr.getAdditionalInfo().get("k"));
    }
}
