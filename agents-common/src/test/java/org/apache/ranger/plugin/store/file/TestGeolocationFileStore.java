/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package org.apache.ranger.plugin.store.file;

import org.apache.ranger.plugin.geo.RangerGeolocationData;
import org.apache.ranger.plugin.geo.RangerGeolocationDatabase;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;

import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertNotSame;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Assertions.assertSame;

/**
* @generated by Cursor
* @description <Unit Test for GeolocationFileStore class>
*/
@ExtendWith(MockitoExtension.class)
@TestMethodOrder(MethodOrderer.MethodName.class)
public class TestGeolocationFileStore {
    private static Path writeTempGeoFile(final List<String> lines) throws IOException {
        Path tmp = Files.createTempFile("geo", ".txt");
        Files.write(tmp, new ArrayList<>(lines), StandardCharsets.UTF_8);
        return tmp;
    }

    private static Map<String, String> newContext(final String filePath, final String forceRead, final String ipInDotFormat) {
        Map<String, String> ctx = new HashMap<>();
        if (filePath != null) {
            ctx.put(GeolocationFileStore.PROP_GEOLOCATION_FILE_LOCATION, filePath);
        }
        if (forceRead != null) {
            ctx.put(GeolocationFileStore.PROP_GEOLOCATION_FILE_REINIT, forceRead);
        }
        if (ipInDotFormat != null) {
            ctx.put(GeolocationFileStore.PROP_GEOLOCATION_IP_IN_DOT_FORMAT, ipInDotFormat);
        }
        return ctx;
    }

    @Test
    public void test01_init_usesDefaultPathWhenBlank_andLeavesDbNull() {
        GeolocationFileStore store = new GeolocationFileStore();
        Map<String, String> ctx = new HashMap<>();

        store.init(ctx);

        assertNull(store.getGeoDatabase());
    }

    @Test
    public void test02_init_buildsDatabaseFromExistingFile_andCachesWhenNoReinit() throws Exception {
        List<String> lines = new ArrayList<>();
        lines.add("# comment");
        lines.add("FROM_IP,TO_IP,COUNTRY_CODE,COUNTRY_NAME");
        lines.add("1.2.3.4,1.2.3.4,US,United States");
        Path file = writeTempGeoFile(lines);

        GeolocationFileStore store1 = new GeolocationFileStore();
        store1.init(newContext(file.toString(), "true", "true"));
        RangerGeolocationDatabase db1 = store1.getGeoDatabase();
        assertNotNull(db1);

        GeolocationFileStore store2 = new GeolocationFileStore();
        store2.init(newContext(file.toString(), "false", "true"));
        RangerGeolocationDatabase db2 = store2.getGeoDatabase();
        assertNotNull(db2);
        assertSame(db1, db2);

        RangerGeolocationData data = store2.getGeoLocation("1.2.3.4");
        assertNotNull(data);
        assertEquals("US", db2.getValue(data, "COUNTRY_CODE"));
    }

    @Test
    public void test03_init_withReinitializeTrue_rebuildsAndReplacesCache() throws Exception {
        List<String> lines = new ArrayList<>();
        lines.add("FROM_IP,TO_IP,COUNTRY_CODE,COUNTRY_NAME");
        lines.add("2.2.2.2,2.2.2.3,CA,Canada");
        Path file = writeTempGeoFile(lines);

        GeolocationFileStore storeA = new GeolocationFileStore();
        storeA.init(newContext(file.toString(), "true", "true"));
        RangerGeolocationDatabase dbA = storeA.getGeoDatabase();
        assertNotNull(dbA);

        // Modify file content to force a different DB instance on rebuild
        List<String> newLines = new ArrayList<>();
        newLines.add("FROM_IP,TO_IP,COUNTRY_CODE,COUNTRY_NAME");
        newLines.add("3.3.3.3,3.3.3.4,BR,Brazil");
        Files.write(file, newLines, StandardCharsets.UTF_8);

        GeolocationFileStore storeB = new GeolocationFileStore();
        storeB.init(newContext(file.toString(), "true", "true"));
        RangerGeolocationDatabase dbB = storeB.getGeoDatabase();
        assertNotNull(dbB);
        assertNotSame(dbA, dbB);

        assertNull(storeB.getGeoLocation("2.2.2.2"));
        assertNotNull(storeB.getGeoLocation("3.3.3.3"));
    }

    @Test
    public void test04_init_readsFromClasspathResource_whenFileNotPresent() {
        GeolocationFileStore store = new GeolocationFileStore();
        // Use the bundled sample resource path
        store.init(newContext("/etc/ranger/geo/geo.txt", "true", "true"));
        RangerGeolocationDatabase db = store.getGeoDatabase();
        assertNotNull(db);
        // Known range in the sample file
        RangerGeolocationData data = store.getGeoLocation("128.101.101.200");
        assertNotNull(data);
        assertEquals("US", db.getValue(data, "COUNTRY_CODE"));
    }

    @Test
    public void test05_build_returnsNull_onInvalidMetadata() throws Exception {
        List<String> lines = new ArrayList<>();
        lines.add("# header");
        lines.add("FROM_IP,TO_IP"); // invalid: fewer than 3 fields
        Path file = writeTempGeoFile(lines);

        GeolocationFileStore store = new GeolocationFileStore();
        RangerGeolocationDatabase db = store.build(file.toString());
        assertNull(db);
    }

    @Test
    public void test06_build_skipsInvalidDataAndEmptyLines_butSucceeds() throws Exception {
        List<String> lines = new ArrayList<>();
        lines.add("FROM_IP,TO_IP,COUNTRY_CODE");
        lines.add(""); // empty line -> split returns null, should be skipped
        lines.add("bad.ip,1.1.1.1,XX"); // invalid data line -> skipped
        lines.add("4.4.4.4,4.4.4.5,IN"); // valid
        Path file = writeTempGeoFile(lines);

        GeolocationFileStore store = new GeolocationFileStore();
        // ensure dot-notation is used during build
        store.init(newContext(file.toString(), "true", "true"));
        RangerGeolocationDatabase db = store.getGeoDatabase();
        assertNotNull(db);

        assertNull(db.find("4.4.4.3"));
        assertNotNull(db.find("4.4.4.4"));
        assertNotNull(db.find("4.4.4.5"));
        assertNull(db.find("4.4.4.6"));
    }

    @Test
    public void test07_getGeoLocation_returnsNull_whenDatabaseNotInitialized() {
        GeolocationFileStore store = new GeolocationFileStore();
        assertNull(store.getGeoLocation("1.1.1.1"));
    }

    @Test
    public void test08_getGeoLocation_returnsNull_whenIpNotFound() throws Exception {
        List<String> lines = new ArrayList<>();
        lines.add("FROM_IP,TO_IP,COUNTRY_CODE");
        lines.add("5.5.5.5,5.5.5.5,DE");
        Path file = writeTempGeoFile(lines);

        GeolocationFileStore store = new GeolocationFileStore();
        store.init(newContext(file.toString(), "true", "true"));
        assertNull(store.getGeoLocation("5.5.5.4"));
        assertNotNull(store.getGeoLocation("5.5.5.5"));
        assertNull(store.getGeoLocation("5.5.5.6"));
    }

    @Test
    public void test09_build_supportsNumericIps_whenDotFormatDisabled() throws Exception {
        // 3232235777 = 192.168.1.1, 3232235778 = 192.168.1.2
        List<String> lines = new ArrayList<>();
        lines.add("FROM_IP,TO_IP,COUNTRY_CODE");
        lines.add("3232235777,3232235778,US");
        Path file = writeTempGeoFile(lines);

        GeolocationFileStore store = new GeolocationFileStore();
        // Ensure useDotFormat is false before build
        store.init(newContext(file.toString(), "true", "false"));
        RangerGeolocationDatabase db = store.getGeoDatabase();
        assertNotNull(db);
        assertNotNull(store.getGeoLocation("192.168.1.1"));
        assertNotNull(store.getGeoLocation("192.168.1.2"));
        assertNull(store.getGeoLocation("192.168.1.3"));
    }

    @Test
    public void test10_getGeoDatabase_returnsCurrentInstance() throws Exception {
        List<String> lines = new ArrayList<>();
        lines.add("FROM_IP,TO_IP,COUNTRY_CODE");
        lines.add("7.7.7.7,7.7.7.7,CA");
        Path file = writeTempGeoFile(lines);

        GeolocationFileStore store = new GeolocationFileStore();
        store.init(newContext(file.toString(), "true", "true"));
        RangerGeolocationDatabase db = store.getGeoDatabase();
        assertNotNull(db);
        assertSame(db, store.getGeoDatabase());
    }

    @Test
    public void test11_init_reinitializeTrue_butBuildFails_retainsOldDatabase() throws Exception {
        List<String> lines = new ArrayList<>();
        lines.add("FROM_IP,TO_IP,COUNTRY_CODE");
        lines.add("8.8.8.8,8.8.8.8,US");
        Path file = writeTempGeoFile(lines);

        GeolocationFileStore store1 = new GeolocationFileStore();
        store1.init(newContext(file.toString(), "true", "true"));
        RangerGeolocationDatabase originalDb = store1.getGeoDatabase();
        assertNotNull(originalDb);
        assertNotNull(store1.getGeoLocation("8.8.8.8"));

        // Now corrupt the file so build() returns null (invalid metadata)
        List<String> bad = new ArrayList<>();
        bad.add("FROM_IP,TO_IP");
        Files.write(file, bad, StandardCharsets.UTF_8);

        GeolocationFileStore store2 = new GeolocationFileStore();
        store2.init(newContext(file.toString(), "true", "true"));
        RangerGeolocationDatabase retainedDb = store2.getGeoDatabase();
        assertNotNull(retainedDb);
        assertSame(originalDb, retainedDb);
        // Old data should still be available since rebuild failed
        assertNotNull(store2.getGeoLocation("8.8.8.8"));
    }
}
