/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.apache.ranger.plugin.util;

import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;

import java.util.concurrent.Callable;
import java.util.concurrent.TimeUnit;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;

/**
* @generated by Cursor
* @description <Unit Test for TimedEventUtil class>
*/
@ExtendWith(MockitoExtension.class)
@TestMethodOrder(MethodOrderer.MethodName.class)
public class TestTimedEventUtil {
    @Test
    public void test01_runWithTimeout_runsRunnable() throws Exception {
        final int[] counter = new int[] {0};
        Runnable r = () -> counter[0]++;
        TimedEventUtil.runWithTimeout(r, 100, TimeUnit.MILLISECONDS);
        assertEquals(1, counter[0]);
    }

    @Test
    public void test02_timedTask_returnsResult() throws Exception {
        Callable<String> c = () -> "ok";
        String result = TimedEventUtil.timedTask(c, 100, TimeUnit.MILLISECONDS);
        assertEquals("ok", result);
    }

    @Test
    public void test03_timedTask_throwsException() {
        Callable<String> c = () -> {
            throw new IllegalStateException("boom");
        };
        assertThrows(IllegalStateException.class, () -> TimedEventUtil.timedTask(c, 10, TimeUnit.MILLISECONDS));
    }
}
