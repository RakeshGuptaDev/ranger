/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package org.apache.ranger.plugin.store;

import org.apache.ranger.plugin.model.RangerPolicy;
import org.apache.ranger.plugin.model.RangerSecurityZone;
import org.apache.ranger.plugin.model.RangerService;
import org.apache.ranger.plugin.model.RangerServiceDef;
import org.apache.ranger.plugin.util.SearchFilter;
import org.apache.ranger.plugin.util.ServicePolicies;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Map;

/**
 * @generated by Cursor
 * @description <Unit Test for ServicePredicateUtil class>
 */
@ExtendWith(MockitoExtension.class)
@TestMethodOrder(MethodOrderer.MethodName.class)
public class TestServicePredicateUtil {
    private static class StubServiceStore implements ServiceStore {
        private final RangerService service;
        private final RangerService tagService;

        private StubServiceStore(RangerService service, RangerService tagService) {
            this.service = service;
            this.tagService = tagService;
        }

        @Override
        public void init() {
        }

        @Override
        public RangerServiceDef createServiceDef(RangerServiceDef serviceDef) {
            return null;
        }

        @Override
        public RangerServiceDef updateServiceDef(RangerServiceDef serviceDef) {
            return null;
        }

        @Override
        public void deleteServiceDef(Long id, Boolean forceDelete) {
        }

        @Override
        public void updateTagServiceDefForAccessTypes() {
        }

        @Override
        public RangerServiceDef getServiceDef(Long id) {
            return null;
        }

        @Override
        public RangerServiceDef getServiceDefByName(String name) {
            return null;
        }

        @Override
        public RangerServiceDef getServiceDefByDisplayName(String name) {
            return null;
        }

        @Override
        public List<RangerServiceDef> getServiceDefs(SearchFilter filter) {
            return null;
        }

        @Override
        public PList<RangerServiceDef> getPaginatedServiceDefs(SearchFilter filter) {
            return null;
        }

        @Override
        public RangerService createService(RangerService service) {
            return null;
        }

        @Override
        public RangerService updateService(RangerService service, Map<String, Object> options) {
            return null;
        }

        @Override
        public void deleteService(Long id) {
        }

        @Override
        public boolean serviceExists(String name) {
            return false;
        }

        @Override
        public RangerService getService(Long id) {
            return null;
        }

        @Override
        public RangerService getServiceByName(String name) {
            return name.equals(this.service.getName()) ? service
                    : tagService != null && name.equals(tagService.getName()) ? tagService : null;
        }

        @Override
        public RangerService getServiceByDisplayName(String displayName) {
            return null;
        }

        @Override
        public List<RangerService> getServices(SearchFilter filter) {
            return null;
        }

        @Override
        public PList<RangerService> getPaginatedServices(SearchFilter filter) {
            return null;
        }

        @Override
        public RangerPolicy createPolicy(RangerPolicy policy) {
            return null;
        }

        @Override
        public RangerPolicy createDefaultPolicy(RangerPolicy policy) {
            return null;
        }

        @Override
        public RangerPolicy updatePolicy(RangerPolicy policy) {
            return null;
        }

        @Override
        public void deletePolicy(RangerPolicy policy, RangerService service) {
        }

        @Override
        public void deletePolicy(RangerPolicy policy) {
        }

        @Override
        public boolean policyExists(Long id) {
            return false;
        }

        @Override
        public RangerPolicy getPolicy(Long id) {
            return null;
        }

        @Override
        public List<RangerPolicy> getPolicies(SearchFilter filter) {
            return null;
        }

        @Override
        public Long getPolicyId(Long serviceId, String policyName, Long zoneId) {
            return null;
        }

        @Override
        public PList<RangerPolicy> getPaginatedPolicies(SearchFilter filter) {
            return null;
        }

        @Override
        public List<RangerPolicy> getPoliciesByResourceSignature(String serviceName, String policySignature,
                Boolean isPolicyEnabled) {
            return null;
        }

        @Override
        public List<RangerPolicy> getServicePolicies(Long serviceId, SearchFilter filter) {
            return null;
        }

        @Override
        public PList<RangerPolicy> getPaginatedServicePolicies(Long serviceId, SearchFilter filter) {
            return null;
        }

        @Override
        public List<RangerPolicy> getServicePolicies(String serviceName, SearchFilter filter) {
            return null;
        }

        @Override
        public PList<RangerPolicy> getPaginatedServicePolicies(String serviceName, SearchFilter filter) {
            return null;
        }

        @Override
        public ServicePolicies getServicePoliciesIfUpdated(String serviceName, Long lastKnownVersion,
                boolean needsBackwardCompatibility) {
            return null;
        }

        @Override
        public Long getServicePolicyVersion(String serviceName) {
            return null;
        }

        @Override
        public ServicePolicies getServicePolicyDeltasOrPolicies(String serviceName, Long lastKnownVersion) {
            return null;
        }

        @Override
        public ServicePolicies getServicePolicyDeltas(String serviceName, Long lastKnownVersion,
                Long cachedPolicyVersion) {
            return null;
        }

        @Override
        public ServicePolicies getServicePolicies(String serviceName, Long lastKnownVersion) {
            return null;
        }

        @Override
        public RangerPolicy getPolicyFromEventTime(String eventTimeStr, Long policyId) {
            return null;
        }

        @Override
        public Boolean getPopulateExistingBaseFields() {
            return null;
        }

        @Override
        public void setPopulateExistingBaseFields(Boolean populateExistingBaseFields) {
        }

        @Override
        public RangerSecurityZone getSecurityZone(Long id) {
            return null;
        }

        @Override
        public RangerSecurityZone getSecurityZone(String name) {
            return null;
        }

        @Override
        public long getPoliciesCount(String serviceName) {
            return 0;
        }

        @Override
        public Map<String, String> getServiceConfigForPlugin(Long serviceId) {
            return null;
        }

        @Override
        public List<RangerPolicy> getPoliciesWithMetaAttributes(List<RangerPolicy> policies) {
            return null;
        }
    }

    @Test
    public void test01_filterByServiceTypeAndId_and_policyObjects() {
        RangerService svc = new RangerService();
        svc.setId(100L);
        svc.setName("svc1");
        svc.setType("hive");

        ServicePredicateUtil util = new ServicePredicateUtil(new StubServiceStore(svc, null));

        RangerPolicy pol = new RangerPolicy();
        pol.setService("svc1");
        List<RangerPolicy> list = new ArrayList<>(Collections.singletonList(pol));
        SearchFilter f = new SearchFilter();
        f.setParam(SearchFilter.SERVICE_TYPE, "hive");
        f.setParam(SearchFilter.SERVICE_ID, "100");
        util.applyFilter(list, f);
        Assertions.assertEquals(1, list.size());
    }

    @Test
    public void test02_filterByServiceObjectsAndTagServicePredicates() {
        RangerService svc = new RangerService();
        svc.setId(1L);
        svc.setName("svcA");
        svc.setType("kafka");
        svc.setTagService("tagSvc");

        RangerService tagSvc = new RangerService();
        tagSvc.setId(55L);
        tagSvc.setName("tagSvc");
        tagSvc.setType("tag");

        ServicePredicateUtil util = new ServicePredicateUtil(new StubServiceStore(svc, tagSvc));

        List<RangerService> list = new ArrayList<>(Collections.singletonList(svc));
        SearchFilter f = new SearchFilter();
        f.setParam(SearchFilter.SERVICE_TYPE, "kafka");
        f.setParam(SearchFilter.TAG_SERVICE_NAME, "tagSvc");
        f.setParam(SearchFilter.TAG_SERVICE_ID, "55");
        util.applyFilter(list, f);
        Assertions.assertEquals(1, list.size());
    }
}
