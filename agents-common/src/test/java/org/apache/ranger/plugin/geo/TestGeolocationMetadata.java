/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package org.apache.ranger.plugin.geo;

import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Assertions.assertTrue;

/**
* @generated by Cursor
* @description <Unit Test for GeolocationMetadata class>
*/
@ExtendWith(MockitoExtension.class)
@TestMethodOrder(MethodOrderer.MethodName.class)
public class TestGeolocationMetadata {
    @Test
    public void test01_create_valid() {
        String[] fields = new String[] {"FROM", "TO", "Country", "Region", "City"};
        GeolocationMetadata md = GeolocationMetadata.create(fields, 0);
        assertNotNull(md);
        assertEquals(3, md.getLocationDataItemNames().length);
        assertEquals(0, md.getDataItemNameIndex("Country"));
        assertEquals(1, md.getDataItemNameIndex("Region"));
        assertEquals(2, md.getDataItemNameIndex("City"));
    }

    @Test
    public void test02_create_insufficient_returnsNull() {
        String[] fields = new String[] {"FROM", "TO"};
        GeolocationMetadata md = GeolocationMetadata.create(fields, 10);
        assertNull(md);
    }

    @Test
    public void test03_getDataItemNameIndex_blankOrAbsent() {
        String[] fields = new String[] {"FROM", "TO", "Country"};
        GeolocationMetadata md = GeolocationMetadata.create(fields, 1);
        assertEquals(-1, md.getDataItemNameIndex(""));
        assertEquals(-1, md.getDataItemNameIndex("Missing"));
    }

    @Test
    public void test04_toString_containsHeadersAndNames() {
        String[] fields = new String[] {"FROM", "TO", "Country", "Region"};
        GeolocationMetadata md = GeolocationMetadata.create(fields, 1);
        String s = md.toString();
        assertTrue(s.contains("FROM_IP,TO_IP,"));
        assertTrue(s.contains("Country"));
        assertTrue(s.contains("Region"));
    }
}
