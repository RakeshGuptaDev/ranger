/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package org.apache.ranger.plugin.model;

import org.apache.ranger.plugin.model.RangerPolicy.RangerPolicyResource;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;

import java.util.HashMap;
import java.util.Map;

/**
* @generated by Cursor
* @description <Unit Test for RangerPolicyHeader class>
*/
@ExtendWith(MockitoExtension.class)
@TestMethodOrder(MethodOrderer.MethodName.class)
public class TestRangerPolicyHeader {
    @Test
    public void test01_ConstructFromPolicyAndToString() {
        RangerPolicy p = new RangerPolicy();
        p.setId(5L);
        p.setGuid("G");
        p.setName("name");
        p.setIsEnabled(Boolean.TRUE);
        p.setService("svc");
        p.setVersion(2L);
        p.setPolicyType(1);
        p.setZoneName("zone");
        Map<String, RangerPolicyResource> res = new HashMap<>();
        res.put("db", new RangerPolicyResource("db1"));
        p.setResources(res);

        RangerPolicyHeader hdr = new RangerPolicyHeader(p);
        Assertions.assertEquals("svc", hdr.getService());
        Assertions.assertEquals("name", hdr.getName());
        Assertions.assertEquals(1, hdr.getPolicyType());
        Assertions.assertEquals("zone", hdr.getZoneName());
        Assertions.assertTrue(hdr.getResources().containsKey("db"));

        StringBuilder sb = new StringBuilder();
        hdr.toString(sb);
        String s = sb.toString();
        Assertions.assertTrue(s.contains("id={5}"));
        Assertions.assertTrue(s.contains("guid={G}"));
        Assertions.assertTrue(s.contains("name={name}"));
        Assertions.assertTrue(s.contains("service={svc}"));
        Assertions.assertTrue(s.contains("policyType={1}"));
        Assertions.assertTrue(s.contains("zoneName={zone}"));
    }

    @Test
    public void test02_SetResourcesDefensiveCopy() {
        RangerPolicyHeader hdr = new RangerPolicyHeader(new RangerPolicy());
        Map<String, RangerPolicyResource> res = new HashMap<>();
        res.put("a", new RangerPolicyResource("v"));
        hdr.setResources(res);
        Assertions.assertTrue(hdr.getResources().containsKey("a"));
        res.clear();
        Assertions.assertTrue(hdr.getResources().containsKey("a"));
    }
}
