/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package org.apache.ranger.plugin.model;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;

import java.util.Date;
import java.util.HashMap;

/**
* @generated by Cursor
* @description <Unit Test for RangerPluginInfo class>
*/
@ExtendWith(MockitoExtension.class)
@TestMethodOrder(MethodOrderer.MethodName.class)
public class TestRangerPluginInfo {
    @Test
    public void test01_InfoMapDefaultingAndToString() {
        RangerPluginInfo info = new RangerPluginInfo();
        Assertions.assertNotNull(info.getInfo());

        info.setInfo(null);
        Assertions.assertNotNull(info.getInfo());

        info.setServiceName("svc");
        info.setServiceDisplayName("svc-dn");
        info.setServiceType("type");
        info.setServiceTypeDisplayName("type-dn");
        info.setHostName("host");
        info.setAppType("app");
        info.setIpAddress("1.2.3.4");
        info.setId(10L);
        Date now = new Date();
        info.setCreateTime(now);
        info.setUpdateTime(now);

        String s = info.toString();
        Assertions.assertNotNull(s);
        Assertions.assertTrue(s.contains("serviceName={svc}"));
        Assertions.assertTrue(s.contains("serviceType={type}"));
        Assertions.assertTrue(s.contains("hostName={host}"));
    }

    @Test
    public void test02_PolicyFields() {
        RangerPluginInfo info = new RangerPluginInfo();
        Assertions.assertNull(info.getPolicyDownloadTime());
        Assertions.assertNull(info.getPolicyDownloadedVersion());
        Assertions.assertNull(info.getPolicyActivationTime());
        Assertions.assertNull(info.getPolicyActiveVersion());

        info.setPolicyDownloadTime(100L);
        info.setPolicyDownloadedVersion(2L);
        info.setPolicyActivationTime(200L);
        info.setPolicyActiveVersion(3L);

        Assertions.assertEquals(100L, info.getPolicyDownloadTime());
        Assertions.assertEquals(2L, info.getPolicyDownloadedVersion());
        Assertions.assertEquals(200L, info.getPolicyActivationTime());
        Assertions.assertEquals(3L, info.getPolicyActiveVersion());

        // ensure underlying map stores strings
        Assertions.assertInstanceOf(String.class, info.getInfo().get(RangerPluginInfo.PLUGIN_INFO_POLICY_DOWNLOAD_TIME));
    }

    @Test
    public void test03_TagFields() {
        RangerPluginInfo info = new RangerPluginInfo();
        info.setTagDownloadTime(10L);
        info.setTagDownloadedVersion(20L);
        info.setTagActivationTime(30L);
        info.setTagActiveVersion(40L);

        Assertions.assertEquals(10L, info.getTagDownloadTime());
        Assertions.assertEquals(20L, info.getTagDownloadedVersion());
        Assertions.assertEquals(30L, info.getTagActivationTime());
        Assertions.assertEquals(40L, info.getTagActiveVersion());
    }

    @Test
    public void test04_RoleFields() {
        RangerPluginInfo info = new RangerPluginInfo();
        info.setRoleDownloadTime(11L);
        info.setRoleDownloadedVersion(22L);
        info.setRoleActivationTime(33L);
        info.setRoleActiveVersion(44L);

        Assertions.assertEquals(11L, info.getRoleDownloadTime());
        Assertions.assertEquals(22L, info.getRoleDownloadedVersion());
        Assertions.assertEquals(33L, info.getRoleActivationTime());
        Assertions.assertEquals(44L, info.getRoleActiveVersion());
    }

    @Test
    public void test05_UserStoreFields() {
        RangerPluginInfo info = new RangerPluginInfo();
        info.setUserStoreDownloadTime(111L);
        info.setUserStoreDownloadedVersion(222L);
        info.setUserStoreActivationTime(333L);
        info.setUserStoreActiveVersion(444L);

        Assertions.assertEquals(111L, info.getUserStoreDownloadTime());
        Assertions.assertEquals(222L, info.getUserStoreDownloadedVersion());
        Assertions.assertEquals(333L, info.getUserStoreActivationTime());
        Assertions.assertEquals(444L, info.getUserStoreActiveVersion());
    }

    @Test
    public void test06_GdsFieldsAndCapabilities() {
        RangerPluginInfo info = new RangerPluginInfo();
        info.setGdsDownloadTime(5L);
        info.setGdsDownloadedVersion(6L);
        info.setGdsActivationTime(7L);
        info.setGdsActiveVersion(8L);

        Assertions.assertEquals(5L, info.getGdsDownloadTime());
        Assertions.assertEquals(6L, info.getGdsDownloadedVersion());
        Assertions.assertEquals(7L, info.getGdsActivationTime());
        Assertions.assertEquals(8L, info.getGdsActiveVersion());

        // capabilities store raw strings and return null on blank
        info.setPluginCapabilities("cap1,cap2");
        info.setAdminCapabilities("capA");
        Assertions.assertEquals("cap1,cap2", info.getPluginCapabilities());
        Assertions.assertEquals("capA", info.getAdminCapabilities());

        info.setInfo(new HashMap<>());
        Assertions.assertNull(info.getPluginCapabilities());
        Assertions.assertNull(info.getAdminCapabilities());
    }
}
