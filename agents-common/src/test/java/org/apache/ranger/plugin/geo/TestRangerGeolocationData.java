/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package org.apache.ranger.plugin.geo;

import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Assertions.assertTrue;

/**
* @generated by Cursor
* @description <Unit Test for RangerGeolocationData class>
*/
@ExtendWith(MockitoExtension.class)
@TestMethodOrder(MethodOrderer.MethodName.class)
public class TestRangerGeolocationData {
    @Test
    public void test01_create_withDotFormat_validRange() {
        String[] fields = new String[] {"1.1.1.1", "1.1.1.10", "US", "CA"};
        RangerGeolocationData data = RangerGeolocationData.create(fields, 0, true);
        assertNotNull(data);
        assertEquals(0, data.compareToRange(RangerGeolocationData.ipAddressToLong("1.1.1.5")));
        assertTrue(data.compareToRange(RangerGeolocationData.ipAddressToLong("1.1.1.0")) > 0);
        assertTrue(data.compareToRange(RangerGeolocationData.ipAddressToLong("1.1.1.11")) < 0);
        assertEquals(2, data.getLocationData().length);
    }

    @Test
    public void test02_create_withNumericFormat_validRange() {
        // 10.0.0.1 -> 167772161, 10.0.0.10 -> 167772170
        String[] fields = new String[] {"167772161", "167772170", "IN", "KA"};
        RangerGeolocationData data = RangerGeolocationData.create(fields, 3, false);
        assertNotNull(data);
        assertEquals(0, data.compareToRange(RangerGeolocationData.ipAddressToLong("10.0.0.5")));
    }

    @Test
    public void test03_create_insufficientFields_returnsNull() {
        String[] fields = new String[] {"1.1.1.1", "1.1.1.2"};
        RangerGeolocationData data = RangerGeolocationData.create(fields, 1, true);
        assertNull(data);
    }

    @Test
    public void test04_ipAddressToLong_and_unsignedIntToIPAddress_roundTrip() {
        long val1 = RangerGeolocationData.ipAddressToLong("10.0.0.1");
        assertEquals(167772161L, val1);
        String dotted1 = RangerGeolocationData.unsignedIntToIPAddress(val1);
        assertEquals("10.0.0.1", dotted1);

        long val2 = RangerGeolocationData.ipAddressToLong("192.168.1.1");
        assertTrue(val2 < 0);
        String dotted2 = RangerGeolocationData.unsignedIntToIPAddress(3232235777L);
        assertEquals("192.168.1.1", dotted2);
    }

    @Test
    public void test05_unsignedIntToIPAddress_zeroOrNegative_returnsEmpty() {
        assertEquals("", RangerGeolocationData.unsignedIntToIPAddress(0));
        assertEquals("", RangerGeolocationData.unsignedIntToIPAddress(-10));
    }

    @Test
    public void test06_validateAsIP_dotNotationAndNumeric() {
        assertTrue(RangerGeolocationData.validateAsIP("8.8.8.8", true));
        assertFalse(RangerGeolocationData.validateAsIP("999.999.999.999", true));
        assertTrue(RangerGeolocationData.validateAsIP("123456", false));
        assertFalse(RangerGeolocationData.validateAsIP("12a34", false));
    }

    @Test
    public void test07_ipAddressToLong_invalidReturnsZero() {
        assertEquals(0L, RangerGeolocationData.ipAddressToLong("not.an.ip"));
        // IPv6 returns 0 as bytes length > 4
        assertEquals(0L, RangerGeolocationData.ipAddressToLong("2001:db8::1"));
    }

    @Test
    public void test08_compareTo_variousDifferences() {
        RangerGeolocationData a = RangerGeolocationData.create(new String[] {"1.1.1.1", "1.1.1.5", "US", null}, 0, true);
        RangerGeolocationData b = RangerGeolocationData.create(new String[] {"1.1.1.1", "1.1.1.5", "US", null}, 0, true);
        RangerGeolocationData c = RangerGeolocationData.create(new String[] {"1.1.1.2", "1.1.1.6", "US", null}, 0, true);
        RangerGeolocationData d = RangerGeolocationData.create(new String[] {"1.1.1.1", "1.1.1.6", "US", null}, 0, true);
        RangerGeolocationData e = RangerGeolocationData.create(new String[] {"1.1.1.1", "1.1.1.5", "US"}, 0, true);
        RangerGeolocationData f = RangerGeolocationData.create(new String[] {"1.1.1.1", "1.1.1.5", "US", "AA"}, 0, true);

        assertTrue(a.compareTo(null) > 0);
        assertEquals(0, a.compareTo(b));
        assertTrue(a.compareTo(c) < 0);
        assertTrue(a.compareTo(d) < 0);
        assertTrue(a.compareTo(e) > 0);
        assertTrue(a.compareTo(f) != 0);
    }

    @Test
    public void test09_equals_and_hashCode_caching() {
        RangerGeolocationData a = RangerGeolocationData.create(new String[] {"2.2.2.2", "2.2.2.3", "X"}, 0, true);
        RangerGeolocationData b = RangerGeolocationData.create(new String[] {"2.2.2.2", "2.2.2.3", "X"}, 0, true);
        assertTrue(a.equals(b));
        assertEquals(a.hashCode(), b.hashCode());
        int first = a.hashCode();
        int second = a.hashCode();
        assertEquals(first, second);
    }

    @Test
    public void test10_toString_containsFromToAndLocation() {
        RangerGeolocationData a = RangerGeolocationData.create(new String[] {"3.3.3.3", "3.3.3.4", "Y", "Z"}, 0, true);
        String s = a.toString();
        assertTrue(s.contains("from=3.3.3.3"));
        assertTrue(s.contains("to=3.3.3.4"));
        assertTrue(s.contains("Y"));
        assertTrue(s.contains("Z"));
    }
}
