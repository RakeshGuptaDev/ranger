/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package org.apache.ranger.plugin.contextenricher;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonParseException;
import org.apache.ranger.plugin.contextenricher.TestRangerTagEnricher.TagEnricherTestCase.TestData;
import org.apache.ranger.plugin.model.RangerPolicy.RangerPolicyResource;
import org.apache.ranger.plugin.model.RangerServiceDef;
import org.apache.ranger.plugin.model.RangerServiceDef.RangerContextEnricherDef;
import org.apache.ranger.plugin.model.RangerServiceDef.RangerResourceDef;
import org.apache.ranger.plugin.model.RangerServiceResource;
import org.apache.ranger.plugin.model.RangerTag;
import org.apache.ranger.plugin.model.RangerTagDef;
import org.apache.ranger.plugin.policyengine.RangerAccessRequestImpl;
import org.apache.ranger.plugin.policyengine.RangerAccessResource;
import org.apache.ranger.plugin.policyengine.RangerAccessResourceImpl;
import org.apache.ranger.plugin.policyengine.RangerMutableResource;
import org.apache.ranger.plugin.policyengine.RangerResourceTrie;
import org.apache.ranger.plugin.policyresourcematcher.RangerPolicyResourceMatcher;
import org.apache.ranger.plugin.policyresourcematcher.RangerPolicyResourceMatcher.MatchType;
import org.apache.ranger.plugin.util.DownloadTrigger;
import org.apache.ranger.plugin.util.RangerAccessRequestUtil;
import org.apache.ranger.plugin.util.RangerServiceTagsDeltaUtil;
import org.apache.ranger.plugin.util.ServiceTags;
import org.junit.jupiter.api.AfterAll;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;

import java.io.InputStream;
import java.io.InputStreamReader;
import java.lang.reflect.Method;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertNotSame;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Assertions.assertSame;
import static org.junit.jupiter.api.Assertions.assertTrue;

/**
* @generated by Cursor
* @description <Unit Test for RangerTagEnricher class>
*/
@ExtendWith(MockitoExtension.class)
@TestMethodOrder(MethodOrderer.MethodName.class)
public class TestRangerTagEnricher {
    static Gson gsonBuilder;

    @BeforeAll
    public static void setUpBeforeClass() throws Exception {
        gsonBuilder = new GsonBuilder().setDateFormat("yyyyMMdd-HH:mm:ss.SSS-Z")
                .setPrettyPrinting()
                .registerTypeAdapter(RangerAccessResource.class, new RangerResourceDeserializer())
                .create();
    }

    @AfterAll
    public static void tearDownAfterClass() throws Exception {
    }

    @Test
    public void test01_RangerTagsForEvalSort() {
        List<MatchType> matchTypes = new ArrayList<>();

        matchTypes.add(null);
        matchTypes.add(MatchType.NONE);
        matchTypes.add(MatchType.DESCENDANT);
        matchTypes.add(MatchType.ANCESTOR);
        matchTypes.add(MatchType.SELF_AND_ALL_DESCENDANTS);
        matchTypes.add(MatchType.SELF);

        matchTypes.sort(RangerPolicyResourceMatcher.MATCH_TYPE_COMPARATOR);

        assertEquals(matchTypes.get(0), MatchType.SELF);
        assertEquals(matchTypes.get(1), MatchType.SELF_AND_ALL_DESCENDANTS);
        assertEquals(matchTypes.get(2), MatchType.ANCESTOR);
        assertEquals(matchTypes.get(3), MatchType.DESCENDANT);
        assertEquals(matchTypes.get(4), MatchType.NONE);
        assertNull(matchTypes.get(5));
    }

    @Test
    public void test02_TagEnricher_hive() {
        String[] hiveTestResourceFiles = {"/contextenricher/test_tagenricher_hive.json"};

        runTestsFromResourceFiles(hiveTestResourceFiles);
    }

    private void runTestsFromResourceFiles(String[] resourceNames) {
        for (String resourceName : resourceNames) {
            InputStream       inStream = this.getClass().getResourceAsStream(resourceName);
            InputStreamReader reader   = new InputStreamReader(inStream);

            runTests(reader, resourceName);
        }
    }

    private void runTests(InputStreamReader reader, String testName) {
        TagEnricherTestCase testCase = gsonBuilder.fromJson(reader, TagEnricherTestCase.class);

        assertTrue(testCase != null && testCase.serviceDef != null && testCase.serviceResources != null && testCase.tests != null, testName);

        ServiceTags serviceTags = new ServiceTags();
        serviceTags.setServiceName(testCase.serviceName);
        serviceTags.setTagDefinitions(testCase.tagDefinitions);
        serviceTags.setTags(testCase.tags);
        serviceTags.setServiceResources(testCase.serviceResources);
        serviceTags.setResourceToTagIds(testCase.resourceToTagIds);

        RangerTagEnricher tagEnricher = new RangerTagEnricher();

        tagEnricher.setServiceName(testCase.serviceName);
        tagEnricher.setServiceDef(testCase.serviceDef);
        tagEnricher.init();
        tagEnricher.setServiceTags(serviceTags);

        List<String> expectedTags = new ArrayList<>();
        List<String> resultTags   = new ArrayList<>();

        for (TestData test : testCase.tests) {
            RangerAccessRequestImpl request = new RangerAccessRequestImpl(test.resource, test.accessType, "testUser", null, null);

            ((RangerMutableResource) request.getResource()).setServiceDef(testCase.serviceDef);
            tagEnricher.enrich(request);

            List<RangerTag> expected = test.result;

            Set<RangerTagForEval> result = RangerAccessRequestUtil.getRequestTagsFromContext(request.getContext());

            expectedTags.clear();
            if (expected != null) {
                for (RangerTag tag : expected) {
                    expectedTags.add(tag.getType());
                }
                Collections.sort(expectedTags);
            }

            resultTags.clear();
            if (result != null) {
                for (RangerTagForEval tag : result) {
                    resultTags.add(tag.getType());
                }
                Collections.sort(resultTags);
            }

            assertEquals(expectedTags, resultTags, test.name);
        }
    }

    @Test
    public void test03_Init_WithMissingRetrieverName_LogsError_NoCrash() {
        RangerTagEnricher enricher = new RangerTagEnricher();
        RangerServiceDef def = new RangerServiceDef();
        def.setName("svcType");
        enricher.setServiceName("svc");
        enricher.setServiceDef(def);
        enricher.setAppId("app");

        RangerContextEnricherDef ed = new RangerContextEnricherDef();
        ed.setName("tags");
        ed.setEnricherOptions(Collections.emptyMap());
        enricher.setEnricherDef(ed);

        enricher.init();
        assertTrue(true);
    }

    @Test
    public void test04_SetServiceTags_Null_ClearsAndKeepsVersionMinusOne() {
        RangerTagEnricher enricher = new RangerTagEnricher();
        RangerServiceDef def = minimalSvcDef();
        enricher.setServiceName("svc");
        enricher.setServiceDef(def);
        enricher.init();

        assertEquals(-1L, enricher.getServiceTagsVersion());
        enricher.setServiceTags(null);
        assertEquals(-1L, enricher.getServiceTagsVersion());
    }

    @Test
    public void test05_SetServiceTags_NoResources_ReturnsNullEnriched() {
        RangerTagEnricher enricher = new RangerTagEnricher();
        RangerServiceDef def = minimalSvcDef();
        enricher.setServiceName("svc");
        enricher.setServiceDef(def);
        enricher.init();

        ServiceTags tags = new ServiceTags();
        tags.setServiceName("svc");
        tags.setIsDelta(false);
        tags.setTagVersion(1L);

        enricher.setServiceTags(tags);
        assertEquals(-1L, enricher.getServiceTagsVersion());
    }

    @Test
    public void test06_SetServiceTags_DisableTrieLookupPrefilter_BuildsMatchersOnly() {
        RangerTagEnricher enricher = new RangerTagEnricher();
        RangerServiceDef def = minimalSvcDef();
        enricher.setServiceName("svc");
        enricher.setServiceDef(def);
        enricher.init();

        ServiceTags tags = makeServiceTagsWithOneResource(def);
        enricher.setServiceTags(tags);
        assertEquals(1L, enricher.getServiceTagsVersion());
        assertNotNull(enricher.getEnrichedServiceTags());
    }

    @Test
    public void test07_SetServiceTags_Delta_NoChange_UsesExisting() {
        RangerTagEnricher enricher = new RangerTagEnricher();
        RangerServiceDef def = minimalSvcDef();
        enricher.setServiceName("svc");
        enricher.setServiceDef(def);
        enricher.init();

        ServiceTags base = makeServiceTagsWithOneResource(def);
        enricher.setServiceTags(base);
        assertEquals(1L, enricher.getServiceTagsVersion());

        ServiceTags delta = new ServiceTags();
        delta.setServiceName("svc");
        delta.setIsDelta(true);
        delta.setTagsChangeExtent(ServiceTags.TagsChangeExtent.NONE);
        delta.setTagVersion(2L);

        enricher.setServiceTags(delta);
        // For NONE extent, implementation retains existing enriched tags/version
        assertEquals(1L, enricher.getServiceTagsVersion());
    }

    @Test
    public void test08_PreCleanup_CancelsTimer_And_StopsRefresher() {
        RangerTagEnricher enricher = new RangerTagEnricher();
        RangerServiceDef def = minimalSvcDef();
        enricher.setServiceName("svc");
        enricher.setServiceDef(def);
        enricher.init();

        assertTrue(enricher.preCleanup());
    }

    @Test
    public void test09_Enrich_With_Incorrect_DataStore_Fallbacks() {
        RangerTagEnricher enricher = new RangerTagEnricher();
        RangerServiceDef def = minimalSvcDef();
        enricher.setServiceName("svc");
        enricher.setServiceDef(def);
        enricher.init();

        ServiceTags tags = makeServiceTagsWithOneResource(def);
        enricher.setServiceTags(tags);

        RangerAccessResourceImpl res = new RangerAccessResourceImpl();
        res.setServiceDef(def);
        res.setValue("db", Arrays.asList("sales"));
        RangerAccessRequestImpl req = new RangerAccessRequestImpl();
        req.setResource(res);

        enricher.enrich(req, new Object());
        assertNotNull(RangerAccessRequestUtil.getRequestTagsFromContext(req.getContext()));
    }

    @Test
    public void test10_SyncTagsWithAdmin_WaitsUntilSignaled() throws Exception {
        RangerTagEnricher enricher = new RangerTagEnricher();
        DownloadTrigger token = new DownloadTrigger();

        Thread signaller = new Thread(() -> {
            try {
                Thread.sleep(50L);
            } catch (InterruptedException ignored) {
            }
            token.signalCompletion();
        });
        signaller.start();

        enricher.syncTagsWithAdmin(token);
        signaller.join(2000L);
        assertTrue(!signaller.isAlive());
    }

    @Test
    public void test11_GetResourceTrieVersion_BeforeAndAfterSet() {
        RangerTagEnricher enricher = new RangerTagEnricher();
        RangerServiceDef def = minimalSvcDef();
        enricher.setServiceName("svc");
        enricher.setServiceDef(def);
        enricher.init();

        assertEquals(-1L, enricher.getResourceTrieVersion());

        ServiceTags tags = makeServiceTagsWithOneResource(def);
        enricher.setServiceTags(tags);
        assertEquals(1L, enricher.getResourceTrieVersion());
    }

    @Test
    public void test12_CopyServiceResourceTrie_ReturnsDeepCopy() throws Exception {
        RangerTagEnricher enricher = new RangerTagEnricher();
        RangerServiceDef def = minimalSvcDef();
        enricher.setServiceName("svc");
        enricher.setServiceDef(def);
        enricher.init();

        ServiceTags tags = makeServiceTagsWithOneResource(def);
        enricher.setServiceTags(tags);
        assertNotNull(enricher.getEnrichedServiceTags());

        Method mCopy = RangerTagEnricher.class.getDeclaredMethod("copyServiceResourceTrie");
        mCopy.setAccessible(true);
        @SuppressWarnings("unchecked")
        Map<String, RangerResourceTrie<RangerServiceResourceMatcher>> copy = (Map<String, RangerResourceTrie<RangerServiceResourceMatcher>>) mCopy.invoke(enricher);

        Map<String, RangerResourceTrie<RangerServiceResourceMatcher>> original = enricher.getEnrichedServiceTags().getServiceResourceTrie();
        assertNotNull(copy);
        assertNotSame(original, copy);
        for (Map.Entry<String, RangerResourceTrie<RangerServiceResourceMatcher>> e : original.entrySet()) {
            assertTrue(copy.containsKey(e.getKey()));
            assertNotSame(e.getValue(), copy.get(e.getKey()));
        }
    }

    @Test
    public void test13_RemoveOldServiceResource_RemovesMatcherAndReturnsAccessResource() throws Exception {
        RangerTagEnricher enricher = new RangerTagEnricher();
        RangerServiceDef def = minimalSvcDef();
        enricher.setServiceName("svc");
        enricher.setServiceDef(def);
        enricher.init();

        ServiceTags tags = makeServiceTagsWithOneResource(def);
        enricher.setServiceTags(tags);
        assertNotNull(enricher.getEnrichedServiceTags());

        RangerServiceResource serviceResource = enricher.getEnrichedServiceTags().getServiceTags().getServiceResources().get(0);

        Method mCopy = RangerTagEnricher.class.getDeclaredMethod("copyServiceResourceTrie");
        mCopy.setAccessible(true);
        @SuppressWarnings("unchecked")
        Map<String, RangerResourceTrie<RangerServiceResourceMatcher>> resourceTries = (Map<String, RangerResourceTrie<RangerServiceResourceMatcher>>) mCopy.invoke(enricher);

        List<RangerServiceResourceMatcher> resourceMatchers = new ArrayList<>(enricher.getEnrichedServiceTags().getServiceResourceMatchers());
        int initialSize = resourceMatchers.size();

        Method mRemove = RangerTagEnricher.class.getDeclaredMethod("removeOldServiceResource", RangerServiceResource.class, List.class, Map.class);
        mRemove.setAccessible(true);
        Object ret = mRemove.invoke(enricher, serviceResource, resourceMatchers, resourceTries);

        assertNotNull(ret);
        assertEquals(initialSize - 1, resourceMatchers.size());
    }

    @Test
    public void test14_ProcessServiceTagDeltas_SuccessfulUpdate_AddsMatcherAndUpdatesTrie() throws Exception {
        RangerTagEnricher enricher = new RangerTagEnricher();
        RangerServiceDef def = minimalSvcDef();
        enricher.setServiceName("svc");
        enricher.setServiceDef(def);
        enricher.init();

        ServiceTags base = makeServiceTagsWithOneResource(def);
        enricher.setServiceTags(base);

        // Build delta that updates the existing resource (same id), with a new signature
        RangerServiceResource updated = new RangerServiceResource();
        updated.setId(1L);
        Map<String, RangerPolicyResource> resElems = new HashMap<>();
        RangerPolicyResource policyRes = new RangerPolicyResource(Arrays.asList("sales"), null, null);
        resElems.put("db", policyRes);
        updated.setResourceElements(resElems);
        updated.setResourceSignature("sig2");

        ServiceTags deltas = new ServiceTags();
        deltas.setServiceName("svc");
        deltas.setIsDelta(true);
        deltas.setTagsChangeExtent(ServiceTags.TagsChangeExtent.SERVICE_RESOURCE);
        deltas.setTagVersion(2L);
        List<RangerServiceResource> changed = new ArrayList<>();
        changed.add(updated);
        deltas.setServiceResources(changed);

        ServiceTags allServiceTags = RangerServiceTagsDeltaUtil.applyDelta(new ServiceTags(base), deltas, false);

        Method mCopy = RangerTagEnricher.class.getDeclaredMethod("copyServiceResourceTrie");
        mCopy.setAccessible(true);
        @SuppressWarnings("unchecked")
        Map<String, RangerResourceTrie<RangerServiceResourceMatcher>> trieMap = (Map<String, RangerResourceTrie<RangerServiceResourceMatcher>>) mCopy.invoke(enricher);

        Set<String> keysToRemoveFromCache = new HashSet<>();

        Method mProcess = RangerTagEnricher.class.getDeclaredMethod("processServiceTagDeltas", ServiceTags.class, ServiceTags.class, Map.class, Set.class);
        mProcess.setAccessible(true);
        Object ret = mProcess.invoke(enricher, deltas, allServiceTags, trieMap, keysToRemoveFromCache);

        assertNotNull(ret);
        assertTrue(!keysToRemoveFromCache.isEmpty());
    }

    @Test
    public void test15_ProcessServiceTagDeltas_ErrorPath_ReturnsOldAndSetsVersionMinusOne() throws Exception {
        RangerTagEnricher enricher = new RangerTagEnricher();
        RangerServiceDef def = minimalSvcDef();
        enricher.setServiceName("svc");
        enricher.setServiceDef(def);
        enricher.init();

        ServiceTags base = makeServiceTagsWithOneResource(def);
        enricher.setServiceTags(base);

        RangerServiceResource updated = new RangerServiceResource();
        updated.setId(1L);
        Map<String, RangerPolicyResource> resElems = new HashMap<>();
        RangerPolicyResource policyRes = new RangerPolicyResource(Arrays.asList("sales"), null, null);
        resElems.put("db", policyRes);
        updated.setResourceElements(resElems);
        updated.setResourceSignature("sig2");

        ServiceTags deltas = new ServiceTags();
        deltas.setServiceName("svc");
        deltas.setIsDelta(true);
        deltas.setTagsChangeExtent(ServiceTags.TagsChangeExtent.SERVICE_RESOURCE);
        deltas.setTagVersion(2L);
        List<RangerServiceResource> changed = new ArrayList<>();
        changed.add(updated);
        deltas.setServiceResources(changed);

        ServiceTags allServiceTags = RangerServiceTagsDeltaUtil.applyDelta(new ServiceTags(base), deltas, false);

        Map<String, RangerResourceTrie<RangerServiceResourceMatcher>> emptyTrieMap = new HashMap<>();
        Set<String> keysToRemoveFromCache = new HashSet<>();

        Method mProcess = RangerTagEnricher.class.getDeclaredMethod("processServiceTagDeltas", ServiceTags.class, ServiceTags.class, Map.class, Set.class);
        mProcess.setAccessible(true);
        Object ret = mProcess.invoke(enricher, deltas, allServiceTags, emptyTrieMap, keysToRemoveFromCache);

        assertSame(enricher.getEnrichedServiceTags(), ret);
        assertEquals(-1L, deltas.getTagVersion());
        assertTrue(keysToRemoveFromCache.isEmpty());
    }

    @Test
    public void test16_FindMatchingTags_EmptyResourceAndAnyAccess_ReturnsAllTags() {
        RangerTagEnricher enricher = new RangerTagEnricher();
        RangerServiceDef def = minimalSvcDef();
        enricher.setServiceName("svc");
        enricher.setServiceDef(def);
        enricher.init();

        ServiceTags tags = makeServiceTagsWithOneResource(def);
        enricher.setServiceTags(tags);

        RangerAccessRequestImpl request = new RangerAccessRequestImpl();
        request.setContext(new HashMap<>());
        request.setAccessType(null); // sets ANY
        request.setResource(null);   // empty resource

        enricher.enrich(request);

        Set<RangerTagForEval> result = RangerAccessRequestUtil.getRequestTagsFromContext(request.getContext());
        assertNotNull(result);
        assertEquals(1, result.size());
        assertEquals("T1", result.iterator().next().getType());
    }

    @Test
    public void test17_DisableTrieLookupPrefilter_SkipsTrieBuild() {
        RangerTagEnricher enricher = new RangerTagEnricher();
        RangerServiceDef def = minimalSvcDef();
        enricher.setServiceName("svc");
        enricher.setServiceDef(def);

        Map<String, String> opts = new HashMap<>();
        opts.put("disableTrieLookupPrefilter", "true");
        RangerContextEnricherDef ed = new RangerContextEnricherDef();
        ed.setName("tags");
        ed.setEnricherOptions(opts);
        enricher.setEnricherDef(ed);

        enricher.init();

        ServiceTags tags = makeServiceTagsWithOneResource(def);
        enricher.setServiceTags(tags);
        assertNotNull(enricher.getEnrichedServiceTags());
        assertNull(enricher.getEnrichedServiceTags().getServiceResourceTrie());
    }

    @Test
    public void test18_Delta_TagsOnly_PreservesMatchersAndTrie() {
        RangerTagEnricher enricher = new RangerTagEnricher();
        RangerServiceDef def = minimalSvcDef();
        enricher.setServiceName("svc");
        enricher.setServiceDef(def);
        enricher.init();

        ServiceTags base = makeServiceTagsWithOneResource(def);
        enricher.setServiceTags(base);
        RangerTagEnricher.EnrichedServiceTags before = enricher.getEnrichedServiceTags();
        assertNotNull(before);

        ServiceTags delta = new ServiceTags();
        delta.setServiceName("svc");
        delta.setIsDelta(true);
        delta.setTagsChangeExtent(ServiceTags.TagsChangeExtent.TAGS);
        delta.setTagVersion(2L);

        Map<Long, RangerTag> tagMap = new HashMap<>(base.getTags());
        RangerTag newTag = new RangerTag();
        newTag.setType("T2");
        tagMap.put(200L, newTag);
        delta.setTags(tagMap);

        enricher.setServiceTags(delta);

        RangerTagEnricher.EnrichedServiceTags after = enricher.getEnrichedServiceTags();
        assertSame(before.getServiceResourceMatchers(), after.getServiceResourceMatchers());
        assertSame(before.getServiceResourceTrie(), after.getServiceResourceTrie());
        assertEquals(2L, after.getResourceTrieVersion());
    }

    @Test
    public void test19_RemoveOldServiceResource_ErrorWhenTrieMissingKey_ReturnsNull() throws Exception {
        RangerTagEnricher enricher = new RangerTagEnricher();
        RangerServiceDef def = minimalSvcDef();
        enricher.setServiceName("svc");
        enricher.setServiceDef(def);
        enricher.init();

        ServiceTags base = makeServiceTagsWithOneResource(def);
        enricher.setServiceTags(base);

        RangerServiceResource serviceResource = enricher.getEnrichedServiceTags().getServiceTags().getServiceResources().get(0);

        Method mRemove = RangerTagEnricher.class.getDeclaredMethod("removeOldServiceResource", RangerServiceResource.class, List.class, Map.class);
        mRemove.setAccessible(true);

        List<RangerServiceResourceMatcher> resourceMatchers = new ArrayList<>(enricher.getEnrichedServiceTags().getServiceResourceMatchers());
        Map<String, RangerResourceTrie<RangerServiceResourceMatcher>> resourceTries = new HashMap<>(); // missing key forces error path

        Object ret = mRemove.invoke(enricher, serviceResource, resourceMatchers, resourceTries);
        assertNull(ret);
    }

    @Test
    public void test20_Init_WithInvalidRetrieverClass_NotFound() {
        RangerTagEnricher enricher = new RangerTagEnricher();
        RangerServiceDef def = minimalSvcDef();
        enricher.setServiceName("svc");
        enricher.setServiceDef(def);
        enricher.setAppId("app");

        Map<String, String> opts = new HashMap<>();
        opts.put("tagRetrieverClassName", "com.nonexistent.Foo");
        RangerContextEnricherDef ed = new RangerContextEnricherDef();
        ed.setName("tags");
        ed.setEnricherOptions(opts);
        enricher.setEnricherDef(ed);

        enricher.init();
        assertTrue(true);
    }

    public static class NotRetriever {}

    @Test
    public void test21_Init_WithInvalidRetrieverClass_ClassCast() {
        RangerTagEnricher enricher = new RangerTagEnricher();
        RangerServiceDef def = minimalSvcDef();
        enricher.setServiceName("svc");
        enricher.setServiceDef(def);
        enricher.setAppId("app");

        Map<String, String> opts = new HashMap<>();
        opts.put("tagRetrieverClassName", NotRetriever.class.getName());
        RangerContextEnricherDef ed = new RangerContextEnricherDef();
        ed.setName("tags");
        ed.setEnricherOptions(opts);
        enricher.setEnricherDef(ed);

        enricher.init();
        assertTrue(true);
    }

    public abstract static class AbstractRetriever extends RangerTagRetriever {}

    @Test
    public void test22_Init_WithAbstractRetriever_InstantiationError() {
        RangerTagEnricher enricher = new RangerTagEnricher();
        RangerServiceDef def = minimalSvcDef();
        enricher.setServiceName("svc");
        enricher.setServiceDef(def);
        enricher.setAppId("app");

        Map<String, String> opts = new HashMap<>();
        opts.put("tagRetrieverClassName", AbstractRetriever.class.getName());
        RangerContextEnricherDef ed = new RangerContextEnricherDef();
        ed.setName("tags");
        ed.setEnricherOptions(opts);
        enricher.setEnricherDef(ed);

        enricher.init();
        assertTrue(true);
    }

    @Test
    public void test23_GetTagsForServiceResource_NullResourceId_YieldsNoTags() {
        RangerTagEnricher enricher = new RangerTagEnricher();
        RangerServiceDef def = minimalSvcDef();
        enricher.setServiceName("svc");
        enricher.setServiceDef(def);
        enricher.init();

        ServiceTags tags = makeServiceTagsWithOneResource(def);
        // Add another service resource with null id that matches the request; it should not contribute tags
        RangerServiceResource rs = new RangerServiceResource();
        rs.setId(null);
        Map<String, RangerPolicyResource> resElems = new HashMap<>();
        RangerPolicyResource policyRes = new RangerPolicyResource(Arrays.asList("sales"), null, null);
        resElems.put("db", policyRes);
        rs.setResourceElements(resElems);
        rs.setResourceSignature("sig-null");
        tags.getServiceResources().add(rs);

        enricher.setServiceTags(tags);

        RangerAccessResourceImpl res = new RangerAccessResourceImpl();
        res.setServiceDef(def);
        res.setValue("db", Arrays.asList("sales"));
        RangerAccessRequestImpl req = new RangerAccessRequestImpl(res, "read", "u", null, null);

        enricher.enrich(req);
        Set<RangerTagForEval> result = RangerAccessRequestUtil.getRequestTagsFromContext(req.getContext());
        assertNotNull(result);
        assertEquals(1, result.size()); // only tag from id=1 resource
    }

    private static RangerServiceDef minimalSvcDef() {
        RangerServiceDef def = new RangerServiceDef();
        def.setName("svcType");
        List<RangerResourceDef> resDefs = new ArrayList<>();
        RangerResourceDef r = new RangerResourceDef();
        r.setName("db");
        r.setMatcherOptions(Collections.emptyMap());
        r.setRecursiveSupported(true);
        r.setExcludesSupported(true);
        resDefs.add(r);
        def.setResources(resDefs);
        return def;
    }

    private static ServiceTags makeServiceTagsWithOneResource(RangerServiceDef def) {
        ServiceTags tags = new ServiceTags();
        tags.setServiceName("svc");
        tags.setTagVersion(1L);
        tags.setIsDelta(false);

        RangerServiceResource rs = new RangerServiceResource();
        rs.setId(1L);
        Map<String, RangerPolicyResource> resElems = new HashMap<>();
        RangerPolicyResource policyRes = new RangerPolicyResource(Arrays.asList("sales"), null, null);
        resElems.put("db", policyRes);
        rs.setResourceElements(resElems);
        rs.setResourceSignature("sig");

        List<RangerServiceResource> list = new ArrayList<>();
        list.add(rs);
        tags.setServiceResources(list);
        Map<Long, List<Long>> resToTags = new HashMap<>();
        resToTags.put(1L, Arrays.asList(100L));
        tags.setResourceToTagIds(resToTags);
        Map<Long, RangerTag> tagMap = new HashMap<>();
        RangerTag t = new RangerTag();
        t.setType("T1");
        tagMap.put(100L, t);
        tags.setTags(tagMap);
        return tags;
    }

    static class TagEnricherTestCase {
        public String                      serviceName;
        public RangerServiceDef            serviceDef;
        public Map<Long, RangerTagDef>     tagDefinitions;
        public Map<Long, RangerTag>        tags;
        public List<RangerServiceResource> serviceResources;
        public Map<Long, List<Long>>       resourceToTagIds;
        public List<TestData>              tests;

        static class TestData {
            public String               name;
            public RangerAccessResource resource;
            public String               accessType;
            public List<RangerTag>      result;
        }
    }

    static class RangerResourceDeserializer implements JsonDeserializer<RangerAccessResource> {
        @Override
        public RangerAccessResource deserialize(JsonElement jsonObj, Type type,
                JsonDeserializationContext context) throws JsonParseException {
            return gsonBuilder.fromJson(jsonObj, RangerAccessResourceImpl.class);
        }
    }
}
