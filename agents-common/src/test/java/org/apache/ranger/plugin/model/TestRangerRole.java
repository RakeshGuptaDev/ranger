/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package org.apache.ranger.plugin.model;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
* @generated by Cursor
* @description <Unit Test for RangerRole class>
*/
@TestMethodOrder(MethodOrderer.MethodName.class)
@ExtendWith(MockitoExtension.class)
public class TestRangerRole {
    @Test
    public void test01_constructorAndToString() {
        Map<String, Object> options = new HashMap<>();
        options.put("opt1", "val1");
        List<RangerRole.RoleMember> users = new ArrayList<>();
        users.add(new RangerRole.RoleMember("alice", true));
        List<RangerRole.RoleMember> groups = new ArrayList<>();
        groups.add(new RangerRole.RoleMember("dev", false));
        List<RangerRole.RoleMember> roles = new ArrayList<>();
        roles.add(new RangerRole.RoleMember("data-steward", false));

        RangerRole role = new RangerRole("r1", "desc", options, users, groups, roles);
        role.setCreatedByUser("admin");

        String s = role.toString();
        Assertions.assertTrue(s.contains("name=r1"));
        Assertions.assertTrue(s.contains("options={opt1, [val1],}"));
        Assertions.assertTrue(s.contains("users=["));
        Assertions.assertTrue(s.contains("groups=["));
        Assertions.assertTrue(s.contains("roles=["));
    }

    @Test
    public void test02_gettersSettersAndCollectionsDefault() {
        RangerRole role = new RangerRole();
        role.setName("n");
        role.setDescription("d");
        role.setOptions(null);
        role.setUsers(null);
        role.setGroups(null);
        role.setRoles(null);
        role.setCreatedByUser("c");

        Assertions.assertEquals("n", role.getName());
        Assertions.assertEquals("d", role.getDescription());
        Assertions.assertNotNull(role.getOptions());
        Assertions.assertNotNull(role.getUsers());
        Assertions.assertNotNull(role.getGroups());
        Assertions.assertNotNull(role.getRoles());
        Assertions.assertEquals("c", role.getCreatedByUser());
    }

    @Test
    public void test03_equalsAndHashCode() {
        RangerRole r1 = new RangerRole();
        r1.setName("x");
        r1.setDescription("y");
        r1.setOptions(new HashMap<>());
        r1.setUsers(new ArrayList<>());
        r1.setGroups(new ArrayList<>());
        r1.setRoles(new ArrayList<>());

        RangerRole r2 = new RangerRole();
        r2.setName("x");
        r2.setDescription("y");
        r2.setOptions(new HashMap<>());
        r2.setUsers(new ArrayList<>());
        r2.setGroups(new ArrayList<>());
        r2.setRoles(new ArrayList<>());

        Assertions.assertEquals(r1, r2);
        Assertions.assertEquals(r1.hashCode(), r2.hashCode());

        r2.setDescription("z");
        Assertions.assertNotEquals(r1, r2);
    }

    @Test
    public void test04_roleMemberEqualsHashCodeToString() {
        RangerRole.RoleMember m1 = new RangerRole.RoleMember("u1", true);
        RangerRole.RoleMember m2 = new RangerRole.RoleMember("u1", true);
        Assertions.assertEquals(m1, m2);
        Assertions.assertEquals(m1.hashCode(), m2.hashCode());

        m2.setIsAdmin(false);
        Assertions.assertNotEquals(m1, m2);

        String s = m1.toString();
        Assertions.assertTrue(s.contains("u1"));
    }
}
