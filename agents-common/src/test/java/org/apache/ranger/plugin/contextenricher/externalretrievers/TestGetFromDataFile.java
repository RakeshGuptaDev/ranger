/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.apache.ranger.plugin.contextenricher.externalretrievers;

import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;

import java.io.File;
import java.io.FileOutputStream;
import java.nio.charset.StandardCharsets;
import java.util.Map;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;

/**
* @generated by Cursor
* @description <Unit Test for GetFromDataFile class>
*/
@ExtendWith(MockitoExtension.class)
@TestMethodOrder(MethodOrderer.MethodName.class)
public class TestGetFromDataFile {
    @Test
    public void test01_getFromDataFile_readsPropertiesAndMapsToUserStore() throws Exception {
        File tmp = File.createTempFile("userattrs", ".properties");
        try (FileOutputStream fos = new FileOutputStream(tmp)) {
            String content = "alice=US\n" + "bob=EU\n";
            fos.write(content.getBytes(StandardCharsets.UTF_8));
        }

        GetFromDataFile gf = new GetFromDataFile();
        Map<String, Map<String, String>> out = gf.getFromDataFile(tmp.getAbsolutePath(), "region");
        assertEquals("US", out.get("alice").get("region"));
        assertEquals("EU", out.get("bob").get("region"));
    }

    @Test
    public void test02_getFromDataFile_missingFile_returnsEmpty() {
        GetFromDataFile gf = new GetFromDataFile();
        Map<String, Map<String, String>> out = gf.getFromDataFile("/path/does/not/exist.props", "attr");
        assertTrue(out.isEmpty());
    }
}
