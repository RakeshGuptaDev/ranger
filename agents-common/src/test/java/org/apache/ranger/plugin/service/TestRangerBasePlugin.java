/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package org.apache.ranger.plugin.service;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonParseException;
import org.apache.commons.lang.StringUtils;
import org.apache.ranger.audit.provider.AuditHandler;
import org.apache.ranger.authorization.hadoop.config.RangerPluginConfig;
import org.apache.ranger.plugin.audit.RangerDefaultAuditHandler;
import org.apache.ranger.plugin.model.RangerPolicy;
import org.apache.ranger.plugin.model.RangerRole;
import org.apache.ranger.plugin.model.RangerServiceDef;
import org.apache.ranger.plugin.policyengine.RangerAccessRequest;
import org.apache.ranger.plugin.policyengine.RangerAccessRequestImpl;
import org.apache.ranger.plugin.policyengine.RangerAccessResource;
import org.apache.ranger.plugin.policyengine.RangerAccessResourceImpl;
import org.apache.ranger.plugin.policyengine.RangerAccessResult;
import org.apache.ranger.plugin.policyengine.RangerAccessResultProcessor;
import org.apache.ranger.plugin.policyengine.RangerPolicyEngine;
import org.apache.ranger.plugin.policyengine.RangerPolicyEngineOptions;
import org.apache.ranger.plugin.policyengine.RangerResourceACLs;
import org.apache.ranger.plugin.policyengine.RangerResourceACLs.AccessResult;
import org.apache.ranger.plugin.policyevaluator.RangerPolicyEvaluator;
import org.apache.ranger.plugin.store.EmbeddedServiceDefsUtil;
import org.apache.ranger.plugin.util.RangerAccessRequestUtil;
import org.apache.ranger.plugin.util.RangerRoles;
import org.apache.ranger.plugin.util.RangerUserStore;
import org.apache.ranger.plugin.util.ServiceDefUtil;
import org.apache.ranger.plugin.util.ServiceGdsInfo;
import org.apache.ranger.plugin.util.ServicePolicies;
import org.apache.ranger.plugin.util.ServiceTags;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;

import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.Reader;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.TreeSet;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;

/**
* @generated by Cursor
* @description <Unit Test for RangerBasePlugin class>
*/
@ExtendWith(MockitoExtension.class)
@TestMethodOrder(MethodOrderer.MethodName.class)
public class TestRangerBasePlugin {
    static Gson                      gsonBuilder;
    static RangerPolicyEngineOptions peOptions;

    @BeforeAll
    public static void setUpBeforeClass() throws Exception {
        gsonBuilder = new GsonBuilder().setDateFormat("yyyyMMdd-HH:mm:ss.SSSZ")
                .setPrettyPrinting()
                .registerTypeAdapter(RangerAccessRequest.class, new RangerAccessRequestDeserializer())
                .registerTypeAdapter(RangerAccessResource.class, new RangerResourceDeserializer())
                .create();

        peOptions = new RangerPolicyEngineOptions();

        peOptions.disablePolicyRefresher    = true;
        peOptions.disableTagRetriever       = true;
        peOptions.disableUserStoreRetriever = true;
        peOptions.disableGdsInfoRetriever   = true;
    }

    @Test
    public void test1_BasePluginHive() throws Exception {
        runTestsFromResourceFile("/plugin/test_base_plugin_hive.json");
    }

    @Test
    public void test2_MergedResourceACLs() {
        RangerResourceACLs base = new RangerResourceACLs();
        RangerResourceACLs chained = new RangerResourceACLs();

        // craft simple ACL entries to verify merge logic does not throw and returns base reference
        base.setUserAccessInfo("u1", "select", 1, null);
        chained.setUserAccessInfo("u2", "select", 1, null);
        base.getDatasets().add("d1");
        chained.getDatasets().add("d2");
        base.getProjects().add("p1");
        chained.getProjects().add("p2");

        RangerResourceACLs merged = RangerBasePlugin.getMergedResourceACLs(base, chained);
        assertNotNull(merged);
        assertEquals(base, merged);
        assertEquals(2, merged.getDatasets().size());
        assertEquals(2, merged.getProjects().size());
        assertNotNull(merged.getUserACLs().get("u1"));
    }

    @Test
    public void test3_CreateAdminClient_UsesCustomImplIfConfiguredElseFallsBack() {
        RangerPolicyEngineOptions peOptionsLocal = new RangerPolicyEngineOptions();
        peOptionsLocal.disablePolicyRefresher = true;
        peOptionsLocal.disableTagRetriever = true;
        peOptionsLocal.disableUserStoreRetriever = true;
        peOptionsLocal.disableGdsInfoRetriever = true;

        RangerPluginConfig cfg = new RangerPluginConfig("hbase", "svc", "app", null, null, peOptionsLocal);

        // Provide REST URL to avoid empty URLs list in REST client
        cfg.set("ranger.plugin.hbase.policy.rest.url", "http://localhost:6080");

        // invalid class first -> fallback to REST client
        cfg.set("ranger.plugin.hbase.policy.source.impl", "com.example.DoesNotExist");
        assertNotNull(RangerBasePlugin.createAdminClient(cfg));

        // set to a valid test implementation
        cfg.set("ranger.plugin.hbase.policy.source.impl", "org.apache.ranger.plugin.policyengine.RangerAdminClientImpl");
        assertNotNull(RangerBasePlugin.createAdminClient(cfg));
    }

    @Test
    public void test4_GetServiceDefIdWhenNull() {
        RangerPolicyEngineOptions peOptionsLocal = new RangerPolicyEngineOptions();
        peOptionsLocal.disablePolicyRefresher = true;
        RangerPluginConfig pluginConfig = new RangerPluginConfig("dummy", "svc", "app", null, null, peOptionsLocal);
        RangerBasePlugin plugin = new RangerBasePlugin(pluginConfig);
        // don't initialize policy engine; getServiceDef() returns null
        assertEquals(-1, plugin.getServiceDefId());
    }

    @Test
    public void test5_LogErrorMessageRateLimit() {
        RangerPolicyEngineOptions opts = new RangerPolicyEngineOptions();
        opts.disablePolicyRefresher = true;
        opts.disableTagRetriever = true;
        opts.disableUserStoreRetriever = true;
        opts.disableGdsInfoRetriever = true;
        RangerPluginConfig cfg = new RangerPluginConfig("dummy", "svc", "app", null, null, opts);
        RangerBasePlugin plugin = new RangerBasePlugin(cfg);

        boolean first = plugin.logErrorMessage("E1");
        boolean second = plugin.logErrorMessage("E1");

        assertEquals(true, first);
        assertEquals(false, second);
    }

    @Test
    public void test6_UGILogin_KeytabMissingThrows() {
        RangerPolicyEngineOptions opts = new RangerPolicyEngineOptions();
        RangerPluginConfig cfg = new RangerPluginConfig("dummy", "svc", "app", null, null, opts);
        String prefix = cfg.getPropertyPrefix() + ".ugi";
        cfg.set(prefix + ".initialize", "true");
        cfg.set(prefix + ".login.type", "keytab");
        // Intentionally do not set principal/keytab to trigger exception
        assertThrows(RuntimeException.class, () -> new RangerBasePlugin(cfg));
    }

    @Test
    public void test7_UGILogin_JaasMissingThrows() {
        RangerPolicyEngineOptions opts = new RangerPolicyEngineOptions();
        RangerPluginConfig cfg = new RangerPluginConfig("dummy", "svc", "app", null, null, opts);
        String prefix = cfg.getPropertyPrefix() + ".ugi";
        cfg.set(prefix + ".initialize", "true");
        cfg.set(prefix + ".login.type", "jaas");
        // Intentionally do not set jaas appconfig to trigger exception
        assertThrows(RuntimeException.class, () -> new RangerBasePlugin(cfg));
    }

    @Test
    public void test8_UGILogin_InvalidTypeNoThrow() {
        RangerPolicyEngineOptions opts = new RangerPolicyEngineOptions();
        opts.disablePolicyRefresher = true;
        opts.disableTagRetriever = true;
        opts.disableUserStoreRetriever = true;
        opts.disableGdsInfoRetriever = true;
        RangerPluginConfig cfg = new RangerPluginConfig("dummy", "svc", "app", null, null, opts);
        String prefix = cfg.getPropertyPrefix() + ".ugi";
        cfg.set(prefix + ".initialize", "true");
        cfg.set(prefix + ".login.type", "unknown");
        new RangerBasePlugin(cfg); // should not throw
    }

    @Test
    public void test9_IsAccessAllowedCollection_SynchronousRefreshAndResultProcessorCalled() throws Exception {
        RangerPolicyEngineOptions opts = new RangerPolicyEngineOptions();
        opts.disablePolicyRefresher = true;
        opts.disableTagRetriever = true;
        opts.disableUserStoreRetriever = true;
        opts.disableGdsInfoRetriever = true;
        RangerPluginConfig cfg = new RangerPluginConfig("hive", "svc", "app", null, null, opts);
        // Build minimal policies with serviceDef and serviceConfig to enable synchronous refresh
        ServicePolicies policies = new ServicePolicies();
        policies.setServiceName("svc");
        policies.setServiceDef(EmbeddedServiceDefsUtil.instance().getEmbeddedServiceDef(EmbeddedServiceDefsUtil.EMBEDDED_SERVICEDEF_HIVE_NAME));
        HashMap<String, String> sc = new HashMap<>();
        sc.put(cfg.getPropertyPrefix() + ".policy.refresh.synchronous", "true");
        policies.setServiceConfig(sc);

        RangerBasePlugin plugin = new RangerBasePlugin(cfg);
        plugin.setPolicies(policies);

        RangerAccessResourceImpl res = new RangerAccessResourceImpl();
        res.setValue("database", "db1");
        RangerAccessRequestImpl r1 = new RangerAccessRequestImpl();
        r1.setResource(res);
        r1.setAccessType("select");
        RangerAccessRequestImpl r2 = new RangerAccessRequestImpl();
        r2.setResource(res);
        r2.setAccessType("update");

        RangerAccessResultProcessor rp = Mockito.mock(RangerAccessResultProcessor.class);
        List<RangerAccessRequest> reqs = new ArrayList<>();
        reqs.add(r1);
        reqs.add(r2);

        Collection<RangerAccessResult> results = plugin.isAccessAllowed(reqs, rp);
        assertNotNull(results);
        verify(rp, times(1)).processResults(results);
    }

    @Test
    public void test10_MergedACLs_PriorityAndDenyWins() {
        RangerResourceACLs base = new RangerResourceACLs();
        RangerResourceACLs chained = new RangerResourceACLs();

        // Prepare policies with different priorities
        RangerPolicy basePolicyNormal = new RangerPolicy();
        basePolicyNormal.setPolicyPriority(RangerPolicy.POLICY_PRIORITY_NORMAL);
        RangerPolicy chainedHigher = new RangerPolicy();
        chainedHigher.setPolicyPriority(RangerPolicy.POLICY_PRIORITY_OVERRIDE);

        // Case 1: base missing access -> chained should be used
        chained.setUserAccessInfo("uA", "select", RangerPolicyEvaluator.ACCESS_ALLOWED, chainedHigher);
        RangerBasePlugin.getMergedResourceACLs(base, chained);
        AccessResult ar1 = base.getUserACLs().get("uA").get("select");
        assertNotNull(ar1);
        assertEquals(RangerPolicyEvaluator.ACCESS_ALLOWED, ar1.getResult());

        // Case 2: both present, chained lower priority and denied -> lower priority should not override higher-priority base allow
        RangerPolicy basePolicyOverride = new RangerPolicy();
        basePolicyOverride.setPolicyPriority(RangerPolicy.POLICY_PRIORITY_OVERRIDE);
        base.setGroupAccessInfo("g1", "update", RangerPolicyEvaluator.ACCESS_ALLOWED, basePolicyOverride);
        RangerPolicy chainedLower = new RangerPolicy();
        chainedLower.setPolicyPriority(RangerPolicy.POLICY_PRIORITY_NORMAL);
        chained.setGroupAccessInfo("g1", "update", RangerPolicyEvaluator.ACCESS_DENIED, chainedLower);
        RangerBasePlugin.getMergedResourceACLs(base, chained);
        AccessResult ar2 = base.getGroupACLs().get("g1").get("update");
        assertEquals(RangerPolicyEvaluator.ACCESS_ALLOWED, ar2.getResult());

        // Case 3: same priority and both allowed -> chained used per code path
        base.setRoleAccessInfo("r1", "create", RangerPolicyEvaluator.ACCESS_ALLOWED, basePolicyNormal);
        chained.setRoleAccessInfo("r1", "create", RangerPolicyEvaluator.ACCESS_ALLOWED, chainedLower);
        RangerBasePlugin.getMergedResourceACLs(base, chained);
        AccessResult ar3 = base.getRoleACLs().get("r1").get("create");
        assertEquals(RangerPolicyEvaluator.ACCESS_ALLOWED, ar3.getResult());

        // Case 4: same priority but chained denies and base allowed -> deny should override
        base.setUserAccessInfo("uB", "drop", RangerPolicyEvaluator.ACCESS_ALLOWED, basePolicyNormal);
        chained.setUserAccessInfo("uB", "drop", RangerPolicyEvaluator.ACCESS_DENIED, chainedLower);
        RangerBasePlugin.getMergedResourceACLs(base, chained);
        AccessResult ar4 = base.getUserACLs().get("uB").get("drop");
        assertEquals(RangerPolicyEvaluator.ACCESS_DENIED, ar4.getResult());
    }

    @Test
    public void test11_RegisterAuthContextListener_NotifiesOnAuthContextChange() throws Exception {
        RangerPolicyEngineOptions opts = new RangerPolicyEngineOptions();
        opts.disablePolicyRefresher = true;
        opts.disableTagRetriever = true;
        opts.disableUserStoreRetriever = true;
        opts.disableGdsInfoRetriever = true;
        RangerPluginConfig cfg = new RangerPluginConfig("hive", "svc", "app", null, null, opts);

        ServicePolicies policies = new ServicePolicies();
        policies.setServiceName("svc");
        policies.setServiceDef(EmbeddedServiceDefsUtil.instance().getEmbeddedServiceDef(EmbeddedServiceDefsUtil.EMBEDDED_SERVICEDEF_HIVE_NAME));

        RangerBasePlugin plugin = new RangerBasePlugin(cfg);

        // simple listener that flips a flag when notified
        final boolean[] notified = new boolean[] {false};
        plugin.registerAuthContextEventListener(new RangerAuthContextListener() {
            @Override
            public void contextChanged() {
                notified[0] = true;
            }
        });

        plugin.setPolicies(policies);
        assertEquals(true, notified[0]);
    }

    @Test
    public void test12_GettersDefaultValuesWithoutPolicyEngine() {
        RangerPolicyEngineOptions opts = new RangerPolicyEngineOptions();
        opts.disablePolicyRefresher = true;
        RangerPluginConfig cfg = new RangerPluginConfig("dummy", "svc", "app", null, null, opts);
        RangerBasePlugin plugin = new RangerBasePlugin(cfg);

        assertEquals(-1L, plugin.getPoliciesVersion());
        assertEquals(-1L, plugin.getTagsVersion());
        assertEquals(-1L, plugin.getRolesVersion());
        assertEquals(-1L, plugin.getUserStoreVersion());
        assertEquals(null, plugin.getResourceAccessInfo(null));
        assertEquals(null, plugin.getResourceACLs(null));
        assertEquals(null, plugin.getRolesFromUserAndGroups("u", new HashSet<>()));
        assertEquals(null, plugin.getRangerRoles());
        assertEquals(false, plugin.isServiceAdmin("u"));
    }

    @Test
    public void test13_EnrichersReturnNullByDefault() {
        RangerPolicyEngineOptions opts = new RangerPolicyEngineOptions();
        opts.disablePolicyRefresher = true;
        RangerPluginConfig cfg = new RangerPluginConfig("dummy", "svc", "app", null, null, opts);
        RangerBasePlugin plugin = new RangerBasePlugin(cfg);

        assertEquals(null, plugin.getTagEnricher());
        assertEquals(null, plugin.getUserStoreEnricher());
        assertEquals(null, plugin.getGdsEnricher());
        assertEquals(null, plugin.getGdsPolicyEngine());
    }

    @Test
    public void test14_IsAccessAllowedSingleRequest_ProcessorIsCalled() throws Exception {
        RangerPolicyEngineOptions opts = new RangerPolicyEngineOptions();
        opts.disablePolicyRefresher = true;
        opts.disableTagRetriever = true;
        opts.disableUserStoreRetriever = true;
        opts.disableGdsInfoRetriever = true;
        RangerPluginConfig cfg = new RangerPluginConfig("hive", "svc", "app", null, null, opts);

        ServicePolicies policies = new ServicePolicies();
        policies.setServiceName("svc");
        policies.setServiceDef(EmbeddedServiceDefsUtil.instance().getEmbeddedServiceDef(EmbeddedServiceDefsUtil.EMBEDDED_SERVICEDEF_HIVE_NAME));

        RangerBasePlugin plugin = new RangerBasePlugin(cfg);
        plugin.setPolicies(policies);

        RangerAccessResourceImpl res = new RangerAccessResourceImpl();
        res.setValue("database", "db1");
        RangerAccessRequestImpl req = new RangerAccessRequestImpl();
        req.setResource(res);
        req.setAccessType("select");

        RangerAccessResultProcessor rp = Mockito.mock(RangerAccessResultProcessor.class);
        RangerAccessResult ret = plugin.isAccessAllowed(req, rp);
        assertNotNull(ret);
        verify(rp, times(1)).processResult(Mockito.any(RangerAccessResult.class));
    }

    @Test
    public void test15_GetResourceAccessInfoNonNullWhenInitialized() throws Exception {
        RangerPolicyEngineOptions opts = new RangerPolicyEngineOptions();
        opts.disablePolicyRefresher = true;
        opts.disableTagRetriever = true;
        opts.disableUserStoreRetriever = true;
        opts.disableGdsInfoRetriever = true;
        RangerPluginConfig cfg = new RangerPluginConfig("hive", "svc", "app", null, null, opts);

        ServicePolicies policies = new ServicePolicies();
        policies.setServiceName("svc");
        policies.setServiceDef(EmbeddedServiceDefsUtil.instance().getEmbeddedServiceDef(EmbeddedServiceDefsUtil.EMBEDDED_SERVICEDEF_HIVE_NAME));

        RangerBasePlugin plugin = new RangerBasePlugin(cfg);
        plugin.setPolicies(policies);

        RangerAccessResourceImpl res = new RangerAccessResourceImpl();
        res.setValue("database", "db1");
        RangerAccessRequestImpl req = new RangerAccessRequestImpl();
        req.setResource(res);
        req.setAccessType("select");

        assertNotNull(plugin.getResourceAccessInfo(req));
    }

    @Test
    public void test16_GetAuditProviderAlwaysNonNull() {
        AuditHandler h = RangerBasePlugin.getAuditProvider("svc");
        assertNotNull(h);
    }

    @Test
    public void test17_GetServiceConfigsEmptyByDefault() throws Exception {
        RangerPolicyEngineOptions opts = new RangerPolicyEngineOptions();
        opts.disablePolicyRefresher = true;
        opts.disableTagRetriever = true;
        opts.disableUserStoreRetriever = true;
        opts.disableGdsInfoRetriever = true;
        RangerPluginConfig cfg = new RangerPluginConfig("hive", "svc", "app", null, null, opts);

        ServicePolicies policies = new ServicePolicies();
        policies.setServiceName("svc");
        policies.setServiceDef(EmbeddedServiceDefsUtil.instance().getEmbeddedServiceDef(EmbeddedServiceDefsUtil.EMBEDDED_SERVICEDEF_HIVE_NAME));

        RangerBasePlugin plugin = new RangerBasePlugin(cfg);
        plugin.setPolicies(policies);
        assertEquals(0, plugin.getServiceConfigs().size());
    }

    @Test
    public void test18_SetPoliciesNullUsesDefaultPoliciesCreatesEngine() {
        RangerPolicyEngineOptions opts = new RangerPolicyEngineOptions();
        opts.disablePolicyRefresher = true;
        opts.disableTagRetriever = true;
        opts.disableUserStoreRetriever = true;
        opts.disableGdsInfoRetriever = true;
        RangerPluginConfig cfg = new RangerPluginConfig("hive", "svc", "app", null, null, opts);

        RangerBasePlugin plugin = new RangerBasePlugin(cfg);
        // passing null should use default embedded service def for given serviceType
        plugin.setPolicies(null);
        assertNotNull(plugin.getServiceDef());
        assertEquals("svc", plugin.getServiceName());
    }

    @Test
    public void test19_RolesMappingAPIsReturnExpected() throws Exception {
        RangerPolicyEngineOptions opts = new RangerPolicyEngineOptions();
        opts.disablePolicyRefresher = true;
        opts.disableTagRetriever = true;
        opts.disableUserStoreRetriever = true;
        opts.disableGdsInfoRetriever = true;
        RangerPluginConfig cfg = new RangerPluginConfig("hive", "svc", "app", null, null, opts);

        ServicePolicies policies = new ServicePolicies();
        policies.setServiceName("svc");
        policies.setServiceDef(EmbeddedServiceDefsUtil.instance().getEmbeddedServiceDef(EmbeddedServiceDefsUtil.EMBEDDED_SERVICEDEF_HIVE_NAME));

        // build roles: role1 with user u1 and group g1
        RangerRole role1 = new RangerRole();
        role1.setName("role1");
        List<RangerRole.RoleMember> users = new ArrayList<>();
        users.add(new RangerRole.RoleMember("u1", false));
        role1.setUsers(users);
        List<RangerRole.RoleMember> groups = new ArrayList<>();
        groups.add(new RangerRole.RoleMember("g1", false));
        role1.setGroups(groups);

        RangerRoles rangerRoles = new RangerRoles();
        Set<RangerRole> rrset = new HashSet<>();
        rrset.add(role1);
        rangerRoles.setRangerRoles(rrset);

        RangerBasePlugin plugin = new RangerBasePlugin(cfg);
        plugin.setPolicies(policies);
        plugin.setRoles(rangerRoles);

        Set<String> groupsInput = new HashSet<>();
        groupsInput.add("gX");
        Set<String> rolesFromUser = plugin.getRolesFromUserAndGroups("u1", groupsInput);
        assertNotNull(rolesFromUser);
        // u1 maps to role1 via users
        Assertions.assertTrue(rolesFromUser.contains("role1"));

        Set<String> rolesFromGroup = plugin.getRolesFromUserAndGroups(null, new HashSet<>(Arrays.asList("g1")));
        assertNotNull(rolesFromGroup);
        Assertions.assertTrue(rolesFromGroup.contains("role1"));

        Set<RangerRole> byUser = plugin.getRangerRoleForPrincipal("u1", "USER");
        assertNotNull(byUser);
        Assertions.assertTrue(byUser.stream().anyMatch(r -> "role1".equals(r.getName())));

        Set<RangerRole> byGroup = plugin.getRangerRoleForPrincipal("g1", "GROUP");
        assertNotNull(byGroup);
        Assertions.assertTrue(byGroup.stream().anyMatch(r -> "role1".equals(r.getName())));
    }

    @Test
    public void test20_EvalAuditPolicies_NoThrowOnNullOrRealResult() throws Exception {
        RangerPolicyEngineOptions opts = new RangerPolicyEngineOptions();
        opts.disablePolicyRefresher = true;
        opts.disableTagRetriever = true;
        opts.disableUserStoreRetriever = true;
        opts.disableGdsInfoRetriever = true;
        RangerPluginConfig cfg = new RangerPluginConfig("hive", "svc", "app", null, null, opts);

        ServicePolicies policies = new ServicePolicies();
        policies.setServiceName("svc");
        policies.setServiceDef(EmbeddedServiceDefsUtil.instance().getEmbeddedServiceDef(EmbeddedServiceDefsUtil.EMBEDDED_SERVICEDEF_HIVE_NAME));

        RangerBasePlugin plugin = new RangerBasePlugin(cfg);
        plugin.setPolicies(policies);

        RangerAccessResourceImpl res = new RangerAccessResourceImpl();
        res.setValue("database", "db1");
        RangerAccessRequestImpl req = new RangerAccessRequestImpl();
        req.setResource(res);
        req.setAccessType("select");

        RangerAccessResult result = plugin.isAccessAllowed(req);
        plugin.evalAuditPolicies(result);
    }

    @Test
    public void test21_BasicGettersNonNull() {
        RangerPolicyEngineOptions opts = new RangerPolicyEngineOptions();
        RangerPluginConfig cfg = new RangerPluginConfig("svcType", "svc", "appId", null, null, opts);
        RangerBasePlugin plugin = new RangerBasePlugin(cfg);
        assertEquals("svcType", plugin.getServiceType());
        assertEquals("appId", plugin.getAppId());
        assertNotNull(plugin.getConfig());
    }

    @Test
    public void test22_CreateRangerAuthContextNotNullAfterPolicies() throws Exception {
        RangerPolicyEngineOptions opts = new RangerPolicyEngineOptions();
        opts.disablePolicyRefresher = true;
        opts.disableTagRetriever = true;
        opts.disableUserStoreRetriever = true;
        opts.disableGdsInfoRetriever = true;
        RangerPluginConfig cfg = new RangerPluginConfig("hive", "svc", "app", null, null, opts);

        ServicePolicies policies = new ServicePolicies();
        policies.setServiceName("svc");
        policies.setServiceDef(EmbeddedServiceDefsUtil.instance().getEmbeddedServiceDef(EmbeddedServiceDefsUtil.EMBEDDED_SERVICEDEF_HIVE_NAME));

        RangerBasePlugin plugin = new RangerBasePlugin(cfg);
        plugin.setPolicies(policies);
        assertNotNull(plugin.createRangerAuthContext());
        assertNotNull(plugin.getCurrentRangerAuthContext());
    }

    private void runTestsFromResourceFile(String resourceFile) throws Exception {
        InputStream       inStream = this.getClass().getResourceAsStream(resourceFile);
        InputStreamReader reader   = new InputStreamReader(inStream);

        runTests(reader, resourceFile);
    }

    private void runTests(Reader reader, String testName) throws Exception {
        RangerBasePluginTestCase testCase = readTestCase(reader);

        assertNotNull(testCase, "invalid input: " + testName);
        assertNotNull(testCase.policies, "invalid input: " + testName);
        assertNotNull(testCase.tags, "invalid input: " + testName);
        assertNotNull(testCase.roles, "invalid input: " + testName);
        assertNotNull(testCase.userStore, "invalid input: " + testName);
        assertNotNull(testCase.gdsInfo, "invalid input: " + testName);
        assertNotNull(testCase.tests, "invalid input: " + testName);

        RangerPluginConfig pluginConfig = new RangerPluginConfig(testCase.policies.getServiceDef().getName(), testCase.policies.getServiceName(), "hive", "cl1", "on-prem", peOptions);
        RangerBasePlugin   plugin       = new RangerBasePlugin(pluginConfig, testCase.policies, testCase.tags, testCase.roles, testCase.userStore, testCase.gdsInfo);

        for (TestData test : testCase.tests) {
            RangerAccessRequest request = test.request;

            if (test.result != null) {
                RangerAccessResult result = plugin.isAccessAllowed(request);

                assertNotNull(result, "result was null! - " + test.name);
                assertEquals(test.result.getIsAllowed(), result.getIsAllowed(), "isAllowed mismatched! - " + test.name);
                assertEquals(test.result.getIsAccessDetermined(), result.getIsAccessDetermined(), "isAccessDetermined mismatched! - " + test.name);
                assertEquals(test.result.getPolicyId(), result.getPolicyId(), "isAllowed mismatched! - " + test.name);
                assertEquals(test.result.getIsAudited(), result.getIsAudited(), "isAudited mismatched! - " + test.name);
                assertEquals(test.result.getIsAuditedDetermined(), result.getIsAuditedDetermined(), "isAuditedDetermined mismatched! - " + test.name);

                result = plugin.evalDataMaskPolicies(request, new RangerDefaultAuditHandler());

                if (test.result.getMaskType() != null) {
                    assertNotNull(result, "result was null! - " + test.name);
                    assertEquals(test.result.getMaskType(), result.getMaskType(), "maskType mismatched! - " + test.name);
                    assertEquals(test.result.getMaskedValue(), result.getMaskedValue(), "maskedValue mismatched! - " + test.name);
                    assertEquals(test.result.getMaskCondition(), result.getMaskCondition(), "maskCondition mismatched! - " + test.name);
                } else {
                    assertEquals(test.result.getMaskType(), result != null ? result.getMaskType() : null, "maskType mismatched! - " + test.name);
                }

                result = plugin.evalRowFilterPolicies(request, new RangerDefaultAuditHandler());

                if (test.result.getFilterExpr() != null) {
                    assertNotNull(result, "result was null! - " + test.name);
                    assertEquals(test.result.getFilterExpr(), result.getFilterExpr(), "filterExpr mismatched! - " + test.name);
                } else {
                    assertEquals(test.result.getFilterExpr(), result != null ? result.getFilterExpr() : null, "filterExpr mismatched! - " + test.name);
                }
            }

            if (test.acls != null) {
                RangerAccessRequest req  = new RangerAccessRequestImpl(request.getResource(), RangerPolicyEngine.ANY_ACCESS, null, null, null);
                RangerResourceACLs  acls = plugin.getResourceACLs(req);

                assertEquals(test.acls, acls, test.name);
            }
        }
    }

    private RangerBasePluginTestCase readTestCase(Reader reader) throws Exception {
        RangerBasePluginTestCase testCase = gsonBuilder.fromJson(reader, RangerBasePluginTestCase.class);

        if (StringUtils.isNotBlank(testCase.policiesFilename)) {
            InputStream inStream = this.getClass().getResourceAsStream(testCase.policiesFilename);

            testCase.policies = gsonBuilder.fromJson(new InputStreamReader(inStream), ServicePolicies.class);
        }

        if (StringUtils.isNotBlank(testCase.tagsFilename)) {
            InputStream inStream = this.getClass().getResourceAsStream(testCase.tagsFilename);

            testCase.tags = gsonBuilder.fromJson(new InputStreamReader(inStream), ServiceTags.class);
        }

        if (StringUtils.isNotBlank(testCase.rolesFilename)) {
            InputStream inStream = this.getClass().getResourceAsStream(testCase.rolesFilename);

            testCase.roles = gsonBuilder.fromJson(new InputStreamReader(inStream), RangerRoles.class);
        }

        if (StringUtils.isNotBlank(testCase.userStoreFilename)) {
            InputStream inStream = this.getClass().getResourceAsStream(testCase.userStoreFilename);

            testCase.userStore = gsonBuilder.fromJson(new InputStreamReader(inStream), RangerUserStore.class);
        }

        if (StringUtils.isNotBlank(testCase.gdsInfoFilename)) {
            InputStream inStream = this.getClass().getResourceAsStream(testCase.gdsInfoFilename);

            testCase.gdsInfo = gsonBuilder.fromJson(new InputStreamReader(inStream), ServiceGdsInfo.class);

            if (testCase.gdsInfo != null && testCase.gdsInfo.getGdsServiceDef() == null) {
                RangerServiceDef gdsServiceDef = EmbeddedServiceDefsUtil.instance().getEmbeddedServiceDef(EmbeddedServiceDefsUtil.EMBEDDED_SERVICEDEF_GDS_NAME);

                testCase.gdsInfo.setGdsServiceDef(gdsServiceDef);
            }
        }

        if (testCase.policies != null && testCase.policies.getServiceDef() != null) {
            testCase.policies.getServiceDef().setMarkerAccessTypes(ServiceDefUtil.getMarkerAccessTypes(testCase.policies.getServiceDef().getAccessTypes()));
        }

        return testCase;
    }

    static class RangerBasePluginTestCase {
        public ServicePolicies policies;
        public ServiceTags     tags;
        public RangerRoles     roles;
        public RangerUserStore userStore;
        public ServiceGdsInfo  gdsInfo;
        public String          policiesFilename;
        public String          tagsFilename;
        public String          rolesFilename;
        public String          userStoreFilename;
        public String          gdsInfoFilename;
        public List<TestData>  tests;
    }

    static class TestData {
        public String              name;
        public RangerAccessRequest request;
        public RangerAccessResult  result;
        public RangerResourceACLs  acls;
    }

    static class RangerAccessRequestDeserializer implements JsonDeserializer<RangerAccessRequest> {
        @Override
        public RangerAccessRequest deserialize(JsonElement jsonObj, Type type,
                JsonDeserializationContext context) throws JsonParseException {
            RangerAccessRequestImpl ret = gsonBuilder.fromJson(jsonObj, RangerAccessRequestImpl.class);

            ret.setAccessType(ret.getAccessType()); // to force computation of isAccessTypeAny and isAccessTypeDelegatedAdmin
            if (ret.getAccessTime() == null) {
                ret.setAccessTime(new Date());
            }
            Map<String, Object> reqContext  = ret.getContext();
            Object              accessTypes = reqContext.get(RangerAccessRequestUtil.KEY_CONTEXT_ALL_ACCESSTYPES);
            if (accessTypes != null) {
                Collection<String> accessTypesCollection = (Collection<String>) accessTypes;
                Set<String>        requestedAccesses     = new TreeSet<>(accessTypesCollection);
                ret.getContext().put(RangerAccessRequestUtil.KEY_CONTEXT_ALL_ACCESSTYPES, requestedAccesses);
            }

            Object accessTypeGroups = reqContext.get(RangerAccessRequestUtil.KEY_CONTEXT_ALL_ACCESSTYPE_GROUPS);
            if (accessTypeGroups != null) {
                Set<Set<String>> setOfAccessTypeGroups = new HashSet<>();

                List<Object> listOfAccessTypeGroups = (List<Object>) accessTypeGroups;
                for (Object accessTypeGroup : listOfAccessTypeGroups) {
                    List<String> accesses      = (List<String>) accessTypeGroup;
                    Set<String>  setOfAccesses = new TreeSet<>(accesses);
                    setOfAccessTypeGroups.add(setOfAccesses);
                }

                reqContext.put(RangerAccessRequestUtil.KEY_CONTEXT_ALL_ACCESSTYPE_GROUPS, setOfAccessTypeGroups);
            }

            return ret;
        }
    }

    static class RangerResourceDeserializer implements JsonDeserializer<RangerAccessResource> {
        @Override
        public RangerAccessResource deserialize(JsonElement jsonObj, Type type,
                JsonDeserializationContext context) throws JsonParseException {
            return gsonBuilder.fromJson(jsonObj, RangerAccessResourceImpl.class);
        }
    }
}
