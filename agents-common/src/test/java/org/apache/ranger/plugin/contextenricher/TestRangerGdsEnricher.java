/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package org.apache.ranger.plugin.contextenricher;

import org.apache.ranger.authorization.hadoop.config.RangerPluginConfig;
import org.apache.ranger.plugin.model.RangerServiceDef;
import org.apache.ranger.plugin.policyengine.RangerAccessRequestImpl;
import org.apache.ranger.plugin.policyengine.RangerPluginContext;
import org.apache.ranger.plugin.policyengine.gds.GdsAccessResult;
import org.apache.ranger.plugin.policyengine.gds.GdsPolicyEngine;
import org.apache.ranger.plugin.util.RangerAccessRequestUtil;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.when;

/**
* @generated by Cursor
* @description <Unit Test for RangerGdsEnricher class>
*/
@ExtendWith(MockitoExtension.class)
@TestMethodOrder(MethodOrderer.MethodName.class)
public class TestRangerGdsEnricher {
    @Test
    public void test01_Enrich_With_DataStore_And_Null() {
        RangerGdsEnricher enricher = new RangerGdsEnricher();
        RangerServiceDef serviceDef = new RangerServiceDef();
        serviceDef.setName("hive");
        enricher.setServiceDef(serviceDef);

        GdsPolicyEngine engine = Mockito.mock(GdsPolicyEngine.class);
        GdsAccessResult result = new GdsAccessResult();
        when(engine.evaluate(any())).thenReturn(result);

        RangerAccessRequestImpl request = new RangerAccessRequestImpl();

        // With dataStore engine
        enricher.enrich(request, engine);
        assertEquals(result, RangerAccessRequestUtil.getGdsResultFromContext(request.getContext()));

        // Without dataStore, and internal engine null -> no NPE and null in context
        RangerAccessRequestImpl request2 = new RangerAccessRequestImpl();
        enricher.enrich(request2, null);
        assertNull(RangerAccessRequestUtil.getGdsResultFromContext(request2.getContext()));
    }

    @Test
    public void test02_SetGdsInfo_SetsEngine_And_PreCleanup() {
        RangerGdsEnricher enricher = new RangerGdsEnricher();
        RangerServiceDef serviceDef = new RangerServiceDef();
        serviceDef.setName("hive");
        enricher.setServiceDef(serviceDef);

        // set plugin context and init so serviceDefHelper is initialized and pluginContext is non-null
        RangerPluginConfig cfg = new RangerPluginConfig("hive", "svc", "appid", null, null, null);
        RangerPluginContext ctx = new RangerPluginContext(cfg);
        enricher.setPluginContext(ctx);
        enricher.init();

        // No need to construct a real GdsPolicyEngine here; verify preCleanup path executes safely
        assertTrue(enricher.preCleanup());
    }
}
