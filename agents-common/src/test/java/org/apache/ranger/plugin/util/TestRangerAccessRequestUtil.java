/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.apache.ranger.plugin.util;

import org.apache.ranger.plugin.contextenricher.RangerTagForEval;
import org.apache.ranger.plugin.model.RangerServiceDef;
import org.apache.ranger.plugin.model.RangerTag;
import org.apache.ranger.plugin.policyengine.RangerAccessRequest;
import org.apache.ranger.plugin.policyengine.RangerAccessResource;
import org.apache.ranger.plugin.policyresourcematcher.RangerPolicyResourceMatcher;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Assertions.assertTrue;

/**
* @generated by Cursor
* @description <Unit Test for RangerAccessRequestUtil class>
*/
@ExtendWith(MockitoExtension.class)
@TestMethodOrder(MethodOrderer.MethodName.class)
public class TestRangerAccessRequestUtil {
    @Test
    public void test01_setAndGetTagsAndCurrentTag() {
        Map<String, Object> ctx = new HashMap<>();
        RangerAccessRequestUtil.setRequestTagsInContext(ctx, null);
        assertNull(RangerAccessRequestUtil.getRequestTagsFromContext(ctx));
        Set<RangerTagForEval> tags = new HashSet<>();
        RangerTag tag = new RangerTag();
        tag.setType("T");
        tags.add(new RangerTagForEval(tag, RangerPolicyResourceMatcher.MatchType.SELF));
        RangerAccessRequestUtil.setRequestTagsInContext(ctx, tags);
        assertEquals(tags, RangerAccessRequestUtil.getRequestTagsFromContext(ctx));

        RangerAccessRequestUtil.setCurrentTagInContext(ctx, null);
        assertNull(RangerAccessRequestUtil.getCurrentTagFromContext(ctx));
    }

    @Test
    public void test02_requestedResourcesAndResourceAndCopyContext() {
        Map<String, Object> ctx = new HashMap<>();
        RangerRequestedResources reqRes = new RangerRequestedResources();
        RangerAccessRequestUtil.setRequestedResourcesInContext(ctx, reqRes);
        assertEquals(reqRes, RangerAccessRequestUtil.getRequestedResourcesFromContext(ctx));

        RangerAccessResource resource = new RangerAccessResource() {
            public String getOwnerUser() {
                return null;
            }

            public boolean exists(String name) {
                return false;
            }

            public Object getValue(String name) {
                return null;
            }

            public RangerServiceDef getServiceDef() {
                return null;
            }

            public Set<String> getKeys() {
                return Collections.emptySet();
            }

            public String getLeafName() {
                return null;
            }

            public String getAsString() {
                return "";
            }

            public String getCacheKey() {
                return "k";
            }

            public Map<String, Object> getAsMap() {
                return Collections.emptyMap();
            }

            public RangerAccessResource getReadOnlyCopy() {
                return this;
            }
        };
        RangerAccessRequestUtil.setCurrentResourceInContext(ctx, resource);
        assertEquals(resource, RangerAccessRequestUtil.getCurrentResourceFromContext(ctx));

        ctx.put(RangerAccessRequestUtil.KEY_CONTEXT_TAGS, new Object());
        ctx.put(RangerAccessRequestUtil.KEY_CONTEXT_TAG_OBJECT, new Object());
        ctx.put(RangerAccessRequestUtil.KEY_CONTEXT_RESOURCE, new Object());
        ctx.put(RangerAccessRequestUtil.KEY_CONTEXT_REQUEST, new Object());
        ctx.put(RangerAccessRequestUtil.KEY_CONTEXT_GDS_RESULT, new Object());
        ctx.put(RangerAccessRequestUtil.KEY_CONTEXT_IS_ANY_ACCESS, Boolean.TRUE);
        ctx.put(RangerAccessRequestUtil.KEY_CONTEXT_ALL_ACCESSTYPES, new Object());
        ctx.put(RangerAccessRequestUtil.KEY_CONTEXT_ALL_ACCESSTYPE_GROUPS, new Object());
        ctx.put(RangerAccessRequestUtil.KEY_CONTEXT_ALL_ACCESS_TYPE_RESULTS, new Object());
        ctx.put(RangerAccessRequestUtil.KEY_CONTEXT_ALL_ACCESS_TYPE_ACL_RESULTS, new Object());
        ctx.put(RangerAccessRequestUtil.KEY_CONTEXT_IS_REQUEST_PREPROCESSED, Boolean.TRUE);
        ctx.put(RangerAccessRequestUtil.KEY_CONTEXT_IGNORE_IF_NOT_DENIED_ACCESSTYPES, new Object());

        Map<String, Object> copy = RangerAccessRequestUtil.copyContext(ctx);
        assertFalse(copy.containsKey(RangerAccessRequestUtil.KEY_CONTEXT_TAGS));
        assertFalse(copy.containsKey(RangerAccessRequestUtil.KEY_CONTEXT_TAG_OBJECT));
        assertFalse(copy.containsKey(RangerAccessRequestUtil.KEY_CONTEXT_RESOURCE));
        assertFalse(copy.containsKey(RangerAccessRequestUtil.KEY_CONTEXT_REQUEST));
        assertFalse(copy.containsKey(RangerAccessRequestUtil.KEY_CONTEXT_GDS_RESULT));
        assertFalse(copy.containsKey(RangerAccessRequestUtil.KEY_CONTEXT_IS_ANY_ACCESS));
        assertFalse(copy.containsKey(RangerAccessRequestUtil.KEY_CONTEXT_ALL_ACCESSTYPES));
        assertFalse(copy.containsKey(RangerAccessRequestUtil.KEY_CONTEXT_ALL_ACCESSTYPE_GROUPS));
        assertFalse(copy.containsKey(RangerAccessRequestUtil.KEY_CONTEXT_ALL_ACCESS_TYPE_RESULTS));
        assertFalse(copy.containsKey(RangerAccessRequestUtil.KEY_CONTEXT_ALL_ACCESS_TYPE_ACL_RESULTS));
        assertFalse(copy.containsKey(RangerAccessRequestUtil.KEY_CONTEXT_IS_REQUEST_PREPROCESSED));
        assertFalse(copy.containsKey(RangerAccessRequestUtil.KEY_CONTEXT_IGNORE_IF_NOT_DENIED_ACCESSTYPES));
    }

    @Test
    public void test03_tokens_users_roles_and_flags() {
        Map<String, Object> ctx = new HashMap<>();
        RangerAccessRequestUtil.setCurrentUserInContext(ctx, "u");
        RangerAccessRequestUtil.setOwnerInContext(ctx, "o");
        assertEquals("u", RangerAccessRequestUtil.getCurrentUserFromContext(ctx));
        RangerAccessRequestUtil.setTokenInContext(ctx, "custom", 5);
        assertEquals(5, RangerAccessRequestUtil.getTokenFromContext(ctx, "custom"));

        RangerAccessRequestUtil.setIsAnyAccessInContext(ctx, Boolean.TRUE);
        assertTrue(RangerAccessRequestUtil.getIsAnyAccessInContext(ctx));
        RangerAccessRequestUtil.setIsRequestPreprocessed(ctx, Boolean.TRUE);
        assertTrue(RangerAccessRequestUtil.getIsRequestPreprocessed(ctx));

        Set<String> rs = new HashSet<>();
        rs.add("r1");
        RangerAccessRequestUtil.setCurrentUserRolesInContext(ctx, rs);
        assertEquals(rs, RangerAccessRequestUtil.getCurrentUserRolesFromContext(ctx));

        RangerAccessRequest req = new RangerAccessRequest() {
            public RangerAccessResource getResource() {
                return null;
            }

            public String getAccessType() {
                return null;
            }

            public boolean isAccessTypeAny() {
                return false;
            }

            public boolean isAccessTypeDelegatedAdmin() {
                return false;
            }

            public String getUser() {
                return "user";
            }

            public Set<String> getUserGroups() {
                return Collections.emptySet();
            }

            public Set<String> getUserRoles() {
                return Collections.emptySet();
            }

            public Date getAccessTime() {
                return null;
            }

            public String getClientIPAddress() {
                return null;
            }

            public String getRemoteIPAddress() {
                return null;
            }

            public List<String> getForwardedAddresses() {
                return Collections.emptyList();
            }

            public String getClientType() {
                return null;
            }

            public String getAction() {
                return null;
            }

            public String getRequestData() {
                return null;
            }

            public String getSessionId() {
                return null;
            }

            public String getClusterName() {
                return null;
            }

            public String getClusterType() {
                return null;
            }

            public Map<String, Object> getContext() {
                return ctx;
            }

            public RangerAccessRequest getReadOnlyCopy() {
                return this;
            }

            public ResourceMatchingScope getResourceMatchingScope() {
                return ResourceMatchingScope.SELF;
            }
        };
        assertEquals(rs, RangerAccessRequestUtil.getUserRoles(req));
    }
}
