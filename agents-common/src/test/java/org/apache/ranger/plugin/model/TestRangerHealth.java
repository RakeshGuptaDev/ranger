/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package org.apache.ranger.plugin.model;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;

import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;

import static org.apache.ranger.plugin.model.RangerServerHealth.RangerServerStatus.DOWN;
import static org.apache.ranger.plugin.model.RangerServerHealth.RangerServerStatus.UP;

/**
* @generated by Cursor
* @description <Unit Test for TestRangerHealth class>
*/
@ExtendWith(MockitoExtension.class)
@TestMethodOrder(MethodOrderer.MethodName.class)
public class TestRangerHealth {
    @Test
    public void testRangerStatusUP() {
        Map<String, Object> componentsMap = new HashMap<>();
        Map<String, Object> dbMap         = new LinkedHashMap<>();

        dbMap.put("status", UP);

        Map<String, Object> dbDetailsMap = new LinkedHashMap<>();

        dbDetailsMap.put("database", "Oracle 21.3c");
        dbDetailsMap.put("validationQuery", "SELECT banner from v$version where rownum<2");

        dbMap.put("details", dbDetailsMap);
        componentsMap.put("db", dbMap);

        Map<String, Object> auditProviderMap = new LinkedHashMap<>();

        auditProviderMap.put("status", UP);

        Map<String, Object> auditProviderDetailsMap = new LinkedHashMap<>();
        auditProviderDetailsMap.put("provider", "Elastic Search");
        auditProviderDetailsMap.put("providerHealthCheckEndpoint", "http://localhost:9200/_cluster/health?pretty");

        auditProviderMap.put("details", auditProviderDetailsMap);

        componentsMap.put("auditProvider", auditProviderMap);

        RangerServerHealth rangerHealth = RangerServerHealth.up().withDetail("components", componentsMap).build();

        Assertions.assertEquals(UP, rangerHealth.getStatus(), "RangerHealth.up()");
        Assertions.assertEquals(1, rangerHealth.getDetails().size(), "RangerHealth.getDetails()");
        Assertions.assertEquals(2, ((Map<?, ?>) rangerHealth.getDetails().get("components")).size(), "RangerHealth.getDetails('component')");
    }

    @Test
    public void testRangerStatusDOWN() {
        Map<String, Object> componentsMap = new HashMap<>();
        Map<String, Object> dbMap         = new LinkedHashMap<>();

        dbMap.put("status", DOWN);

        Map<String, Object> dbDetailsMap = new LinkedHashMap<>();

        dbDetailsMap.put("database", "Oracle 21.3c");
        dbDetailsMap.put("validationQuery", "SELECT banner from v$version where rownum<2");

        dbMap.put("details", dbDetailsMap);
        componentsMap.put("db", dbMap);

        Map<String, Object> auditProviderMap = new LinkedHashMap<>();
        auditProviderMap.put("status", DOWN);

        Map<String, Object> auditProviderDetailsMap = new LinkedHashMap<>();

        auditProviderDetailsMap.put("provider", "Elastic Search");
        auditProviderDetailsMap.put("providerHealthCheckEndpoint", "http://localhost:9200/_cluster/health?pretty");

        auditProviderMap.put("details", auditProviderDetailsMap);
        componentsMap.put("auditProvider", auditProviderMap);

        RangerServerHealth rangerHealth = RangerServerHealth.down().withDetail("components", componentsMap).build();

        Assertions.assertEquals(DOWN, rangerHealth.getStatus(), "RangerHealth.down()");
        Assertions.assertEquals(1, rangerHealth.getDetails().size(), "RangerHealth.getDetails()");
        Assertions.assertEquals(2, ((Map<?, ?>) rangerHealth.getDetails().get("components")).size(), "RangerHealth.getDetails('component')");
    }

    @Test
    public void testRangerStatusUnknownToStringAndImmutability() {
        RangerServerHealth unknown = RangerServerHealth.unknown().build();

        Assertions.assertEquals(RangerServerHealth.RangerServerStatus.UNKNOWN, unknown.getStatus());
        Assertions.assertTrue(unknown.getDetails().isEmpty());
        Assertions.assertEquals("UNKNOWN {}", unknown.toString());

        try {
            unknown.getDetails().put("x", "y");
            Assertions.fail("details map should be unmodifiable");
        } catch (UnsupportedOperationException expected) {
            // expected
        }
    }

    @Test
    public void testStatusInitializingAndInitFailure() {
        RangerServerHealth initializing = RangerServerHealth.status(RangerServerHealth.RangerServerStatus.INITIALIZING)
                .withDetail("phase", "boot").build();
        RangerServerHealth initFailure = RangerServerHealth.status(RangerServerHealth.RangerServerStatus.INITIALIZATION_FAILURE)
                .withDetail("error", "db").build();

        Assertions.assertEquals(RangerServerHealth.RangerServerStatus.INITIALIZING, initializing.getStatus());
        Assertions.assertEquals("boot", initializing.getDetails().get("phase"));

        Assertions.assertEquals(RangerServerHealth.RangerServerStatus.INITIALIZATION_FAILURE, initFailure.getStatus());
        Assertions.assertEquals("db", initFailure.getDetails().get("error"));
    }

    @Test
    public void testBuilderConstructors() {
        RangerServerHealth.Builder defaultBuilder = new RangerServerHealth.Builder();
        RangerServerHealth def = defaultBuilder.build();
        Assertions.assertEquals(RangerServerHealth.RangerServerStatus.UNKNOWN, def.getStatus());
        Assertions.assertTrue(def.getDetails().isEmpty());

        RangerServerHealth.Builder upBuilder = new RangerServerHealth.Builder(RangerServerHealth.RangerServerStatus.UP);
        RangerServerHealth upHealth = upBuilder.withDetail("k", "v").build();
        Assertions.assertEquals(RangerServerHealth.RangerServerStatus.UP, upHealth.getStatus());
        Assertions.assertEquals("v", upHealth.getDetails().get("k"));

        Map<String, Object> seed = new LinkedHashMap<>();
        seed.put("a", 1);
        seed.put("b", 2);
        RangerServerHealth.Builder seeded = new RangerServerHealth.Builder(RangerServerHealth.RangerServerStatus.DOWN, seed);
        RangerServerHealth downHealth = seeded.build();
        Assertions.assertEquals(RangerServerHealth.RangerServerStatus.DOWN, downHealth.getStatus());
        Assertions.assertEquals(2, downHealth.getDetails().size());
        Assertions.assertEquals(1, downHealth.getDetails().get("a"));
        Assertions.assertEquals(2, downHealth.getDetails().get("b"));
    }

    @Test
    public void testEqualsAndHashCode() {
        Map<String, Object> details1 = new LinkedHashMap<>();
        details1.put("x", 1);
        details1.put("y", 2);

        Map<String, Object> details2 = new LinkedHashMap<>();
        details2.put("x", 1);
        details2.put("y", 2);

        RangerServerHealth h1 = new RangerServerHealth.Builder(RangerServerHealth.RangerServerStatus.UP, details1).build();
        RangerServerHealth h2 = new RangerServerHealth.Builder(RangerServerHealth.RangerServerStatus.UP, details2).build();
        RangerServerHealth h3 = new RangerServerHealth.Builder(RangerServerHealth.RangerServerStatus.DOWN, details1).build();

        Assertions.assertEquals(h1, h1); // reflexive
        Assertions.assertEquals(h1, h2);
        Assertions.assertEquals(h1.hashCode(), h2.hashCode());

        Assertions.assertNotEquals(h1, h3);
        Assertions.assertNotEquals(h1, null);
        Assertions.assertNotEquals(h1, "not-a-health");
    }
}
