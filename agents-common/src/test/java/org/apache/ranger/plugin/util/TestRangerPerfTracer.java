/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.apache.ranger.plugin.util;

import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.slf4j.Logger;

import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertNull;

/**
* @generated by Cursor
* @description <Unit Test for RangerPerfTracer class>
*/
@ExtendWith(MockitoExtension.class)
@TestMethodOrder(MethodOrderer.MethodName.class)
public class TestRangerPerfTracer {
    @Test
    public void test01_getPerfTracer_returnsNullWhenDebugDisabled() {
        Logger logger = Mockito.mock(Logger.class);
        Mockito.when(logger.isDebugEnabled()).thenReturn(false);
        RangerPerfTracer tracer = RangerPerfTracer.getPerfTracer(logger, "TAG");
        assertNull(tracer);
    }

    @Test
    public void test02_getPerfTracer_parsesTagAndDataWhenDebugEnabled() {
        Logger logger = Mockito.mock(Logger.class);
        Mockito.when(logger.isDebugEnabled()).thenReturn(true);

        RangerPerfTracer tracer = RangerPerfTracer.getPerfTracer(logger, "op(arg1,arg2) more");
        assertNotNull(tracer);
        RangerPerfTracer.log(tracer);
        RangerPerfTracer.logAlways(tracer);
    }

    @Test
    public void test03_perfCollectorPath_usesPerfDataRecorder() {
        // initialize recorder so that getPerfTracer path chooses
        // RangerPerfCollectorTracer
        PerfDataRecorder.initialize(true, 0, false, null);
        Logger logger = Mockito.mock(Logger.class);
        Mockito.when(logger.isDebugEnabled()).thenReturn(true);
        RangerPerfTracer tracer = RangerPerfTracer.getPerfTracer(logger, "collect(tag)");
        assertNotNull(tracer);
        RangerPerfTracer.log(tracer);
        RangerPerfTracer.logAlways(tracer);
    }
}
