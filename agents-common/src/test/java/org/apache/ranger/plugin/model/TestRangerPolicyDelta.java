/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package org.apache.ranger.plugin.model;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;

import java.util.HashMap;
import java.util.Map;

/**
* @generated by Cursor
* @description <Unit Test for RangerPolicyDelta class>
*/
@TestMethodOrder(MethodOrderer.MethodName.class)
@ExtendWith(MockitoExtension.class)
public class TestRangerPolicyDelta {
    @Test
    public void test01_defaultsAndNullPolicyBranch() {
        RangerPolicyDelta delta = new RangerPolicyDelta(1L, RangerPolicyDelta.CHANGE_TYPE_POLICY_CREATE, 5L, null);

        Assertions.assertEquals(1L, delta.getId());
        Assertions.assertEquals(RangerPolicyDelta.CHANGE_TYPE_POLICY_CREATE, delta.getChangeType());
        Assertions.assertNull(delta.getServiceType());
        Assertions.assertNull(delta.getPolicyType());
        Assertions.assertNull(delta.getPolicyId());
        Assertions.assertNull(delta.getZoneName());

        // dedupStrings should be a no-op when policy is null
        Map<String, String> tbl = new HashMap<>();
        delta.dedupStrings(tbl);

        String s = delta.toString();
        Assertions.assertTrue(s.contains("id:1"));
        Assertions.assertTrue(s.contains("POLICY_CREATE"));
    }

    @Test
    public void test02_nonNullPolicyBranchAndGetters() {
        RangerPolicy policy = new RangerPolicy();
        policy.setId(99L);
        policy.setServiceType("hive");
        policy.setPolicyType(7);
        policy.setZoneName("zoneA");

        RangerPolicyDelta delta = new RangerPolicyDelta(2L, RangerPolicyDelta.CHANGE_TYPE_POLICY_UPDATE, 6L, policy);

        Assertions.assertEquals("hive", delta.getServiceType());
        Assertions.assertEquals(7, delta.getPolicyType());
        Assertions.assertEquals(99L, delta.getPolicyId());
        Assertions.assertEquals("zoneA", delta.getZoneName());

        Map<String, String> tbl = new HashMap<>();
        tbl.put("hive", "hive");
        delta.dedupStrings(tbl);

        String s = delta.toString();
        Assertions.assertTrue(s.contains("POLICY_UPDATE"));
        Assertions.assertTrue(s.contains("policyId:[99]"));
    }
}
