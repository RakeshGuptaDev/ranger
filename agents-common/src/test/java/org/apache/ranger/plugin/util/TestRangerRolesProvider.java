/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.apache.ranger.plugin.util;

import org.apache.hadoop.conf.Configuration;
import org.apache.ranger.admin.client.RangerAdminClient;
import org.apache.ranger.authorization.hadoop.config.RangerPluginConfig;
import org.apache.ranger.plugin.model.RangerRole;
import org.apache.ranger.plugin.service.RangerBasePlugin;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;

import java.io.File;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.List;

import static org.junit.jupiter.api.Assertions.assertTrue;

/**
* @generated by Cursor
* @description <Unit Test for RangerRolesProvider class>
*/
@ExtendWith(MockitoExtension.class)
@TestMethodOrder(MethodOrderer.MethodName.class)
public class TestRangerRolesProvider {
    public static class AdminNull implements RangerAdminClient {
        @Override
        public void init(String serviceName, String appId, String configPropertyPrefix, Configuration config) {
        }

        @Override
        public ServicePolicies getServicePoliciesIfUpdated(long lastKnownVersion, long lastActivationTimeInMillis) {
            return null;
        }

        @Override
        public RangerRoles getRolesIfUpdated(long lastKnownRoleVersion, long lastActivationTimeInMills) throws Exception {
            return null;
        }

        @Override
        public RangerRole createRole(RangerRole request) {
            return null;
        }

        @Override
        public void dropRole(String execUser, String roleName) {
        }

        @Override
        public List<String> getAllRoles(String execUser) {
            return null;
        }

        @Override
        public List<String> getUserRoles(String execUser) {
            return null;
        }

        @Override
        public RangerRole getRole(String execUser, String roleName) {
            return null;
        }

        @Override
        public void grantRole(GrantRevokeRoleRequest request) {
        }

        @Override
        public void revokeRole(GrantRevokeRoleRequest request) {
        }

        @Override
        public void grantAccess(GrantRevokeRequest request) {
        }

        @Override
        public void revokeAccess(GrantRevokeRequest request) {
        }

        @Override
        public ServiceTags getServiceTagsIfUpdated(long lastKnownVersion, long lastActivationTimeInMillis) {
            return null;
        }

        @Override
        public List<String> getTagTypes(String tagTypePattern) {
            return null;
        }

        @Override
        public RangerUserStore getUserStoreIfUpdated(long lastKnownUserStoreVersion, long lastActivationTimeInMillis) {
            return null;
        }

        @Override
        public ServiceGdsInfo getGdsInfoIfUpdated(long lastKnownVersion, long lastActivationTimeInMillis) {
            return null;
        }
    }

    public static class AdminThrowsSNF extends AdminNull {
        @Override
        public RangerRoles getRolesIfUpdated(long lastKnownRoleVersion, long lastActivationTimeInMills) throws RangerServiceNotFoundException {
            throw new RangerServiceNotFoundException("svcName");
        }
    }

    public static class CapturingPlugin extends RangerBasePlugin {
        public RangerRoles lastRoles;

        public CapturingPlugin() {
            super(new RangerPluginConfig("svcType", "svcName", "appId", null, null, null));
        }

        @Override
        public void setRoles(RangerRoles roles) {
            this.lastRoles = roles;
        }
    }

    @Test
    public void test01_loadUserGroupRoles_createsCacheWhenAdminReturnsNull() throws Exception {
        Path tmp = Files.createTempDirectory("roles-cache");
        String cacheDir = tmp.toFile().getAbsolutePath();
        CapturingPlugin plugin = new CapturingPlugin();
        RangerRolesProvider provider = new RangerRolesProvider("svcType", "appId", "svcName", new AdminNull(), cacheDir,
                plugin.getConfig());
        provider.loadUserGroupRoles(plugin);
        // cache file should exist
        File[] files = new File(cacheDir).listFiles((dir, name) -> name.contains("_svcName_roles.json"));
        assertTrue(files != null && files.length == 1);
        assertTrue(plugin.lastRoles != null);
    }

    @Test
    public void test02_disableCacheOnServiceNotFound_renamesCache() throws Exception {
        Path tmp = Files.createTempDirectory("roles-cache-snf");
        String cacheDir = tmp.toFile().getAbsolutePath();
        // pre-create a dummy cache file to be renamed
        File cache = new File(cacheDir, "appId_svcName_roles.json");
        cache.getParentFile().mkdirs();
        Files.write(cache.toPath(), "{}".getBytes(StandardCharsets.UTF_8));

        CapturingPlugin plugin = new CapturingPlugin();
        RangerRolesProvider provider = new RangerRolesProvider("svcType", "appId", "svcName", new AdminThrowsSNF(),
                cacheDir, plugin.getConfig());
        provider.loadUserGroupRoles(plugin);
        // original file should be moved or deleted
        File[] backups = new File(cacheDir).listFiles((dir, name) -> name.startsWith("appId_svcName_roles.json_"));
        assertTrue(!cache.exists() || (backups != null && backups.length >= 1));
    }
}
