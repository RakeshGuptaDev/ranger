/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package org.apache.ranger.plugin.store;

import org.apache.ranger.plugin.model.RangerGds;
import org.apache.ranger.plugin.model.RangerPolicy;
import org.apache.ranger.plugin.util.SearchFilter;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;

import java.util.Collection;
import java.util.List;

/**
 * @generated by Cursor
 * @description <Unit Test for AbstractGdsStore class>
 */
@ExtendWith(MockitoExtension.class)
@TestMethodOrder(MethodOrderer.MethodName.class)
public class TestAbstractGdsStore {
    private static class MyGdsStore extends AbstractGdsStore {
        @Override
        public void deleteAllGdsObjectsForService(Long serviceId) {
        }

        @Override
        public void deleteAllGdsObjectsForSecurityZone(Long zoneId) {
        }

        @Override
        public void onSecurityZoneUpdate(Long zoneId, Collection<String> updatedServices,
                Collection<String> removedServices) {
        }

        @Override
        public List<RangerPolicy> getProjectPolicies(Long projectId) throws Exception {
            return null;
        }

        @Override
        public RangerPolicy addDatasetPolicy(Long datasetId, RangerPolicy policy) throws Exception {
            return null;
        }

        @Override
        public RangerPolicy updateDatasetPolicy(Long datasetId, RangerPolicy policy) throws Exception {
            return null;
        }

        @Override
        public void deleteDatasetPolicy(Long datasetId, Long policyId) throws Exception {
        }

        @Override
        public void deleteDatasetPolicies(Long datasetId) throws Exception {
        }

        @Override
        public RangerPolicy getDatasetPolicy(Long datasetId, Long policyId) throws Exception {
            return null;
        }

        @Override
        public List<RangerPolicy> getDatasetPolicies(Long datasetId) throws Exception {
            return null;
        }

        @Override
        public RangerPolicy addProjectPolicy(Long projectId, RangerPolicy policy) throws Exception {
            return null;
        }

        @Override
        public RangerPolicy updateProjectPolicy(Long projectId, RangerPolicy policy) throws Exception {
            return null;
        }

        @Override
        public void deleteProjectPolicy(Long projectId, Long policyId) throws Exception {
        }

        @Override
        public void deleteProjectPolicies(Long projectId) throws Exception {
        }

        @Override
        public RangerPolicy getProjectPolicy(Long projectId, Long policyId) throws Exception {
            return null;
        }
    }

    @Test
    public void test01_defaultReturnsNullsAndNoThrow() throws Exception {
        MyGdsStore s = new MyGdsStore();
        Assertions.assertNull(s.createDataset(new RangerGds.RangerDataset()));
        Assertions.assertNull(s.updateDataset(new RangerGds.RangerDataset()));
        s.deleteDataset(1L, true);
        Assertions.assertNull(s.getDataset(1L));
        Assertions.assertNull(s.getDatasetByName("n"));
        Assertions.assertNull(s.getDatasetNames(new SearchFilter()));
        Assertions.assertNull(s.searchDatasets(new SearchFilter()));
        Assertions.assertNull(s.createProject(new RangerGds.RangerProject()));
        Assertions.assertNull(s.updateProject(new RangerGds.RangerProject()));
        s.deleteProject(1L, true);
        Assertions.assertNull(s.getProject(1L));
        Assertions.assertNull(s.getProjectByName("p"));
        Assertions.assertNull(s.getProjectNames(new SearchFilter()));
        Assertions.assertNull(s.searchProjects(new SearchFilter()));
        Assertions.assertNull(s.createDataShare(new RangerGds.RangerDataShare()));
        Assertions.assertNull(s.updateDataShare(new RangerGds.RangerDataShare()));
        s.deleteDataShare(1L, true);
        Assertions.assertNull(s.getDataShare(1L));
        Assertions.assertNull(s.searchDataShares(new SearchFilter()));
        Assertions.assertNull(s.addSharedResources(null));
        Assertions.assertNull(s.updateSharedResource(new RangerGds.RangerSharedResource()));
        s.removeSharedResources(null);
        Assertions.assertNull(s.getSharedResource(1L));
        Assertions.assertNull(s.searchSharedResources(new SearchFilter()));
        Assertions.assertNull(s.addDataShareInDataset(new RangerGds.RangerDataShareInDataset()));
        Assertions.assertNull(s.updateDataShareInDataset(new RangerGds.RangerDataShareInDataset()));
        s.removeDataShareInDataset(1L);
        Assertions.assertNull(s.getDataShareInDataset(1L));
        Assertions.assertNull(s.searchDataShareInDatasets(new SearchFilter()));
        Assertions.assertNull(s.addDatasetInProject(new RangerGds.RangerDatasetInProject()));
        Assertions.assertNull(s.updateDatasetInProject(new RangerGds.RangerDatasetInProject()));
        s.removeDatasetInProject(1L);
        Assertions.assertNull(s.getDatasetInProject(1L));
        Assertions.assertNull(s.searchDatasetInProjects(new SearchFilter()));
    }
}
