/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package org.apache.ranger.plugin.geo;

import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;

import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Path;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Assertions.assertTrue;

/**
* @generated by Cursor
* @description <Unit Test for RangerGeolocationDatabase class>
*/
@ExtendWith(MockitoExtension.class)
@TestMethodOrder(MethodOrderer.MethodName.class)
public class TestRangerGeolocationDatabase {
    @Test
    public void test01_getValue_branches_and_valid() {
        RangerGeolocationDatabase db = new RangerGeolocationDatabase();
        assertNull(db.getValue(null, "Country"));
        assertNull(db.getValue(RangerGeolocationData.create(new String[] {"1.1.1.1", "1.1.1.1", "US"}, 0, true), ""));

        GeolocationMetadata md = GeolocationMetadata.create(new String[] {"FROM", "TO", "Country"}, 0);
        db.setMetadata(md);
        RangerGeolocationData data = RangerGeolocationData.create(new String[] {"1.1.1.1", "1.1.1.1", "US"}, 0, true);
        assertEquals("US", db.getValue(data, "Country"));
        assertNull(db.getValue(data, "Region"));

        GeolocationMetadata md2 = GeolocationMetadata.create(new String[] {"FROM", "TO", "Country", "Region"}, 0);
        db.setMetadata(md2);
        RangerGeolocationData oneEntry = RangerGeolocationData.create(new String[] {"1.1.1.1", "1.1.1.1", "X"}, 0, true);
        assertNull(db.getValue(oneEntry, "Region"));
    }

    @Test
    public void test02_find_and_optimize_and_dataMetadataAccessors() {
        RangerGeolocationDatabase db = new RangerGeolocationDatabase();
        assertNull(db.find(""));
        assertNull(db.find("not.an.ip"));
        assertNull(db.find("2001:db8::1"));

        RangerGeolocationData data = RangerGeolocationData.create(new String[] {"2.2.2.2", "2.2.2.3", "Y"}, 0, true);
        db.getData().insert(data);
        assertEquals(data, db.find("2.2.2.2"));

        assertNotNull(db.getMetadata());
        db.setMetadata(null);
        assertNotNull(db.getMetadata());

        assertNotNull(db.getData());
        db.setData(null);
        assertNotNull(db.getData());

        db.optimize();
    }

    @Test
    public void test03_dump_writesToFile() throws IOException {
        RangerGeolocationDatabase db = new RangerGeolocationDatabase();
        GeolocationMetadata md = GeolocationMetadata.create(new String[] {"FROM", "TO", "Country", "Region"}, 0);
        db.setMetadata(md);
        RangerGeolocationData a = RangerGeolocationData.create(new String[] {"3.3.3.3", "3.3.3.4", "US", "CA"}, 0, true);
        db.getData().insert(a);

        Path tmp = Files.createTempFile("geo-dump", ".txt");
        try {
            ValuePrinter<RangerGeolocationData> printer = new ValuePrinter<>(tmp.toAbsolutePath().toString());
            db.dump(printer);
            String content = new String(Files.readAllBytes(tmp), StandardCharsets.UTF_8);
            assertTrue(content.contains("Geolocation metadata"));
            assertTrue(content.contains("Dump of geoDatabase"));
            assertTrue(content.contains("from=3.3.3.3"));
        } finally {
            Files.deleteIfExists(tmp);
        }
    }
}
