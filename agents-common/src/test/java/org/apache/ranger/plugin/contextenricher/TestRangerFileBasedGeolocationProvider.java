/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package org.apache.ranger.plugin.contextenricher;

import org.apache.ranger.authorization.hadoop.config.RangerPluginConfig;
import org.apache.ranger.plugin.model.RangerServiceDef;
import org.apache.ranger.plugin.policyengine.RangerAccessRequestImpl;
import org.apache.ranger.plugin.policyengine.RangerPluginContext;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;

import java.util.HashMap;
import java.util.Map;

import static org.junit.jupiter.api.Assertions.assertTrue;

/**
* @generated by Cursor
* @description <Unit Test for RangerFileBasedGeolocationProvider class>
*/
@ExtendWith(MockitoExtension.class)
@TestMethodOrder(MethodOrderer.MethodName.class)
public class TestRangerFileBasedGeolocationProvider {
    @Test
    public void test01_Init_And_Enrich_SetsLocationKeys() {
        RangerFileBasedGeolocationProvider provider = new RangerFileBasedGeolocationProvider();

        RangerServiceDef svcDef = new RangerServiceDef();
        svcDef.setName("hive");

        Map<String, String> enricherOptions = new HashMap<>();
        enricherOptions.put(RangerAbstractGeolocationProvider.ENRICHER_OPTION_GEOLOCATION_META_PREFIX, "");
        // File-based store reads path using key "FilePath"
        enricherOptions.put("FilePath", "/etc/ranger/geo/geo.txt");

        RangerServiceDef.RangerContextEnricherDef def = new RangerServiceDef.RangerContextEnricherDef(1L, "Geo", provider.getClass().getName(), enricherOptions);

        provider.setServiceDef(svcDef);
        provider.setServiceName("svc");
        provider.setAppId("appid");
        provider.setEnricherDef(def);

        RangerPluginConfig  pluginConfig  = new RangerPluginConfig("hive", "svc", "appid", null, null, null);
        RangerPluginContext pluginContext = new RangerPluginContext(pluginConfig);
        provider.setPluginContext(pluginContext);

        provider.init();

        RangerAccessRequestImpl req = new RangerAccessRequestImpl();
        req.setClientIPAddress("20.0.100.85"); // present in default geo data resource range in geo.txt

        provider.enrich(req);

        Map<String, Object> ctx = req.getContext();
        // We expect country and city fields to be populated with LOCATION_ prefix
        boolean hasAnyGeo = ctx.keySet().stream().anyMatch(k -> k.startsWith(RangerAbstractGeolocationProvider.KEY_CONTEXT_GEOLOCATION_PREFIX));
        assertTrue(hasAnyGeo);
    }
}
