/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package org.apache.ranger.plugin.contextenricher;

import org.apache.ranger.admin.client.RangerAdminClient;
import org.apache.ranger.authorization.hadoop.config.RangerPluginConfig;
import org.apache.ranger.plugin.model.RangerServiceDef;
import org.apache.ranger.plugin.policyengine.RangerPluginContext;
import org.apache.ranger.plugin.util.ServiceGdsInfo;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;

import java.nio.channels.ClosedByInterruptException;
import java.util.HashMap;
import java.util.Map;

import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.mockito.ArgumentMatchers.anyLong;
import static org.mockito.Mockito.doThrow;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

/**
* @generated by Cursor
* @description <Unit Test for RangerAdminGdsInfoRetriever class>
*/
@ExtendWith(MockitoExtension.class)
@TestMethodOrder(MethodOrderer.MethodName.class)
public class TestRangerAdminGdsInfoRetriever {
    @Test
    public void test01_Init_UsesProvidedAdminClient_And_NoDedup() throws Exception {
        RangerAdminGdsInfoRetriever retriever = new RangerAdminGdsInfoRetriever();
        RangerServiceDef def = new RangerServiceDef();
        def.setName("svcType");
        retriever.setServiceName("svc");
        retriever.setServiceDef(def);
        retriever.setAppId("app");

        RangerPluginConfig config = new RangerPluginConfig(def.getName(), "svc", "app", null, null, null);
        RangerPluginContext pluginCtx = new RangerPluginContext(config);
        RangerAdminClient admin = mock(RangerAdminClient.class);
        pluginCtx.setAdminClient(admin);
        retriever.setPluginContext(pluginCtx);

        Map<String, String> opts = new HashMap<>();
        opts.put("deDupTags", "false");
        retriever.init(opts);

        ServiceGdsInfo info = mock(ServiceGdsInfo.class);
        when(admin.getGdsInfoIfUpdated(anyLong(), anyLong())).thenReturn(info);

        ServiceGdsInfo out = retriever.retrieveGdsInfo(-1L, -1L);
        assertNotNull(out);
        verify(info, times(0)).dedupStrings();
    }

    @Test
    public void test02_Init_CreatesAdminClient_WhenNotProvided_And_DedupTrue() throws Exception {
        RangerAdminGdsInfoRetriever retriever = new RangerAdminGdsInfoRetriever();
        RangerServiceDef def = new RangerServiceDef();
        def.setName("svcType");
        retriever.setServiceName("svc");
        retriever.setServiceDef(def);
        retriever.setAppId("app");

        RangerPluginConfig config = new RangerPluginConfig(def.getName(), "svc", "app", null, null, null);
        RangerPluginContext pluginCtx = new RangerPluginContext(config);
        RangerAdminClient admin = mock(RangerAdminClient.class);
        pluginCtx.setAdminClient(admin);
        retriever.setPluginContext(pluginCtx);

        Map<String, String> opts = new HashMap<>();
        opts.put("deDupTags", "true");
        retriever.init(opts);

        ServiceGdsInfo info = mock(ServiceGdsInfo.class);
        when(admin.getGdsInfoIfUpdated(anyLong(), anyLong())).thenReturn(info);

        ServiceGdsInfo out = retriever.retrieveGdsInfo(0L, 0L);
        assertNotNull(out);
        verify(info, times(1)).dedupStrings();
    }

    @Test
    public void test03_Init_MissingService_LogsError_NoCrash() {
        RangerAdminGdsInfoRetriever retriever = new RangerAdminGdsInfoRetriever();
        assertDoesNotThrow(() -> retriever.init(new HashMap<>()));
    }

    @Test
    public void test04_Retrieve_ClosedByInterrupt_ThrowsInterrupted() throws Exception {
        RangerAdminGdsInfoRetriever retriever = new RangerAdminGdsInfoRetriever();
        RangerServiceDef def = new RangerServiceDef();
        def.setName("svcType");
        retriever.setServiceName("svc");
        retriever.setServiceDef(def);
        retriever.setAppId("app");

        RangerPluginConfig config = new RangerPluginConfig(def.getName(), "svc", "app", null, null, null);
        RangerPluginContext pluginCtx = new RangerPluginContext(config);
        RangerAdminClient admin = mock(RangerAdminClient.class);
        pluginCtx.setAdminClient(admin);
        retriever.setPluginContext(pluginCtx);

        retriever.init(new HashMap<>());
        doThrow(new ClosedByInterruptException()).when(admin).getGdsInfoIfUpdated(anyLong(), anyLong());

        assertThrows(InterruptedException.class, () -> retriever.retrieveGdsInfo(1L, 1L));
    }

    @Test
    public void test05_Retrieve_OtherException_ReturnsNull() throws Exception {
        RangerAdminGdsInfoRetriever retriever = new RangerAdminGdsInfoRetriever();
        RangerServiceDef def = new RangerServiceDef();
        def.setName("svcType");
        retriever.setServiceName("svc");
        retriever.setServiceDef(def);
        retriever.setAppId("app");

        RangerPluginConfig config = new RangerPluginConfig(def.getName(), "svc", "app", null, null, null);
        RangerPluginContext pluginCtx = new RangerPluginContext(config);
        RangerAdminClient admin = mock(RangerAdminClient.class);
        pluginCtx.setAdminClient(admin);
        retriever.setPluginContext(pluginCtx);

        retriever.init(new HashMap<>());
        doThrow(new RuntimeException("boom")).when(admin).getGdsInfoIfUpdated(anyLong(), anyLong());

        ServiceGdsInfo out = retriever.retrieveGdsInfo(2L, 2L);
        assertNull(out);
    }
}
