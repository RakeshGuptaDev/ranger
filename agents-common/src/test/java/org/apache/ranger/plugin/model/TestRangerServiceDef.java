/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package org.apache.ranger.plugin.model;

import org.apache.ranger.plugin.model.RangerServiceDef.RangerAccessTypeDef;
import org.apache.ranger.plugin.model.RangerServiceDef.RangerEnumDef;
import org.apache.ranger.plugin.model.RangerServiceDef.RangerEnumElementDef;
import org.apache.ranger.plugin.model.RangerServiceDef.RangerPolicyConditionDef;
import org.apache.ranger.plugin.model.RangerServiceDef.RangerResourceDef;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;

/**
 * @generated by Cursor
 * @description <Unit Test for RangerServiceDef class>
 */
@ExtendWith(MockitoExtension.class)
@TestMethodOrder(MethodOrderer.MethodName.class)
public class TestRangerServiceDef {
    @Test
    public void test01_DefaultsAndSetters() {
        RangerServiceDef def = new RangerServiceDef();
        def.setName("name");
        def.setDisplayName("dn");
        def.setImplClass("impl");
        def.setLabel("label");
        def.setDescription("desc");
        def.setRbKeyLabel("rbl");
        def.setRbKeyDescription("rbd");
        def.setOptions(new HashMap<String, String>() {
            {
                put("k", "v");
            }
        });
        def.setConfigs(new ArrayList<RangerServiceDef.RangerServiceConfigDef>());
        def.setResources(new ArrayList<RangerResourceDef>());
        def.setAccessTypes(new ArrayList<RangerAccessTypeDef>());
        def.setPolicyConditions(new ArrayList<RangerPolicyConditionDef>());
        def.setContextEnrichers(new ArrayList<RangerServiceDef.RangerContextEnricherDef>());
        def.setEnums(new ArrayList<RangerEnumDef>());
        def.setMarkerAccessTypes(new ArrayList<RangerAccessTypeDef>());

        Assertions.assertEquals("name", def.getName());
        Assertions.assertEquals("dn", def.getDisplayName());
        Assertions.assertEquals("impl", def.getImplClass());
        Assertions.assertEquals("label", def.getLabel());
        Assertions.assertEquals("desc", def.getDescription());
        Assertions.assertTrue(def.getOptions().containsKey("k"));

        String s = def.toString();
        Assertions.assertTrue(s.contains("RangerServiceDef={"));
        Assertions.assertTrue(s.contains("name={name}"));
        Assertions.assertTrue(s.contains("displayName={dn}"));
    }

    @Test
    public void test02_RangerEnumDefDefaultIndex() {
        List<RangerEnumElementDef> elements = new ArrayList<>();
        elements.add(new RangerEnumElementDef(1L, "e1", "l1", "rb1"));
        elements.add(new RangerEnumElementDef(2L, "e2", "l2", "rb2"));

        RangerEnumDef enumDef = new RangerEnumDef(1L, "en", elements, null);
        enumDef.setDefaultIndex(5); // out of bounds -> should clamp to 0
        Assertions.assertEquals(0, enumDef.getDefaultIndex());

        enumDef.setDefaultIndex(1);
        Assertions.assertEquals(1, enumDef.getDefaultIndex());
    }

    @Test
    public void test03_ResourceDefDefaultsAndSetters() {
        RangerResourceDef r = new RangerResourceDef();
        r.setLevel(null);
        r.setMandatory(null);
        r.setLookupSupported(null);
        r.setRecursiveSupported(null);
        r.setExcludesSupported(null);
        r.setMatcherOptions(new HashMap<String, String>() {
            {
                put("m", "o");
            }
        });
        r.setAccessTypeRestrictions(new HashSet<String>());

        Assertions.assertEquals(Integer.valueOf(1), r.getLevel());
        Assertions.assertEquals(Boolean.FALSE, r.getMandatory());
        Assertions.assertEquals(Boolean.FALSE, r.getLookupSupported());
        Assertions.assertEquals(Boolean.FALSE, r.getRecursiveSupported());
        Assertions.assertEquals(Boolean.FALSE, r.getExcludesSupported());
        Assertions.assertTrue(r.getMatcherOptions().containsKey("m"));
    }

    @Test
    public void test04_setMarkerAccessTypesAndDefaultDefs() {
        RangerServiceDef def = new RangerServiceDef();
        // verify defaulting of dataMaskDef/rowFilterDef when set to null
        def.setDataMaskDef(null);
        def.setRowFilterDef(null);
        Assertions.assertNotNull(def.getDataMaskDef());
        Assertions.assertNotNull(def.getRowFilterDef());

        // verify setMarkerAccessTypes clears and adds
        List<RangerAccessTypeDef> marker = new ArrayList<>();
        marker.add(new RangerAccessTypeDef(1L, "m1", "lbl", "rb", null));
        def.setMarkerAccessTypes(marker);
        Assertions.assertEquals(1, def.getMarkerAccessTypes().size());
        def.setMarkerAccessTypes(new ArrayList<RangerAccessTypeDef>());
        Assertions.assertTrue(def.getMarkerAccessTypes().isEmpty());
    }

    @Test
    public void test05_ServiceDefSettersSameRefAndClear() {
        RangerServiceDef def = new RangerServiceDef();

        List<RangerServiceDef.RangerServiceConfigDef> cfg = new ArrayList<>();
        cfg.add(new RangerServiceDef.RangerServiceConfigDef());
        def.setConfigs(cfg);
        Assertions.assertEquals(1, def.getConfigs().size());

        List<RangerResourceDef> res = new ArrayList<>();
        res.add(new RangerResourceDef());
        def.setResources(res);
        Assertions.assertEquals(1, def.getResources().size());

        List<RangerAccessTypeDef> at = new ArrayList<>();
        at.add(new RangerAccessTypeDef("read"));
        def.setAccessTypes(at);
        Assertions.assertEquals(1, def.getAccessTypes().size());

        List<RangerServiceDef.RangerPolicyConditionDef> pc = new ArrayList<>();
        pc.add(new RangerServiceDef.RangerPolicyConditionDef());
        def.setPolicyConditions(pc);
        Assertions.assertEquals(1, def.getPolicyConditions().size());

        List<RangerServiceDef.RangerContextEnricherDef> ce = new ArrayList<>();
        ce.add(new RangerServiceDef.RangerContextEnricherDef());
        def.setContextEnrichers(ce);
        Assertions.assertEquals(1, def.getContextEnrichers().size());

        List<RangerEnumDef> enums = new ArrayList<>();
        enums.add(new RangerEnumDef());
        def.setEnums(enums);
        Assertions.assertEquals(1, def.getEnums().size());

        // same-ref early-return: mutate the returned list and set the same reference
        List<RangerResourceDef> sameResRef = def.getResources();
        sameResRef.add(new RangerResourceDef());
        def.setResources(sameResRef);
        Assertions.assertEquals(2, def.getResources().size());

        // now clear each by passing null
        def.setConfigs(null);
        def.setResources(null);
        def.setAccessTypes(null);
        def.setPolicyConditions(null);
        def.setContextEnrichers(null);
        def.setEnums(null);
        Assertions.assertEquals(0, def.getConfigs().size());
        Assertions.assertEquals(0, def.getResources().size());
        Assertions.assertEquals(0, def.getAccessTypes().size());
        Assertions.assertEquals(0, def.getPolicyConditions().size());
        Assertions.assertEquals(0, def.getContextEnrichers().size());
        Assertions.assertEquals(0, def.getEnums().size());
    }

    @Test
    public void test06_ServiceConfigDefDefaultsEqualsAndToString() {
        RangerServiceDef.RangerServiceConfigDef c1 = new RangerServiceDef.RangerServiceConfigDef();
        c1.setMandatory(null);
        Assertions.assertEquals(Boolean.FALSE, c1.getMandatory());
        String s = c1.toString();
        Assertions.assertTrue(s.contains("RangerServiceConfigDef={"));

        RangerServiceDef.RangerServiceConfigDef c2 = new RangerServiceDef.RangerServiceConfigDef();
        Assertions.assertEquals(c1, c2);
        Assertions.assertEquals(c1.hashCode(), c2.hashCode());
    }

    @Test
    public void test07_AccessTypeDefImpliedGrantsAndDedup() {
        RangerAccessTypeDef at = new RangerAccessTypeDef();
        at.setImpliedGrants(null);
        Assertions.assertTrue(at.getImpliedGrants().isEmpty());

        List<String> grants = new ArrayList<>(Arrays.asList(new String("read"), new String("write")));
        at.setImpliedGrants(grants);
        Assertions.assertTrue(at.getImpliedGrants().contains("read"));

        Map<String, String> tbl = new HashMap<>();
        at.dedupStrings(tbl);

        String str = at.toString();
        Assertions.assertTrue(str.contains("impliedGrants={"));
    }

    @Test
    public void test08_PolicyConditionDefDefaultsEquals() {
        RangerServiceDef.RangerPolicyConditionDef pc = new RangerServiceDef.RangerPolicyConditionDef();
        pc.setEvaluatorOptions(null);
        Assertions.assertNotNull(pc.getEvaluatorOptions());

        RangerServiceDef.RangerPolicyConditionDef pc2 = new RangerServiceDef.RangerPolicyConditionDef();
        Assertions.assertEquals(pc, pc2);
        Assertions.assertEquals(pc.hashCode(), pc2.hashCode());
    }

    @Test
    public void test09_ContextEnricherDefDefaultsEquals() {
        RangerServiceDef.RangerContextEnricherDef ce = new RangerServiceDef.RangerContextEnricherDef();
        ce.setEnricherOptions(null);
        Assertions.assertNotNull(ce.getEnricherOptions());

        RangerServiceDef.RangerContextEnricherDef ce2 = new RangerServiceDef.RangerContextEnricherDef();
        Assertions.assertEquals(ce, ce2);
        Assertions.assertEquals(ce.hashCode(), ce2.hashCode());
    }

    @Test
    public void test10_DataMaskTypeDefDefaultsEquals() {
        RangerServiceDef.RangerDataMaskTypeDef mt1 = new RangerServiceDef.RangerDataMaskTypeDef();
        mt1.setDataMaskOptions(null);
        Assertions.assertNotNull(mt1.getDataMaskOptions());

        RangerServiceDef.RangerDataMaskTypeDef mt2 = new RangerServiceDef.RangerDataMaskTypeDef();
        Assertions.assertEquals(mt1, mt2);
        Assertions.assertEquals(mt1.hashCode(), mt2.hashCode());
    }

    @Test
    public void test11_DataMaskDefSettersSameRefNullAndToString() {
        RangerServiceDef.RangerDataMaskDef dm = new RangerServiceDef.RangerDataMaskDef();
        Assertions.assertTrue(dm.getMaskTypes().isEmpty());
        Assertions.assertTrue(dm.getAccessTypes().isEmpty());
        Assertions.assertTrue(dm.getResources().isEmpty());

        List<RangerServiceDef.RangerDataMaskTypeDef> mts = new ArrayList<>();
        mts.add(new RangerServiceDef.RangerDataMaskTypeDef());
        dm.setMaskTypes(mts);
        List<RangerAccessTypeDef> ats = new ArrayList<>();
        ats.add(new RangerAccessTypeDef("read"));
        dm.setAccessTypes(ats);
        List<RangerResourceDef> rs = new ArrayList<>();
        rs.add(new RangerResourceDef());
        dm.setResources(rs);
        Assertions.assertEquals(1, dm.getMaskTypes().size());
        Assertions.assertEquals(1, dm.getAccessTypes().size());
        Assertions.assertEquals(1, dm.getResources().size());

        // same-ref early return
        List<RangerServiceDef.RangerDataMaskTypeDef> sameMt = dm.getMaskTypes();
        sameMt.add(new RangerServiceDef.RangerDataMaskTypeDef());
        dm.setMaskTypes(sameMt);
        Assertions.assertEquals(2, dm.getMaskTypes().size());

        // null to clear
        dm.setMaskTypes(null);
        dm.setAccessTypes(null);
        dm.setResources(null);
        Assertions.assertEquals(0, dm.getMaskTypes().size());
        Assertions.assertEquals(0, dm.getAccessTypes().size());
        Assertions.assertEquals(0, dm.getResources().size());

        String s = dm.toString();
        Assertions.assertTrue(s.contains("RangerDataMaskDef={"));
    }

    @Test
    public void test12_RowFilterDefSettersSameRefNullAndToString() {
        RangerServiceDef.RangerRowFilterDef rf = new RangerServiceDef.RangerRowFilterDef();
        Assertions.assertTrue(rf.getAccessTypes().isEmpty());
        Assertions.assertTrue(rf.getResources().isEmpty());

        List<RangerAccessTypeDef> ats = new ArrayList<>();
        ats.add(new RangerAccessTypeDef("read"));
        rf.setAccessTypes(ats);
        List<RangerResourceDef> rs = new ArrayList<>();
        rs.add(new RangerResourceDef());
        rf.setResources(rs);
        Assertions.assertEquals(1, rf.getAccessTypes().size());
        Assertions.assertEquals(1, rf.getResources().size());

        // same-ref early return
        List<RangerAccessTypeDef> sameAts = rf.getAccessTypes();
        sameAts.add(new RangerAccessTypeDef("write"));
        rf.setAccessTypes(sameAts);
        Assertions.assertEquals(2, rf.getAccessTypes().size());

        // null to clear
        rf.setAccessTypes(null);
        rf.setResources(null);
        Assertions.assertEquals(0, rf.getAccessTypes().size());
        Assertions.assertEquals(0, rf.getResources().size());

        String s = rf.toString();
        Assertions.assertTrue(s.contains("RangerRowFilterDef={"));
    }

    @Test
    public void test13_EnumDefSetElementsSameRefAndDedup() {
        RangerEnumElementDef e1 = new RangerEnumElementDef(1L, new String("e1"), new String("l1"), new String("rb1"));
        List<RangerEnumElementDef> elements = new ArrayList<>();
        elements.add(e1);

        RangerEnumDef enumDef = new RangerEnumDef(1L, new String("en"), elements, 0);
        enumDef.setDefaultIndex(10); // out of bounds -> set to 0
        Assertions.assertEquals(0, enumDef.getDefaultIndex());

        // same-ref early return (size remains unchanged when setting same list)
        List<RangerEnumElementDef> sameRef = enumDef.getElements();
        sameRef.add(new RangerEnumElementDef(2L, "e2", "l2", "rb2"));
        enumDef.setElements(sameRef);
        Assertions.assertEquals(2, enumDef.getElements().size());

        Map<String, String> tbl = new HashMap<>();
        enumDef.dedupStrings(tbl);

        String s = enumDef.toString();
        Assertions.assertTrue(s.contains("RangerEnumDef={"));
    }
}
