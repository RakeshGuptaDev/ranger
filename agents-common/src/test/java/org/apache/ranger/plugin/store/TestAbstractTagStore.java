/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package org.apache.ranger.plugin.store;

import org.apache.ranger.plugin.model.RangerPolicy;
import org.apache.ranger.plugin.model.RangerSecurityZone;
import org.apache.ranger.plugin.model.RangerService;
import org.apache.ranger.plugin.model.RangerServiceDef;
import org.apache.ranger.plugin.model.RangerServiceResource;
import org.apache.ranger.plugin.model.RangerTag;
import org.apache.ranger.plugin.model.RangerTagDef;
import org.apache.ranger.plugin.model.RangerTagResourceMap;
import org.apache.ranger.plugin.util.SearchFilter;
import org.apache.ranger.plugin.util.ServicePolicies;
import org.apache.ranger.plugin.util.ServiceTags;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;

import java.util.List;
import java.util.Map;

/**
 * @generated by Cursor
 * @description <Unit Test for AbstractTagStore class>
 */
@ExtendWith(MockitoExtension.class)
@TestMethodOrder(MethodOrderer.MethodName.class)
public class TestAbstractTagStore {
    private static class MyTagStore extends AbstractTagStore {
        @Override
        public boolean isInPlaceTagUpdateSupported() {
            return true;
        }

        @Override
        public void deleteAllTagObjectsForService(String serviceName) {
        }

        @Override
        public Long getTagVersion(String serviceName) {
            return 0L;
        }

        @Override
        public ServiceTags getServiceTagsDelta(String serviceName, Long lastKnownVersion) {
            return null;
        }

        @Override
        public ServiceTags getServiceTags(String serviceName, Long lastKnownVersion) {
            return null;
        }

        @Override
        public ServiceTags getServiceTagsIfUpdated(String serviceName, Long lastKnownVersion,
                boolean needsBackwardCompatibility) {
            return null;
        }

        @Override
        public RangerTagDef createTagDef(RangerTagDef tagDef) {
            return null;
        }

        @Override
        public RangerTagDef updateTagDef(RangerTagDef tagDef) {
            return null;
        }

        @Override
        public void deleteTagDefByName(String name) {
        }

        @Override
        public void deleteTagDef(Long id) {
        }

        @Override
        public RangerTagDef getTagDef(Long id) {
            return null;
        }

        @Override
        public RangerTagDef getTagDefByGuid(String guid) {
            return null;
        }

        @Override
        public RangerTagDef getTagDefByName(String name) {
            return null;
        }

        @Override
        public List<RangerTagDef> getTagDefs(SearchFilter filter) {
            return null;
        }

        @Override
        public PList<RangerTagDef> getPaginatedTagDefs(SearchFilter filter) {
            return null;
        }

        @Override
        public List<String> getTagTypes() {
            return null;
        }

        @Override
        public RangerTag createTag(RangerTag tag) {
            return null;
        }

        @Override
        public RangerTag updateTag(RangerTag tag) {
            return null;
        }

        @Override
        public void deleteTag(Long id) {
        }

        @Override
        public RangerTag getTag(Long id) {
            return null;
        }

        @Override
        public RangerTag getTagByGuid(String guid) {
            return null;
        }

        @Override
        public List<Long> getTagIdsForResourceId(Long resourceId) {
            return null;
        }

        @Override
        public List<RangerTag> getTagsByType(String name) {
            return null;
        }

        @Override
        public List<RangerTag> getTagsForResourceId(Long resourceId) {
            return null;
        }

        @Override
        public List<RangerTag> getTagsForResourceGuid(String resourceGuid) {
            return null;
        }

        @Override
        public List<RangerTag> getTags(SearchFilter filter) {
            return null;
        }

        @Override
        public PList<RangerTag> getPaginatedTags(SearchFilter filter) {
            return null;
        }

        @Override
        public RangerServiceResource createServiceResource(RangerServiceResource resource) {
            return null;
        }

        @Override
        public RangerServiceResource updateServiceResource(RangerServiceResource resource) {
            return null;
        }

        @Override
        public void refreshServiceResource(Long resourceId) {
        }

        @Override
        public void deleteServiceResource(Long id) {
        }

        @Override
        public void deleteServiceResourceByGuid(String guid) {
        }

        @Override
        public RangerServiceResource getServiceResource(Long id) {
            return null;
        }

        @Override
        public RangerServiceResource getServiceResourceByGuid(String guid) {
            return null;
        }

        @Override
        public List<RangerServiceResource> getServiceResourcesByService(String serviceName) {
            return null;
        }

        @Override
        public List<String> getServiceResourceGuidsByService(String serviceName) {
            return null;
        }

        @Override
        public RangerServiceResource getServiceResourceByServiceAndResourceSignature(String serviceName,
                String resourceSignature) {
            return null;
        }

        @Override
        public List<RangerServiceResource> getServiceResources(SearchFilter filter) {
            return null;
        }

        @Override
        public PList<RangerServiceResource> getPaginatedServiceResources(SearchFilter filter) {
            return null;
        }

        @Override
        public RangerTagResourceMap createTagResourceMap(RangerTagResourceMap tagResourceMap) {
            return null;
        }

        @Override
        public void deleteTagResourceMap(Long id) {
        }

        @Override
        public RangerTagResourceMap getTagResourceMap(Long id) {
            return null;
        }

        @Override
        public RangerTagResourceMap getTagResourceMapByGuid(String guid) {
            return null;
        }

        @Override
        public List<RangerTagResourceMap> getTagResourceMapsForTagId(Long tagId) {
            return null;
        }

        @Override
        public List<RangerTagResourceMap> getTagResourceMapsForTagGuid(String tagGuid) {
            return null;
        }

        @Override
        public List<RangerTagResourceMap> getTagResourceMapsForResourceId(Long resourceId) {
            return null;
        }

        @Override
        public List<RangerTagResourceMap> getTagResourceMapsForResourceGuid(String resourceGuid) {
            return null;
        }

        @Override
        public RangerTagResourceMap getTagResourceMapForTagAndResourceId(Long tagId, Long resourceId) {
            return null;
        }

        @Override
        public RangerTagResourceMap getTagResourceMapForTagAndResourceGuid(String tagGuid, String resourceGuid) {
            return null;
        }

        @Override
        public List<RangerTagResourceMap> getTagResourceMaps(SearchFilter filter) {
            return null;
        }

        @Override
        public PList<RangerTagResourceMap> getPaginatedTagResourceMaps(SearchFilter filter) {
            return null;
        }
    }

    @Test
    public void test01_getSetServiceStore_andInitNoop() throws Exception {
        MyTagStore s = new MyTagStore();
        Assertions.assertNull(s.getServiceStore());
        ServiceStore ss = new ServiceStore() {
            @Override
            public void init() {
            }

            @Override
            public RangerServiceDef createServiceDef(RangerServiceDef serviceDef) {
                return null;
            }

            @Override
            public RangerServiceDef updateServiceDef(RangerServiceDef serviceDef) {
                return null;
            }

            @Override
            public void deleteServiceDef(Long id, Boolean forceDelete) {
            }

            @Override
            public void updateTagServiceDefForAccessTypes() {
            }

            @Override
            public RangerServiceDef getServiceDef(Long id) {
                return null;
            }

            @Override
            public RangerServiceDef getServiceDefByName(String name) {
                return null;
            }

            @Override
            public RangerServiceDef getServiceDefByDisplayName(String name) {
                return null;
            }

            @Override
            public List<RangerServiceDef> getServiceDefs(SearchFilter filter) {
                return null;
            }

            @Override
            public PList<RangerServiceDef> getPaginatedServiceDefs(SearchFilter filter) {
                return null;
            }

            @Override
            public RangerService createService(RangerService service) {
                return null;
            }

            @Override
            public RangerService updateService(RangerService service, Map<String, Object> options) {
                return null;
            }

            @Override
            public void deleteService(Long id) {
            }

            @Override
            public boolean serviceExists(String name) {
                return false;
            }

            @Override
            public RangerService getService(Long id) {
                return null;
            }

            @Override
            public RangerService getServiceByName(String name) {
                return null;
            }

            @Override
            public RangerService getServiceByDisplayName(String displayName) {
                return null;
            }

            @Override
            public List<RangerService> getServices(SearchFilter filter) {
                return null;
            }

            @Override
            public PList<RangerService> getPaginatedServices(SearchFilter filter) {
                return null;
            }

            @Override
            public RangerPolicy createPolicy(RangerPolicy policy) {
                return null;
            }

            @Override
            public RangerPolicy createDefaultPolicy(RangerPolicy policy) {
                return null;
            }

            @Override
            public RangerPolicy updatePolicy(RangerPolicy policy) {
                return null;
            }

            @Override
            public void deletePolicy(RangerPolicy policy, RangerService service) {
            }

            @Override
            public void deletePolicy(RangerPolicy policy) {
            }

            @Override
            public boolean policyExists(Long id) {
                return false;
            }

            @Override
            public RangerPolicy getPolicy(Long id) {
                return null;
            }

            @Override
            public List<RangerPolicy> getPolicies(SearchFilter filter) {
                return null;
            }

            @Override
            public Long getPolicyId(Long serviceId, String policyName, Long zoneId) {
                return null;
            }

            @Override
            public PList<RangerPolicy> getPaginatedPolicies(SearchFilter filter) {
                return null;
            }

            @Override
            public List<RangerPolicy> getPoliciesByResourceSignature(String serviceName, String policySignature,
                    Boolean isPolicyEnabled) {
                return null;
            }

            @Override
            public List<RangerPolicy> getServicePolicies(Long serviceId, SearchFilter filter) {
                return null;
            }

            @Override
            public PList<RangerPolicy> getPaginatedServicePolicies(Long serviceId, SearchFilter filter) {
                return null;
            }

            @Override
            public List<RangerPolicy> getServicePolicies(String serviceName, SearchFilter filter) {
                return null;
            }

            @Override
            public PList<RangerPolicy> getPaginatedServicePolicies(String serviceName, SearchFilter filter) {
                return null;
            }

            @Override
            public ServicePolicies getServicePoliciesIfUpdated(String serviceName, Long lastKnownVersion,
                    boolean needsBackwardCompatibility) {
                return null;
            }

            @Override
            public Long getServicePolicyVersion(String serviceName) {
                return null;
            }

            @Override
            public ServicePolicies getServicePolicyDeltasOrPolicies(String serviceName, Long lastKnownVersion) {
                return null;
            }

            @Override
            public ServicePolicies getServicePolicyDeltas(String serviceName, Long lastKnownVersion,
                    Long cachedPolicyVersion) {
                return null;
            }

            @Override
            public ServicePolicies getServicePolicies(String serviceName, Long lastKnownVersion) {
                return null;
            }

            @Override
            public RangerPolicy getPolicyFromEventTime(String eventTimeStr, Long policyId) {
                return null;
            }

            @Override
            public Boolean getPopulateExistingBaseFields() {
                return null;
            }

            @Override
            public void setPopulateExistingBaseFields(Boolean populateExistingBaseFields) {
            }

            @Override
            public RangerSecurityZone getSecurityZone(Long id) {
                return null;
            }

            @Override
            public RangerSecurityZone getSecurityZone(String name) {
                return null;
            }

            @Override
            public long getPoliciesCount(String serviceName) {
                return 0;
            }

            @Override
            public Map<String, String> getServiceConfigForPlugin(Long serviceId) {
                return null;
            }

            @Override
            public List<RangerPolicy> getPoliciesWithMetaAttributes(List<RangerPolicy> policies) {
                return null;
            }
        };
        s.setServiceStore(ss);
        Assertions.assertNotNull(s.getServiceStore());
        s.init();
    }
}
