/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package org.apache.ranger.plugin.conditionevaluator;

import org.apache.ranger.plugin.model.RangerPolicy.RangerPolicyItemCondition;
import org.apache.ranger.plugin.model.RangerServiceDef;
import org.apache.ranger.plugin.policyengine.RangerAccessRequest;
import org.apache.ranger.plugin.policyengine.RangerAccessResourceImpl;
import org.apache.ranger.plugin.store.EmbeddedServiceDefsUtil;
import org.apache.ranger.plugin.util.RangerAccessRequestUtil;
import org.apache.ranger.plugin.util.RangerRequestedResources;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;

import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

/**
* @generated by Cursor
* @description <Unit Test for RangerHiveResourcesAccessConditions class>
*/
@ExtendWith(MockitoExtension.class)
@TestMethodOrder(MethodOrderer.MethodName.class)
public class TestRangerHiveResourcesAccessConditions {
    @Test
    public void test01_accessedTogether_initialized_and_matchesWhenNotMutuallyExcluded() throws Exception {
        RangerHiveResourcesAccessedTogetherCondition evaluator = new RangerHiveResourcesAccessedTogetherCondition();

        RangerServiceDef hiveDef = EmbeddedServiceDefsUtil.instance()
                .getEmbeddedServiceDef(EmbeddedServiceDefsUtil.EMBEDDED_SERVICEDEF_HIVE_NAME);
        evaluator.setServiceDef(hiveDef);
        evaluator.setPolicyItemCondition(
                new RangerPolicyItemCondition("together", Arrays.asList("db1.tbl1.col1", "db1.tbl2.col2")));
        evaluator.init();

        RangerAccessRequest request = mock(RangerAccessRequest.class);
        Map<String, Object> ctx = new HashMap<>();
        RangerRequestedResources requested = new RangerRequestedResources();

        RangerAccessResourceImpl res1 = new RangerAccessResourceImpl(new HashMap<>(), null);
        res1.setServiceDef(hiveDef);
        res1.setValue("database", "db1");
        res1.setValue("table", "tbl1");
        res1.setValue("column", "col1");
        requested.addRequestedResource(res1);

        RangerAccessResourceImpl res2 = new RangerAccessResourceImpl(new HashMap<>(), null);
        res2.setServiceDef(hiveDef);
        res2.setValue("database", "db1");
        res2.setValue("table", "tbl2");
        res2.setValue("column", "col2");
        requested.addRequestedResource(res2);

        RangerAccessRequestUtil.setRequestedResourcesInContext(ctx, requested);
        when(request.getContext()).thenReturn(ctx);

        Assertions.assertTrue(evaluator.isMatched(request));
    }

    @Test
    public void test02_notAccessedTogether_initialized_and_matchesWhenMutuallyExcluded() throws Exception {
        RangerHiveResourcesNotAccessedTogetherCondition evaluator = new RangerHiveResourcesNotAccessedTogetherCondition();

        RangerServiceDef hiveDef = EmbeddedServiceDefsUtil.instance()
                .getEmbeddedServiceDef(EmbeddedServiceDefsUtil.EMBEDDED_SERVICEDEF_HIVE_NAME);
        evaluator.setServiceDef(hiveDef);
        evaluator.setPolicyItemCondition(
                new RangerPolicyItemCondition("notTogether", Arrays.asList("db1.tbl1.col1", "db1.tbl2.col2")));
        evaluator.init();

        RangerAccessRequest request = mock(RangerAccessRequest.class);
        Map<String, Object> ctx = new HashMap<>();
        RangerRequestedResources requested = new RangerRequestedResources();

        RangerAccessResourceImpl res1 = new RangerAccessResourceImpl(new HashMap<>(), null);
        res1.setServiceDef(hiveDef);
        res1.setValue("database", "db1");
        res1.setValue("table", "tbl1");
        res1.setValue("column", "col1");
        requested.addRequestedResource(res1);

        RangerAccessResourceImpl res3 = new RangerAccessResourceImpl(new HashMap<>(), null);
        res3.setServiceDef(hiveDef);
        res3.setValue("database", "dbX");
        res3.setValue("table", "tblZ");
        res3.setValue("column", "colZ");
        requested.addRequestedResource(res3);

        RangerAccessRequestUtil.setRequestedResourcesInContext(ctx, requested);
        when(request.getContext()).thenReturn(ctx);

        Assertions.assertTrue(evaluator.isMatched(request));
    }
}
