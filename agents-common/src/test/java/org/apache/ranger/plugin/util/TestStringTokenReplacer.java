/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.apache.ranger.plugin.util;

import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;

import java.util.HashMap;
import java.util.Map;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertTrue;

/**
* @generated by Cursor
* @description <Unit Test for StringTokenReplacer class>
*/
@ExtendWith(MockitoExtension.class)
@TestMethodOrder(MethodOrderer.MethodName.class)
public class TestStringTokenReplacer {
    @Test
    public void test01_hasToken() {
        assertFalse(StringTokenReplacer.hasToken(null, '{', '}', '\\'));
        assertFalse(StringTokenReplacer.hasToken("abc", '{', '}', '\\'));
        assertTrue(StringTokenReplacer.hasToken("{a}", '{', '}', '\\'));
    }

    @Test
    public void test02_replaceTokens_basic_noPrefix() {
        Map<String, Object> tokens = new HashMap<>();
        RangerAccessRequestUtil.setTokenInContext(tokens, "a", "VAL");
        StringTokenReplacer r = new StringTokenReplacer('{', '}', '\\', "");
        String out = r.replaceTokens("x{a}y", tokens);
        assertEquals("xVALy", out);
    }

    @Test
    public void test03_replaceTokens_withPrefixNotMatching_keptAsIs() {
        Map<String, Object> tokens = new HashMap<>();
        RangerAccessRequestUtil.setTokenInContext(tokens, "a", "VAL");
        StringTokenReplacer r = new StringTokenReplacer('{', '}', '\\', "ctx.");
        String out = r.replaceTokens("x{a}y", tokens);
        assertEquals("x{a}y", out);
    }

    @Test
    public void test04_replaceTokens_withPrefix_match() {
        Map<String, Object> tokens = new HashMap<>();
        RangerAccessRequestUtil.setTokenInContext(tokens, "a", "VAL");
        StringTokenReplacer r = new StringTokenReplacer('{', '}', '\\', "token:");
        String out = r.replaceTokens("x{token:a}y", tokens);
        assertEquals("xVALy", out);
    }

    @Test
    public void test05_replaceTokens_escapeBehavior_andUnmatched() {
        Map<String, Object> tokens = new HashMap<>();
        // no token value set to force unmatched
        StringTokenReplacer r = new StringTokenReplacer('{', '}', '\\', "token:");
        String out = r.replaceTokens("a\\{b{token:missing}c{token:x\\}}d{token:e\\{}e", tokens);
        assertEquals("a\\{b{token:missing}c{token:x\\}}d{token:e\\{}e", out);
    }

    @Test
    public void test06_replaceTokens_unclosedToken_kept() {
        Map<String, Object> tokens = new HashMap<>();
        StringTokenReplacer r = new StringTokenReplacer('{', '}', '\\', "token:");
        String out = r.replaceTokens("a{token:x", tokens);
        assertEquals("a{token:x", out);
    }
}
