/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package org.apache.ranger.plugin.model;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;

import java.util.ArrayList;
import java.util.List;

/**
* @generated by Cursor
* @description <Unit Test for RangerValiditySchedule class>
*/
@TestMethodOrder(MethodOrderer.MethodName.class)
@ExtendWith(MockitoExtension.class)
public class TestRangerValiditySchedule {
    @Test
    public void test01_defaultsAndSetters() {
        RangerValiditySchedule sched = new RangerValiditySchedule();
        Assertions.assertNotNull(sched.getRecurrences());
        Assertions.assertTrue(sched.getRecurrences().isEmpty());

        sched.setTimeZone("UTC");
        sched.setStartTime("2025/09/22 00:00:00");
        sched.setEndTime("2025/09/23 00:00:00");
        sched.setRecurrences(null);

        Assertions.assertEquals("UTC", sched.getTimeZone());
        Assertions.assertEquals("2025/09/22 00:00:00", sched.getStartTime());
        Assertions.assertEquals("2025/09/23 00:00:00", sched.getEndTime());
        Assertions.assertNotNull(sched.getRecurrences());
    }

    @Test
    public void test02_setRecurrencesCopiesAndString() {
        List<RangerValidityRecurrence> rec = new ArrayList<>();
        rec.add(new RangerValidityRecurrence(new RangerValidityRecurrence.RecurrenceSchedule(),
                new RangerValidityRecurrence.ValidityInterval()));

        RangerValiditySchedule sched = new RangerValiditySchedule("s", "e", "Z", rec);
        Assertions.assertEquals("Z", sched.getTimeZone());
        Assertions.assertEquals(rec, sched.getRecurrences());

        String s = sched.toString();
        Assertions.assertTrue(s.contains("startTime=s"));
        Assertions.assertTrue(s.contains("endTime=e"));
        Assertions.assertTrue(s.contains("recurrences="));
    }
}
