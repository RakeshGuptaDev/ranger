/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.apache.ranger.plugin.util;

import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertTrue;

/**
* @generated by Cursor
* @description <Unit Test for RangerReadWriteLock class>
*/
@ExtendWith(MockitoExtension.class)
@TestMethodOrder(MethodOrderer.MethodName.class)
public class TestRangerReadWriteLock {
    @Test
    public void test01_lockingDisabled_noOpLocks() {
        RangerReadWriteLock rw = new RangerReadWriteLock(false);
        try (RangerReadWriteLock.RangerLock read = rw.getReadLock()) {
            assertFalse(read.isLockingEnabled());
        }
        try (RangerReadWriteLock.RangerLock write = rw.getWriteLock()) {
            assertFalse(write.isLockingEnabled());
        }
        assertEquals("ReadWriteLock:[null]", rw.toString());
    }

    @Test
    public void test02_lockingEnabled_readThenWrite() {
        RangerReadWriteLock rw = new RangerReadWriteLock(true);
        String toString = rw.toString();
        assertTrue(toString.contains("ReadWriteLock:["));

        try (RangerReadWriteLock.RangerLock read = rw.getReadLock()) {
            assertTrue(read.isLockingEnabled());
        }
        try (RangerReadWriteLock.RangerLock write = rw.getWriteLock()) {
            assertTrue(write.isLockingEnabled());
        }
    }

    @Test
    public void test03_getWriteLock_yieldsWhenNoReaders() throws Exception {
        RangerReadWriteLock rw = new RangerReadWriteLock(true);

        Thread writer = new Thread(() -> {
            try (RangerReadWriteLock.RangerLock ignored = rw.getWriteLock()) {
                // acquired
            }
        });

        writer.start();
        writer.join(2000L);
        assertFalse(writer.isAlive());
    }
}
