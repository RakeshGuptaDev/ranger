/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.apache.ranger.plugin.util;

import com.sun.jersey.api.client.Client;
import com.sun.jersey.api.client.ClientHandlerException;
import com.sun.jersey.api.client.ClientResponse;
import com.sun.jersey.api.client.WebResource;
import org.apache.hadoop.conf.Configuration;
import org.apache.ranger.authorization.hadoop.config.RangerPluginConfig;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.ArgumentMatchers;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;

import javax.net.ssl.SSLContext;
import javax.net.ssl.X509TrustManager;
import javax.ws.rs.core.Cookie;
import javax.ws.rs.core.Response;

import java.security.cert.CertificateException;
import java.security.cert.X509Certificate;
import java.util.HashMap;
import java.util.Map;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Assertions.assertThrows;

/**
 * @generated by Cursor
 * @description <Unit Test for RangerRESTClient class>
 */
@ExtendWith(MockitoExtension.class)
@TestMethodOrder(MethodOrderer.MethodName.class)
public class TestRangerRESTClient {
    @Test
    public void test01_setQueryParams_withNulls_returnsNullOrSame() {
        assertNull(RangerRESTClient.setQueryParams(null, null));
    }

    @Test
    public void test02_getSSLContext_usesDefaultTrustManagersWhenNull() {
        RangerRESTClient c = new RangerRESTClient("http://host", null, new Configuration());
        SSLContext sc = c.getSSLContext(null, null);
        assertNotNull(sc);
    }

    @Test
    public void test03_shouldRetry_retriesThenThrows() throws Exception {
        RangerRESTClient c = new RangerRESTClient("http://host1,http://host2", null, new Configuration());
        Exception ex = new RuntimeException("boom");
        c.setMaxRetryAttempts(1);
        c.setRetryIntervalMs(1);
        boolean first = c.shouldRetry("http://host2", c.getConfiguredURLs().size() - 1, 0, ex);
        assertEquals(true, first);
        assertThrows(RuntimeException.class, () -> {
            try {
                c.shouldRetry("http://host2", c.getConfiguredURLs().size() - 1, 1, ex);
            } catch (Exception e) {
                throw (RuntimeException) e;
            }
        });
    }

    @Test
    public void test04_getKeyAndTrustManagers_invalidFile_throwIllegalState() {
        RangerRESTClient c = new RangerRESTClient("http://host", null, new Configuration());
        c.setKeyStoreType("jks");
        c.setTrustStoreType("jks");
        assertThrows(IllegalStateException.class, () -> c.getKeyManagers("no-such.jks", "pwd"));
        assertThrows(IllegalStateException.class, () -> c.getTrustManagers("no-such.jks", "pwd"));
    }

    @Test
    public void test05_setQueryParams_withParams_returnsNonNull() {
        Client client = Client.create();
        WebResource wr = client.resource("http://localhost");
        Map<String, String> params = new HashMap<>();
        params.put("a", "1");
        params.put("b", "2");
        WebResource out = RangerRESTClient.setQueryParams(wr, params);
        assertNotNull(out);
    }

    @Test
    public void test06_createWebResource_withAndWithoutCookie_returnsBuilder() {
        RangerRESTClient c = new RangerRESTClient("http://localhost", null, new Configuration());
        Map<String, String> params = new HashMap<>();
        params.put("p", "v");
        WebResource.Builder b1 = c.createWebResource(0, "/api", params);
        assertNotNull(b1);

        Cookie sid = new Cookie("sid", "v");
        WebResource.Builder b2 = c.createWebResource(0, "/api", params, sid);
        assertNotNull(b2);
    }

    @Test
    public void test07_client_singleton_and_reset_createsNewInstance() {
        RangerRESTClient c = new RangerRESTClient("http://localhost", null, new Configuration());
        Client c1 = c.getClient();
        Client c2 = c.getClient();
        assertNotNull(c1);
        assertEquals(c1, c2);
        c.resetClient();
        Client c3 = c.getClient();
        assertNotNull(c3);
        assertNotEquals(c1, c3);
    }

    @Test
    public void test08_jsonSerialization_roundTrip() {
        RangerRESTClient c = new RangerRESTClient("http://localhost", null, new Configuration());
        int[] in = new int[] {1, 2, 3};
        String json = c.toJson(in);
        int[] out = c.fromJson(json, int[].class);
        assertEquals(3, out.length);
        assertEquals(1, out[0]);
        assertEquals(3, out[2]);
    }

    @Test
    public void test09_isSslEnabled_flagSetFromUrl() {
        RangerRESTClient c1 = new RangerRESTClient("http://host", null, new Configuration());
        assertEquals(false, c1.isSSL());
        RangerRESTClient c2 = new RangerRESTClient("https://host", null, new Configuration());
        assertEquals(true, c2.isSSL());
    }

    @Test
    public void test10_createWebResource_usesCookieClientWhenCookieProvided() {
        RangerRESTClient c = new RangerRESTClient("http://localhost", null, new Configuration());
        c.setBasicAuthInfo("u", "p");
        Cookie sid = new Cookie("sid", "v");
        WebResource.Builder b = c.createWebResource(0, "/api", null, sid);
        assertNotNull(b);
    }

    @Test
    public void test11_getKeyManagers_withEmptyParams_returnsNull() {
        RangerRESTClient c = new RangerRESTClient("http://host", null, new Configuration());
        assertNull(c.getKeyManagers("", ""));
    }

    @Test
    public void test12_getTrustManagers_withEmptyParams_returnsNull() {
        RangerRESTClient c = new RangerRESTClient("http://host", null, new Configuration());
        assertNull(c.getTrustManagers("", ""));
    }

    @Test
    public void test13_shouldRetry_notLastUrl_returnsFalse() throws Exception {
        RangerRESTClient c = new RangerRESTClient("http://host1,http://host2", null, new Configuration());
        Exception ex = new RuntimeException("boom");
        c.setMaxRetryAttempts(1);
        c.setRetryIntervalMs(1);
        boolean ret = c.shouldRetry("http://host1", 0, 0, ex);
        assertEquals(false, ret);
    }

    @Test
    public void test14_buildClient_whenSSLFlagTrue_returnsClient() {
        RangerRESTClient c = new RangerRESTClient("http://localhost", null, new Configuration());
        c.setSSL(true);
        c.resetClient();
        Client built = c.getClient();
        assertNotNull(built);
    }

    @Test
    public void test15_getResource_returnsWebResource() {
        RangerRESTClient c = new RangerRESTClient("http://localhost", null, new Configuration());
        WebResource wr = c.getResource("/api");
        assertNotNull(wr);
    }

    @Test
    public void test16_urlGetterSetter_roundTrip() {
        RangerRESTClient c = new RangerRESTClient("http://h1", null, new Configuration());
        c.setUrl("http://h2");
        assertEquals("http://h2", c.getUrl());
    }

    @Test
    public void test17_get_withRetryAcrossUrls_successOnSecond() throws Exception {
        RangerRESTClient spy = Mockito.spy(new RangerRESTClient("http://h1,http://h2", null, new Configuration()));
        spy.setLastKnownActiveUrlIndex(0);

        WebResource.Builder b1 = Mockito.mock(WebResource.Builder.class);
        Mockito.when(b1.accept(ArgumentMatchers.anyString())).thenReturn(b1);
        Mockito.when(b1.type(ArgumentMatchers.anyString())).thenReturn(b1);
        Mockito.when(b1.get(ClientResponse.class)).thenThrow(new ClientHandlerException("boom"));

        ClientResponse ok = Mockito.mock(ClientResponse.class);
        Mockito.when(ok.getStatusInfo()).thenReturn(Response.Status.OK);
        WebResource.Builder b2 = Mockito.mock(WebResource.Builder.class);
        Mockito.when(b2.accept(ArgumentMatchers.anyString())).thenReturn(b2);
        Mockito.when(b2.type(ArgumentMatchers.anyString())).thenReturn(b2);
        Mockito.when(b2.get(ClientResponse.class)).thenReturn(ok);

        Mockito.doReturn(b1).when(spy).createWebResource(0, "/r", null);
        Mockito.doReturn(b2).when(spy).createWebResource(1, "/r", null);

        ClientResponse resp = spy.get("/r", null);
        assertNotNull(resp);
        assertEquals(1, spy.getLastKnownActiveUrlIndex());
    }

    @Test
    public void test18_get_serverErrorOnFirst_thenSuccessOnSecond() throws Exception {
        RangerRESTClient spy = Mockito.spy(new RangerRESTClient("http://h1,http://h2", null, new Configuration()));
        spy.setLastKnownActiveUrlIndex(0);

        ClientResponse r500 = Mockito.mock(ClientResponse.class);
        Mockito.when(r500.getStatus()).thenReturn(500);
        Mockito.when(r500.getStatusInfo()).thenReturn(Response.Status.INTERNAL_SERVER_ERROR);
        WebResource.Builder b1 = Mockito.mock(WebResource.Builder.class);
        Mockito.when(b1.accept(ArgumentMatchers.anyString())).thenReturn(b1);
        Mockito.when(b1.type(ArgumentMatchers.anyString())).thenReturn(b1);
        Mockito.when(b1.get(ClientResponse.class)).thenReturn(r500);

        ClientResponse ok = Mockito.mock(ClientResponse.class);
        Mockito.when(ok.getStatusInfo()).thenReturn(Response.Status.OK);
        WebResource.Builder b2 = Mockito.mock(WebResource.Builder.class);
        Mockito.when(b2.accept(ArgumentMatchers.anyString())).thenReturn(b2);
        Mockito.when(b2.type(ArgumentMatchers.anyString())).thenReturn(b2);
        Mockito.when(b2.get(ClientResponse.class)).thenReturn(ok);

        Mockito.doReturn(b1).when(spy).createWebResource(0, "/r2", null);
        Mockito.doReturn(b2).when(spy).createWebResource(1, "/r2", null);

        ClientResponse resp = spy.get("/r2", null);
        assertNotNull(resp);
        assertEquals(1, spy.getLastKnownActiveUrlIndex());
    }

    @Test
    public void test19_post_put_delete_success_setsActiveUrl() throws Exception {
        RangerRESTClient spy = Mockito.spy(new RangerRESTClient("http://h1,http://h2", null, new Configuration()));
        WebResource.Builder b = Mockito.mock(WebResource.Builder.class);
        Mockito.when(b.accept(ArgumentMatchers.anyString())).thenReturn(b);
        Mockito.when(b.type(ArgumentMatchers.anyString())).thenReturn(b);

        ClientResponse ok = Mockito.mock(ClientResponse.class);
        Mockito.when(b.post(ArgumentMatchers.eq(ClientResponse.class), ArgumentMatchers.anyString())).thenReturn(ok);
        Mockito.when(b.put(ArgumentMatchers.eq(ClientResponse.class), ArgumentMatchers.anyString())).thenReturn(ok);
        Mockito.when(b.delete(ClientResponse.class)).thenReturn(ok);

        Mockito.doReturn(b).when(spy).createWebResource(0, "/p", new HashMap<>());
        assertNotNull(spy.post("/p", new HashMap<>(), new int[] {1}));
        assertEquals(0, spy.getLastKnownActiveUrlIndex());

        Mockito.doReturn(b).when(spy).createWebResource(0, "/u", new HashMap<>());
        assertNotNull(spy.put("/u", new HashMap<>(), new int[] {2}));
        assertEquals(0, spy.getLastKnownActiveUrlIndex());

        Mockito.doReturn(b).when(spy).createWebResource(0, "/d", new HashMap<>());
        assertNotNull(spy.delete("/d", new HashMap<>()));
        assertEquals(0, spy.getLastKnownActiveUrlIndex());
    }

    @Test
    public void test20_post_put_delete_withCookie_success() throws Exception {
        RangerRESTClient spy = Mockito.spy(new RangerRESTClient("http://h1,http://h2", null, new Configuration()));
        Cookie sid = new Cookie("sid", "v");

        WebResource.Builder b = Mockito.mock(WebResource.Builder.class);
        Mockito.when(b.accept(ArgumentMatchers.anyString())).thenReturn(b);
        Mockito.when(b.type(ArgumentMatchers.anyString())).thenReturn(b);

        ClientResponse ok = Mockito.mock(ClientResponse.class);
        Mockito.when(b.post(ArgumentMatchers.eq(ClientResponse.class), ArgumentMatchers.anyString())).thenReturn(ok);
        Mockito.when(b.put(ArgumentMatchers.eq(ClientResponse.class), ArgumentMatchers.anyString())).thenReturn(ok);
        Mockito.when(b.delete(ClientResponse.class)).thenReturn(ok);

        Mockito.doReturn(b).when(spy).createWebResource(0, "/pc", null, sid);
        Mockito.doReturn(b).when(spy).createWebResource(0, "/uc", null, sid);
        Mockito.doReturn(b).when(spy).createWebResource(0, "/dc", null, sid);

        assertNotNull(spy.post("/pc", null, new int[] {3}, sid));
        assertNotNull(spy.put("/uc", new int[] {4}, sid));
        assertNotNull(spy.delete("/dc", null, sid));
    }

    @Test
    public void test21_init_withPluginConfig_setsBasicAuthFilter_noCrash() {
        RangerPluginConfig rpc = new RangerPluginConfig("hive", null, "app", null, null, null);
        String prefix = rpc.getPropertyPrefix();
        rpc.set(prefix + ".policy.rest.client.username", "u");
        rpc.set(prefix + ".policy.rest.client.password", "p");

        RangerRESTClient c = new RangerRESTClient("http://host", null, rpc);
        Cookie sid = new Cookie("sid", "v");
        WebResource.Builder b = c.createWebResource(0, "/api", null, sid);
        assertNotNull(b);
    }

    @Test
    public void test22_setters_getters_forTimeouts_and_credentials() {
        RangerRESTClient c = new RangerRESTClient("http://host", null, new Configuration());
        c.setRestClientConnTimeOutMs(1234);
        c.setRestClientReadTimeOutMs(5678);
        c.setBasicAuthInfo("user", "pass");
        assertEquals(1234, c.getRestClientConnTimeOutMs());
        assertEquals(5678, c.getRestClientReadTimeOutMs());
        assertEquals("user", c.getUsername());
        assertEquals("pass", c.getPassword());
    }

    @Test
    public void test23_getSSLContext_withExplicitTrustManagers() {
        RangerRESTClient c = new RangerRESTClient("http://host", null, new Configuration());
        X509TrustManager tm = new X509TrustManager() {
            public void checkClientTrusted(X509Certificate[] chain, String authType) throws CertificateException {
            }

            public void checkServerTrusted(X509Certificate[] chain, String authType) throws CertificateException {
            }

            public X509Certificate[] getAcceptedIssuers() {
                return new X509Certificate[0];
            }
        };
        SSLContext sc = c.getSSLContext(null, new javax.net.ssl.TrustManager[] {tm});
        assertNotNull(sc);
    }

    @Test
    public void test24_setClient_overridesAndReturnsSame() {
        RangerRESTClient c = new RangerRESTClient("http://host", null, new Configuration());
        Client provided = Client.create();
        c.setClient(provided);
        Client returned = c.getClient();
        assertEquals(provided, returned);
    }

    @Test
    public void test25_get_withCookie_success() throws Exception {
        RangerRESTClient spy = Mockito.spy(new RangerRESTClient("http://h1,http://h2", null, new Configuration()));
        Cookie sid = new Cookie("sid", "v");

        WebResource.Builder b = Mockito.mock(WebResource.Builder.class);
        Mockito.when(b.accept(ArgumentMatchers.anyString())).thenReturn(b);
        Mockito.when(b.type(ArgumentMatchers.anyString())).thenReturn(b);
        ClientResponse ok = Mockito.mock(ClientResponse.class);
        Mockito.when(ok.getStatusInfo()).thenReturn(Response.Status.OK);
        Mockito.when(b.get(ClientResponse.class)).thenReturn(ok);

        Mockito.doReturn(b).when(spy).createWebResource(0, "/gc", null, sid);

        ClientResponse resp = spy.get("/gc", null, sid);
        assertNotNull(resp);
        assertEquals(0, spy.getLastKnownActiveUrlIndex());
    }

    @Test
    public void test26_setLastKnownActiveUrlIndex_and_getConfiguredURLs() {
        RangerRESTClient c = new RangerRESTClient("http://h1,http://h2", null, new Configuration());
        c.setLastKnownActiveUrlIndex(1);
        assertEquals(1, c.getLastKnownActiveUrlIndex());
        assertEquals(2, c.getConfiguredURLs().size());
    }

    @Test
    public void test27_setQueryParams_nonNullResourceNullParams_returnsSame() {
        Client client = Client.create();
        WebResource wr = client.resource("http://localhost");
        WebResource out = RangerRESTClient.setQueryParams(wr, null);
        // WebResource doesn't override equals, reference equality suffices
        assertEquals(wr, out);
    }

    @Test
    public void test28_retry_getters_roundTrip() {
        RangerRESTClient c = new RangerRESTClient("http://host", null, new Configuration());
        c.setMaxRetryAttempts(3);
        c.setRetryIntervalMs(250);
        assertEquals(3, c.getMaxRetryAttempts());
        assertEquals(250, c.getRetryIntervalMs());
    }
}
