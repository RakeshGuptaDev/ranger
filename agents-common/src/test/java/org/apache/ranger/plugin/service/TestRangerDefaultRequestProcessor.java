/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package org.apache.ranger.plugin.service;

import org.apache.ranger.authorization.hadoop.config.RangerPluginConfig;
import org.apache.ranger.plugin.model.RangerRole;
import org.apache.ranger.plugin.model.RangerServiceDef;
import org.apache.ranger.plugin.policyengine.PolicyEngine;
import org.apache.ranger.plugin.policyengine.RangerAccessRequestImpl;
import org.apache.ranger.plugin.policyengine.RangerAccessResource;
import org.apache.ranger.plugin.policyengine.RangerMutableResource;
import org.apache.ranger.plugin.policyengine.RangerPluginContext;
import org.apache.ranger.plugin.policyengine.RangerPolicyEngineOptions;
import org.apache.ranger.plugin.util.RangerAccessRequestUtil;
import org.apache.ranger.plugin.util.RangerCommonConstants;
import org.apache.ranger.plugin.util.RangerRoles;
import org.apache.ranger.plugin.util.RangerUserStore;
import org.apache.ranger.ugsyncutil.transform.Mapper;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;

import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertTrue;

/**
* @generated by Cursor
* @description <Unit Test for RangerDefaultRequestProcessor class>
*/
@ExtendWith(MockitoExtension.class)
@TestMethodOrder(MethodOrderer.MethodName.class)
public class TestRangerDefaultRequestProcessor {
    private static class TestResource implements RangerMutableResource {
        private RangerServiceDef serviceDef;

        @Override
        public void setOwnerUser(String ownerUser) {
        }

        @Override
        public void setValue(String type, Object value) {
        }

        @Override
        public void setServiceDef(RangerServiceDef serviceDef) {
            this.serviceDef = serviceDef;
        }

        @Override
        public RangerServiceDef getServiceDef() {
            return serviceDef;
        }

        @Override
        public Map<String, Object> getAsMap() {
            return new HashMap<>();
        }

        @Override
        public String getAsString() {
            return "";
        }

        @Override
        public Set<String> getKeys() {
            return new HashSet<>();
        }

        @Override
        public Object getValue(String resourceElement) {
            return null;
        }

        @Override
        public String getOwnerUser() {
            return null;
        }

        @Override
        public boolean exists(String name) {
            return false;
        }

        @Override
        public String getLeafName() {
            return null;
        }

        @Override
        public String getCacheKey() {
            return "";
        }

        @Override
        public RangerAccessResource getReadOnlyCopy() {
            return this;
        }
    }

    public static class NoopMapper implements Mapper {
        @Override
        public void init(String baseProperty, List<String> regexPatterns, String regexSeparator) {
        }

        @Override
        public String transform(String attrValue) {
            return attrValue;
        }
    }

    @Test
    public void test1_PreProcessSetsClusterAndEmailConversionAndGroups() {
        RangerPolicyEngineOptions opts = new RangerPolicyEngineOptions();
        opts.disablePolicyRefresher = true;

        RangerPluginConfig mockCfg = Mockito.mock(RangerPluginConfig.class);
        Mockito.when(mockCfg.isUseRangerGroups()).thenReturn(true);
        Mockito.when(mockCfg.isUseOnlyRangerGroups()).thenReturn(false);
        Mockito.when(mockCfg.isConvertEmailToUsername()).thenReturn(false);

        RangerPluginContext mockPluginCtx = Mockito.mock(RangerPluginContext.class);
        Mockito.when(mockPluginCtx.getConfig()).thenReturn(mockCfg);
        Mockito.when(mockPluginCtx.getClusterName()).thenReturn("clX");
        Mockito.when(mockPluginCtx.getClusterType()).thenReturn("typeY");

        RangerServiceDef sd = new RangerServiceDef();
        sd.setName("dummy");

        PolicyEngine pe = Mockito.mock(PolicyEngine.class);
        Mockito.when(pe.getPluginContext()).thenReturn(mockPluginCtx);
        Mockito.when(pe.getUseForwardedIPAddress()).thenReturn(false);
        Mockito.when(pe.getTrustedProxyAddresses()).thenReturn(null);

        RangerUserStore us = new RangerUserStore();
        Map<String, Map<String, String>> userAttrs = new HashMap<>();
        Map<String, String> attrs = new HashMap<>();
        attrs.put(RangerCommonConstants.SCRIPT_FIELD__EMAIL_ADDRESS, "user1@example.com");
        userAttrs.put("user1", attrs);
        us.setUserAttrMapping(userAttrs);
        Map<String, Set<String>> ug = new HashMap<>();
        ug.put("user1@example.com", new HashSet<>(Collections.singletonList("rg1")));
        us.setUserGroupMapping(ug);

        RangerAuthContext ac = new RangerAuthContext(new HashMap<>(), null, new RangerRoles(), us);
        Mockito.when(mockPluginCtx.getAuthContext()).thenReturn(ac);

        RangerDefaultRequestProcessor rp = new RangerDefaultRequestProcessor(pe);

        RangerAccessRequestImpl req = new RangerAccessRequestImpl();
        TestResource tr = new TestResource();
        tr.setServiceDef(sd);
        req.setResource(tr);
        req.setUser("user1@example.com");
        req.setUserGroups(new HashSet<>(Collections.singletonList("g0")));

        rp.preProcess(req);

        assertEquals("clX", req.getClusterName());
        assertEquals("typeY", req.getClusterType());
        assertEquals("user1@example.com", req.getUser());
        assertNotNull(req.getUserGroups());
        assertTrue(req.getUserGroups().contains("g0"));
        assertEquals("user1@example.com", RangerAccessRequestUtil.getCurrentUserFromContext(req.getContext()));
    }

    @Test
    public void test2_PreProcessConvertsEmailAndReplacesGroupsAndSetsRoles() {
        RangerPolicyEngineOptions opts = new RangerPolicyEngineOptions();
        opts.disablePolicyRefresher = true;

        RangerPluginConfig mockCfg = Mockito.mock(RangerPluginConfig.class);
        Mockito.when(mockCfg.isUseRangerGroups()).thenReturn(true);
        Mockito.when(mockCfg.isUseOnlyRangerGroups()).thenReturn(true);
        Mockito.when(mockCfg.isConvertEmailToUsername()).thenReturn(true);

        // Enable name transformation feature flag to allow transformation steps
        Mockito.when(mockCfg.getPropertyPrefix()).thenReturn("ranger.plugin.dummy");
        Mockito.when(mockCfg.getBoolean("ranger.plugin.dummy" + RangerCommonConstants.PLUGIN_CONFIG_SUFFIX_NAME_TRANSFORMATION, false)).thenReturn(true);

        RangerPluginContext mockPluginCtx = Mockito.mock(RangerPluginContext.class);
        Mockito.when(mockPluginCtx.getConfig()).thenReturn(mockCfg);
        Mockito.when(mockPluginCtx.getClusterName()).thenReturn("clA");
        Mockito.when(mockPluginCtx.getClusterType()).thenReturn("typeB");

        RangerServiceDef sd = new RangerServiceDef();
        sd.setName("dummy");

        PolicyEngine pe = Mockito.mock(PolicyEngine.class);
        Mockito.when(pe.getPluginContext()).thenReturn(mockPluginCtx);
        Mockito.when(pe.getUseForwardedIPAddress()).thenReturn(false);
        Mockito.when(pe.getTrustedProxyAddresses()).thenReturn(null);
        Mockito.when(pe.getServiceDef()).thenReturn(sd);

        // Prepare user store mapping for email->username and ranger groups for username
        RangerUserStore us = new RangerUserStore();
        Map<String, Map<String, String>> userAttrs = new HashMap<>();
        Map<String, String> attrs = new HashMap<>();
        attrs.put(RangerCommonConstants.SCRIPT_FIELD__EMAIL_ADDRESS, "u2@example.com");
        userAttrs.put("u2", attrs);
        us.setUserAttrMapping(userAttrs);
        Map<String, Set<String>> ug = new HashMap<>();
        ug.put("u2", new HashSet<>(Collections.singletonList("rg9")));
        us.setUserGroupMapping(ug);

        // Set roles so that roles are computed and populated onto the request when empty
        RangerRoles roles = new RangerRoles();
        Set<RangerRole> roleSet = new HashSet<>();
        RangerRole r = new RangerRole();
        r.setName("roleX");
        r.setUsers(Collections.singletonList(new RangerRole.RoleMember("u2", false)));
        roleSet.add(r);
        roles.setRangerRoles(roleSet);

        RangerAuthContext ac = new RangerAuthContext(new HashMap<>(), null, roles, us);
        Mockito.when(mockPluginCtx.getAuthContext()).thenReturn(ac);

        RangerDefaultRequestProcessor rp = new RangerDefaultRequestProcessor(pe);

        RangerAccessRequestImpl req = new RangerAccessRequestImpl();
        TestResource tr = new TestResource();
        req.setResource(tr); // serviceDef is null initially to exercise setResourceServiceDef
        req.setUser("u2@example.com");
        req.setUserGroups(new HashSet<>(Collections.singletonList("g1")));

        rp.preProcess(req);

        assertEquals("u2", req.getUser()); // email converted to username via user store
        assertNotNull(req.getUserGroups());
        assertEquals(1, req.getUserGroups().size());
        assertTrue(req.getUserGroups().contains("rg9")); // replaced with only ranger groups
        assertNotNull(req.getUserRoles());
        assertTrue(req.getUserRoles().contains("roleX"));
        assertNotNull(((RangerMutableResource) req.getResource()).getServiceDef());
    }

    @Test
    public void test3_PreProcessEarlyReturnWhenAlreadyPreprocessed() {
        RangerPluginContext mockPluginCtx = Mockito.mock(RangerPluginContext.class);
        RangerPluginConfig mockCfg = Mockito.mock(RangerPluginConfig.class);
        Mockito.when(mockPluginCtx.getConfig()).thenReturn(mockCfg);

        PolicyEngine pe = Mockito.mock(PolicyEngine.class);
        Mockito.when(pe.getPluginContext()).thenReturn(mockPluginCtx);

        RangerDefaultRequestProcessor rp = new RangerDefaultRequestProcessor(pe);

        RangerAccessRequestImpl req = new RangerAccessRequestImpl();
        TestResource tr = new TestResource();
        req.setResource(tr);

        // mark as already preprocessed
        RangerAccessRequestUtil.setIsRequestPreprocessed(req.getContext(), Boolean.TRUE);

        rp.preProcess(req);

        // cluster should remain unset due to early return
        assertEquals(null, req.getClusterName());
        assertEquals(null, req.getClusterType());
    }

    @Test
    public void test4_NameAndGroupCaseConversionWithoutMapper() {
        RangerPluginConfig mockCfg = Mockito.mock(RangerPluginConfig.class);
        Mockito.when(mockCfg.isUseRangerGroups()).thenReturn(false);
        Mockito.when(mockCfg.isUseOnlyRangerGroups()).thenReturn(false);
        Mockito.when(mockCfg.isConvertEmailToUsername()).thenReturn(false);
        Mockito.when(mockCfg.getPropertyPrefix()).thenReturn("ranger.plugin.svc");
        Mockito.when(mockCfg.getBoolean("ranger.plugin.svc" + RangerCommonConstants.PLUGIN_CONFIG_SUFFIX_NAME_TRANSFORMATION, false)).thenReturn(true);

        RangerPluginContext mockPluginCtx = Mockito.mock(RangerPluginContext.class);
        Mockito.when(mockPluginCtx.getConfig()).thenReturn(mockCfg);
        Mockito.when(mockPluginCtx.getClusterName()).thenReturn("clZ");
        Mockito.when(mockPluginCtx.getClusterType()).thenReturn("typeZ");

        PolicyEngine pe = Mockito.mock(PolicyEngine.class);
        Mockito.when(pe.getPluginContext()).thenReturn(mockPluginCtx);
        Mockito.when(pe.getUseForwardedIPAddress()).thenReturn(false);
        Mockito.when(pe.getTrustedProxyAddresses()).thenReturn(null);

        RangerAuthContext ac = new RangerAuthContext(new HashMap<>(), null, new RangerRoles(), new RangerUserStore());
        Map<String, String> cfg = new HashMap<>();
        cfg.put(RangerCommonConstants.PLUGINS_CONF_USERNAME_CASE_CONVERSION_PARAM, "lower");
        cfg.put(RangerCommonConstants.PLUGINS_CONF_GROUPNAME_CASE_CONVERSION_PARAM, "upper");
        cfg.put(RangerCommonConstants.PLUGINS_CONF_MAPPING_GROUPNAME_HANDLER, this.getClass().getName() + "$NoopMapper");
        cfg.put(RangerCommonConstants.PLUGINS_CONF_MAPPING_GROUPNAME, "(.*)");
        cfg.put(RangerCommonConstants.PLUGINS_CONF_MAPPING_SEPARATOR, ":");
        ac.onServiceConfigsUpdate(cfg);
        Mockito.when(mockPluginCtx.getAuthContext()).thenReturn(ac);

        RangerDefaultRequestProcessor rp = new RangerDefaultRequestProcessor(pe);

        RangerAccessRequestImpl req = new RangerAccessRequestImpl();
        TestResource tr = new TestResource();
        req.setResource(tr);
        req.setUser("USERX");
        Set<String> groups = new HashSet<>();
        groups.add("grp");
        groups.add("Grp2");
        req.setUserGroups(groups);

        rp.preProcess(req);

        assertEquals("userx", req.getUser());
        assertTrue(req.getUserGroups().contains("GRP"));
        assertTrue(req.getUserGroups().contains("GRP2"));
    }
}
