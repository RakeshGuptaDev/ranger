/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package org.apache.ranger.biz;

import org.apache.ranger.common.MessageEnums;
import org.apache.ranger.common.RESTErrorUtil;
import org.apache.ranger.common.SearchCriteria;
import org.apache.ranger.service.XCredentialStoreService;
import org.apache.ranger.service.XPolicyExportAuditService;
import org.apache.ranger.service.XResourceService;
import org.apache.ranger.view.VXCredentialStore;
import org.apache.ranger.view.VXCredentialStoreList;
import org.apache.ranger.view.VXLong;
import org.apache.ranger.view.VXPolicyExportAudit;
import org.apache.ranger.view.VXPolicyExportAuditList;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

import javax.ws.rs.WebApplicationException;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

/**
* @generated by Cursor
* @description <Unit Test for TestAssetMgrBase class>
*/
@ExtendWith(MockitoExtension.class)
@TestMethodOrder(MethodOrderer.MethodName.class)
public class TestAssetMgrBase {
    static class TestableAssetMgrBase extends AssetMgrBase {
    }

    @InjectMocks
    TestableAssetMgrBase mgr;

    @Mock
    RESTErrorUtil restErrorUtil;
    @Mock
    XResourceService xResourceService;
    @Mock
    XCredentialStoreService xCredentialStoreService;
    @Mock
    XPolicyExportAuditService xPolicyExportAuditService;

    @Test
    public void testCredentialStoreCRUDAndSearch() {
        VXCredentialStore obj = new VXCredentialStore();
        when(xCredentialStoreService.readResource(1L)).thenReturn(obj);
        assertEquals(obj, mgr.getXCredentialStore(1L));

        VXCredentialStore created = new VXCredentialStore();
        when(xCredentialStoreService.createResource(any(VXCredentialStore.class))).thenReturn(created);
        assertEquals(created, mgr.createXCredentialStore(new VXCredentialStore()));

        VXCredentialStore updated = new VXCredentialStore();
        when(xCredentialStoreService.updateResource(any(VXCredentialStore.class))).thenReturn(updated);
        assertEquals(updated, mgr.updateXCredentialStore(new VXCredentialStore()));

        VXCredentialStoreList list = new VXCredentialStoreList();
        when(xCredentialStoreService.searchXCredentialStores(any(SearchCriteria.class))).thenReturn(list);
        assertEquals(list, mgr.searchXCredentialStores(new SearchCriteria()));

        VXLong count = new VXLong();
        count.setValue(5L);
        when(xCredentialStoreService.getSearchCount(any(SearchCriteria.class), any())).thenReturn(count);
        assertEquals(count, mgr.getXCredentialStoreSearchCount(new SearchCriteria()));
    }

    @Test
    public void testDeleteXCredentialStoreForceFlag() {
        mgr.deleteXCredentialStore(1L, true);
        verify(xCredentialStoreService).deleteResource(1L);

        when(restErrorUtil.createRESTException("serverMsg.modelMgrBaseDeleteModel",
                MessageEnums.OPER_NOT_ALLOWED_FOR_ENTITY)).thenReturn(new WebApplicationException());

        assertThrows(WebApplicationException.class, () -> mgr.deleteXCredentialStore(1L, false));
    }

    @Test
    public void testPolicyExportAuditCRUDAndSearch() {
        VXPolicyExportAudit obj = new VXPolicyExportAudit();
        when(xPolicyExportAuditService.readResource(1L)).thenReturn(obj);
        assertEquals(obj, mgr.getXPolicyExportAudit(1L));

        VXPolicyExportAudit created = new VXPolicyExportAudit();
        when(xPolicyExportAuditService.createResource(any(VXPolicyExportAudit.class))).thenReturn(created);
        assertEquals(created, mgr.createXPolicyExportAudit(new VXPolicyExportAudit()));

        VXPolicyExportAudit updated = new VXPolicyExportAudit();
        when(xPolicyExportAuditService.updateResource(any(VXPolicyExportAudit.class))).thenReturn(updated);
        assertEquals(updated, mgr.updateXPolicyExportAudit(new VXPolicyExportAudit()));

        VXPolicyExportAuditList list = new VXPolicyExportAuditList();
        when(xPolicyExportAuditService.searchXPolicyExportAudits(any(SearchCriteria.class))).thenReturn(list);
        assertEquals(list, mgr.searchXPolicyExportAudits(new SearchCriteria()));

        VXLong count = new VXLong();
        count.setValue(3L);
        when(xPolicyExportAuditService.getSearchCount(any(SearchCriteria.class), any())).thenReturn(count);
        assertEquals(count, mgr.getXPolicyExportAuditSearchCount(new SearchCriteria()));
    }

    @Test
    public void testDeleteXPolicyExportAuditForceFlag() {
        mgr.deleteXPolicyExportAudit(2L, true);
        verify(xPolicyExportAuditService).deleteResource(2L);

        when(restErrorUtil.createRESTException("serverMsg.modelMgrBaseDeleteModel",
                MessageEnums.OPER_NOT_ALLOWED_FOR_ENTITY)).thenReturn(new WebApplicationException());

        assertThrows(WebApplicationException.class, () -> mgr.deleteXPolicyExportAudit(2L, false));
    }
}
