/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.apache.ranger.biz;

import org.apache.ranger.common.MessageEnums;
import org.apache.ranger.common.RESTErrorUtil;
import org.apache.ranger.db.RangerDaoManager;
import org.apache.ranger.db.XXGlobalStateDao;
import org.apache.ranger.db.XXSecurityZoneDao;
import org.apache.ranger.db.XXSecurityZoneRefServiceDao;
import org.apache.ranger.db.XXSecurityZoneRefTagServiceDao;
import org.apache.ranger.db.XXServiceDao;
import org.apache.ranger.db.XXServiceDefDao;
import org.apache.ranger.entity.XXSecurityZone;
import org.apache.ranger.entity.XXService;
import org.apache.ranger.entity.XXServiceDef;
import org.apache.ranger.plugin.model.RangerSecurityZone;
import org.apache.ranger.plugin.model.RangerSecurityZoneHeaderInfo;
import org.apache.ranger.plugin.model.RangerServiceHeaderInfo;
import org.apache.ranger.plugin.store.PList;
import org.apache.ranger.plugin.store.ServicePredicateUtil;
import org.apache.ranger.plugin.util.SearchFilter;
import org.apache.ranger.service.RangerSecurityZoneServiceService;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;

import javax.servlet.http.HttpServletRequest;
import javax.ws.rs.WebApplicationException;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import static org.mockito.Mockito.times;

/**
* @generated by Cursor
* @description <Unit Test for TestSecurityZoneDBStore class>
*/
@ExtendWith(MockitoExtension.class)
@TestMethodOrder(MethodOrderer.MethodName.class)
public class TestSecurityZoneDBStore {
    private static final String RANGER_GLOBAL_STATE_NAME = "RangerSecurityZone";
    @InjectMocks
    SecurityZoneDBStore securityZoneDBStore = new SecurityZoneDBStore();
    @Mock
    RangerSecurityZoneServiceService securityZoneService;
    @Mock
    SecurityZoneRefUpdater securityZoneRefUpdater;
    @Mock
    RangerDaoManager daoManager;
    @Mock
    ServicePredicateUtil predicateUtil;
    @Mock
    RESTErrorUtil restErrorUtil;
    @Mock
    RangerBizUtil bizUtil;
    @Mock
    ServiceMgr serviceMgr;

    @Test
    public void test1createSecurityZone() throws Exception {
        XXSecurityZone     xxSecurityZone      = null;
        RangerSecurityZone securityZone        = new RangerSecurityZone();
        RangerSecurityZone createdSecurityZone = new RangerSecurityZone();
        createdSecurityZone.setId(2L);

        XXSecurityZoneDao xXSecurityZoneDao = Mockito.mock(XXSecurityZoneDao.class);
        XXGlobalStateDao  xXGlobalStateDao  = Mockito.mock(XXGlobalStateDao.class);

        Mockito.when(daoManager.getXXSecurityZoneDao()).thenReturn(xXSecurityZoneDao);
        Mockito.when(xXSecurityZoneDao.findByZoneName(securityZone.getName())).thenReturn(xxSecurityZone);

        Mockito.when(daoManager.getXXGlobalState()).thenReturn(xXGlobalStateDao);
        Mockito.doNothing().when(xXGlobalStateDao).onGlobalStateChange(RANGER_GLOBAL_STATE_NAME);

        Mockito.when(securityZoneService.create(securityZone)).thenReturn(createdSecurityZone);
        Mockito.doNothing().when(securityZoneRefUpdater).createNewZoneMappingForRefTable(createdSecurityZone);

        RangerSecurityZone expectedSecurityZone = securityZoneDBStore.createSecurityZone(securityZone);

        Assertions.assertNull(xxSecurityZone);
        Assertions.assertEquals(createdSecurityZone.getId(), expectedSecurityZone.getId());
        Mockito.verify(daoManager).getXXSecurityZoneDao();
        Mockito.verify(daoManager).getXXGlobalState();
        Mockito.verify(securityZoneService).create(securityZone);
    }

    @Test
    public void test2updateSecurityZoneById() throws Exception {
        XXSecurityZone xxSecurityZone = new XXSecurityZone();
        xxSecurityZone.setId(2L);
        RangerSecurityZone securityZone = new RangerSecurityZone();
        securityZone.setId(2L);
        RangerSecurityZone updateSecurityZone = new RangerSecurityZone();
        updateSecurityZone.setId(2L);

        XXGlobalStateDao xXGlobalStateDao = Mockito.mock(XXGlobalStateDao.class);

        Mockito.when(daoManager.getXXGlobalState()).thenReturn(xXGlobalStateDao);
        Mockito.doNothing().when(xXGlobalStateDao).onGlobalStateChange(RANGER_GLOBAL_STATE_NAME);

        Mockito.when(securityZoneService.update(securityZone)).thenReturn(updateSecurityZone);
        Mockito.doNothing().when(securityZoneRefUpdater).createNewZoneMappingForRefTable(updateSecurityZone);

        RangerSecurityZone expectedSecurityZone = securityZoneDBStore.updateSecurityZoneById(securityZone);

        Assertions.assertNotNull(xxSecurityZone);
        Assertions.assertEquals(updateSecurityZone.getId(), expectedSecurityZone.getId());
        Mockito.verify(daoManager).getXXGlobalState();
        Mockito.verify(securityZoneService).update(securityZone);
    }

    @Test
    public void test3deleteSecurityZoneByName() throws Exception {
        XXSecurityZone xxSecurityZone = new XXSecurityZone();
        xxSecurityZone.setId(2L);
        RangerSecurityZone securityZone = new RangerSecurityZone();
        securityZone.setId(2L);
        securityZone.setName("sz1");

        XXSecurityZoneDao xXSecurityZoneDao = Mockito.mock(XXSecurityZoneDao.class);
        XXGlobalStateDao  xXGlobalStateDao  = Mockito.mock(XXGlobalStateDao.class);

        Mockito.when(daoManager.getXXSecurityZoneDao()).thenReturn(xXSecurityZoneDao);
        Mockito.when(xXSecurityZoneDao.findByZoneName(securityZone.getName())).thenReturn(xxSecurityZone);
        Mockito.when(securityZoneService.read(securityZone.getId())).thenReturn(securityZone);
        Mockito.when(daoManager.getXXGlobalState()).thenReturn(xXGlobalStateDao);
        Mockito.doNothing().when(xXGlobalStateDao).onGlobalStateChange(RANGER_GLOBAL_STATE_NAME);
        Mockito.when(securityZoneRefUpdater.cleanupRefTables(securityZone)).thenReturn(true);
        Mockito.when(securityZoneService.delete(securityZone)).thenReturn(true);

        securityZoneDBStore.deleteSecurityZoneByName(securityZone.getName());

        Assertions.assertNotNull(xxSecurityZone);
    }

    @Test
    public void test4deleteSecurityZoneById() throws Exception {
        XXSecurityZone xxSecurityZone = new XXSecurityZone();
        xxSecurityZone.setId(2L);
        RangerSecurityZone securityZone = new RangerSecurityZone();
        securityZone.setId(2L);
        securityZone.setName("sz1");

        XXGlobalStateDao xXGlobalStateDao = Mockito.mock(XXGlobalStateDao.class);
        Mockito.when(securityZoneService.read(securityZone.getId())).thenReturn(securityZone);
        Mockito.when(daoManager.getXXGlobalState()).thenReturn(xXGlobalStateDao);
        Mockito.doNothing().when(xXGlobalStateDao).onGlobalStateChange(RANGER_GLOBAL_STATE_NAME);
        Mockito.when(securityZoneRefUpdater.cleanupRefTables(securityZone)).thenReturn(true);
        Mockito.when(securityZoneService.delete(securityZone)).thenReturn(true);

        securityZoneDBStore.deleteSecurityZoneById(securityZone.getId());
    }

    @Test
    public void test5getSecurityZoneByName() throws Exception {
        XXSecurityZone xxSecurityZone = new XXSecurityZone();
        xxSecurityZone.setId(2L);
        xxSecurityZone.setName("sz1");
        RangerSecurityZone securityZone = new RangerSecurityZone();
        securityZone.setId(2L);
        securityZone.setName("sz1");
        RangerSecurityZone createdSecurityZone = new RangerSecurityZone();
        createdSecurityZone.setId(2L);
        createdSecurityZone.setName("sz1");
        XXSecurityZoneDao xXSecurityZoneDao = Mockito.mock(XXSecurityZoneDao.class);

        Mockito.when(daoManager.getXXSecurityZoneDao()).thenReturn(xXSecurityZoneDao);
        Mockito.when(xXSecurityZoneDao.findByZoneName(securityZone.getName())).thenReturn(xxSecurityZone);
        Mockito.when(securityZoneService.read(securityZone.getId())).thenReturn(createdSecurityZone);

        RangerSecurityZone expectedSecurityZone = securityZoneDBStore.getSecurityZoneByName(securityZone.getName());

        Assertions.assertNotNull(xxSecurityZone);
        Assertions.assertEquals(createdSecurityZone.getName(), expectedSecurityZone.getName());
        Mockito.verify(securityZoneService).read(securityZone.getId());
    }

    @Test
    public void test6getSecurityZones() throws Exception {
        SearchFilter filter = new SearchFilter();
        filter.setParam(SearchFilter.ZONE_NAME, "sz1");

        List<RangerSecurityZone> ret             = new ArrayList<>();
        List<XXSecurityZone>     xxSecurityZones = new ArrayList<>();
        XXSecurityZone           xxSecurityZone  = new XXSecurityZone();
        xxSecurityZone.setId(2L);
        xxSecurityZone.setName("sz1");
        xxSecurityZones.add(xxSecurityZone);

        RangerSecurityZone rangerSecurityZone = new RangerSecurityZone();
        rangerSecurityZone.setId(3L);
        ret.add(rangerSecurityZone);
        List<RangerSecurityZone> copy = new ArrayList<>(ret);

        XXSecurityZoneDao xXSecurityZoneDao = Mockito.mock(XXSecurityZoneDao.class);
        Mockito.when(daoManager.getXXSecurityZoneDao()).thenReturn(xXSecurityZoneDao);
        Mockito.when(xXSecurityZoneDao.getAll()).thenReturn(xxSecurityZones);
        Mockito.when(securityZoneService.read(xxSecurityZone.getId())).thenReturn(rangerSecurityZone);
        Mockito.doNothing().when(predicateUtil).applyFilter(copy, filter);

        securityZoneDBStore.getSecurityZones(filter);

        Assertions.assertNotNull(xxSecurityZone);
        Assertions.assertNotNull(xxSecurityZones);
        Mockito.verify(daoManager).getXXSecurityZoneDao();
        Mockito.verify(securityZoneService).read(xxSecurityZone.getId());
        Mockito.verify(predicateUtil).applyFilter(copy, filter);
    }

    @Test
    public void test7getSecurityZonesForService() {
        String serviceName = "hdfs_service";
        Map<String, RangerSecurityZone.RangerSecurityZoneService> retMap;

        SearchFilter filter = new SearchFilter();
        filter.setParam(SearchFilter.ZONE_NAME, "sz1");
        filter.setParam(SearchFilter.SERVICE_NAME, serviceName);
        List<RangerSecurityZone> ret             = new ArrayList<>();
        List<XXSecurityZone>     xxSecurityZones = new ArrayList<>();

        XXSecurityZone xxSecurityZone = new XXSecurityZone();
        xxSecurityZone.setId(2L);
        xxSecurityZone.setName("sz1");
        xxSecurityZones.add(xxSecurityZone);

        RangerSecurityZone rangerSecurityZone = new RangerSecurityZone();
        rangerSecurityZone.setId(3L);
        ret.add(rangerSecurityZone);

        XXSecurityZoneDao xXSecurityZoneDao = Mockito.mock(XXSecurityZoneDao.class);
        Mockito.when(daoManager.getXXSecurityZoneDao()).thenReturn(xXSecurityZoneDao);
        Mockito.when(xXSecurityZoneDao.getAll()).thenReturn(xxSecurityZones);
        Mockito.when(securityZoneService.read(xxSecurityZone.getId())).thenReturn(rangerSecurityZone);
        retMap = new HashMap<>();
        retMap.put(rangerSecurityZone.getName(), rangerSecurityZone.getServices().get(serviceName));

        securityZoneDBStore.getSecurityZonesForService(serviceName);

        Assertions.assertNotNull(xxSecurityZone);
        Assertions.assertNotNull(xxSecurityZones);
        Mockito.verify(daoManager).getXXSecurityZoneDao();
        Mockito.verify(securityZoneService).read(xxSecurityZone.getId());
    }

    @Test
    public void test8createSecurityZoneWithExistingName() throws Exception {
        XXSecurityZone xxSecurityZone = new XXSecurityZone();
        xxSecurityZone.setId(2L);
        RangerSecurityZone securityZone        = new RangerSecurityZone();
        RangerSecurityZone createdSecurityZone = new RangerSecurityZone();
        createdSecurityZone.setId(2L);

        XXSecurityZoneDao xXSecurityZoneDao = Mockito.mock(XXSecurityZoneDao.class);

        Mockito.when(daoManager.getXXSecurityZoneDao()).thenReturn(xXSecurityZoneDao);
        Mockito.when(xXSecurityZoneDao.findByZoneName(securityZone.getName())).thenReturn(xxSecurityZone);
        Mockito.when(restErrorUtil.createRESTException(Mockito.anyString(), Mockito.any(MessageEnums.class))).thenThrow(new WebApplicationException());

        Assertions.assertThrows(WebApplicationException.class, () -> securityZoneDBStore.createSecurityZone(securityZone));

        Mockito.verify(daoManager, times(1)).getXXSecurityZoneDao();
        Mockito.verify(xXSecurityZoneDao, times(1)).findByZoneName(securityZone.getName());
    }

    @Test
    public void test9updateSecurityZoneByUnknownId() throws Exception {
        RangerSecurityZone securityZoneToUpdate = new RangerSecurityZone();
        securityZoneToUpdate.setId(2L);

        XXSecurityZoneDao xXSecurityZoneDao = Mockito.mock(XXSecurityZoneDao.class);
        Mockito.when(restErrorUtil.createRESTException(Mockito.anyString())).thenThrow(new WebApplicationException());

        XXGlobalStateDao xXGlobalStateDao = Mockito.mock(XXGlobalStateDao.class);
        Mockito.when(daoManager.getXXGlobalState()).thenReturn(xXGlobalStateDao);
        Mockito.doNothing().when(xXGlobalStateDao).onGlobalStateChange(RANGER_GLOBAL_STATE_NAME);

        Assertions.assertThrows(WebApplicationException.class,
                () -> securityZoneDBStore.updateSecurityZoneById(securityZoneToUpdate));
        Mockito.verify(daoManager, times(1)).getXXGlobalState();
        Mockito.verify(securityZoneService, times(1)).update(securityZoneToUpdate);
    }

    @Test
    public void test10deleteSecurityZoneByWrongName() throws Exception {
        XXSecurityZone xxSecurityZone = new XXSecurityZone();
        xxSecurityZone.setId(2L);
        RangerSecurityZone securityZone = new RangerSecurityZone();
        securityZone.setId(2L);
        securityZone.setName("sz1");

        XXSecurityZoneDao xXSecurityZoneDao = Mockito.mock(XXSecurityZoneDao.class);
        Mockito.when(daoManager.getXXSecurityZoneDao()).thenReturn(xXSecurityZoneDao);
        Mockito.when(xXSecurityZoneDao.findByZoneName(securityZone.getName())).thenReturn(null);
        Mockito.when(restErrorUtil.createRESTException(Mockito.anyString())).thenThrow(new WebApplicationException());

        Assertions.assertThrows(WebApplicationException.class, () -> securityZoneDBStore.deleteSecurityZoneByName(securityZone.getName()));
        Mockito.verify(xXSecurityZoneDao, times(1)).findByZoneName(securityZone.getName());
    }

    @Test
    public void test11getSecurityZoneByWrongName() throws Exception {
        RangerSecurityZone securityZone = new RangerSecurityZone();
        securityZone.setId(2L);
        securityZone.setName("sz1");

        XXSecurityZoneDao xXSecurityZoneDao = Mockito.mock(XXSecurityZoneDao.class);
        Mockito.when(daoManager.getXXSecurityZoneDao()).thenReturn(xXSecurityZoneDao);
        Mockito.when(xXSecurityZoneDao.findByZoneName(securityZone.getName())).thenReturn(null);
        Mockito.when(restErrorUtil.createRESTException(Mockito.anyString())).thenThrow(new WebApplicationException());

        Assertions.assertThrows(WebApplicationException.class, () -> securityZoneDBStore.getSecurityZoneByName(securityZone.getName()));
        Mockito.verify(xXSecurityZoneDao, times(1)).findByZoneName(securityZone.getName());
    }

    @Test
    public void test12getSecurityZoneById() {
        Long zoneId = 5L;
        RangerSecurityZone zone = new RangerSecurityZone();
        zone.setId(zoneId);

        Mockito.when(securityZoneService.read(zoneId)).thenReturn(zone);

        RangerSecurityZone result = securityZoneDBStore.getSecurityZone(zoneId);

        Assertions.assertEquals(zoneId, result.getId());
        Mockito.verify(securityZoneService, times(1)).read(zoneId);
    }

    @Test
    public void test13getSecurityZoneHeaderInfoList_noPrefix() {
        HttpServletRequest request = Mockito.mock(HttpServletRequest.class);
        Mockito.when(request.getParameter(SearchFilter.ZONE_NAME_PREFIX)).thenReturn(null);

        XXSecurityZoneDao xZoneDao = Mockito.mock(XXSecurityZoneDao.class);
        Mockito.when(daoManager.getXXSecurityZoneDao()).thenReturn(xZoneDao);

        List<RangerSecurityZoneHeaderInfo> headers = new ArrayList<>();
        headers.add(new RangerSecurityZoneHeaderInfo(1L, "zoneA"));
        headers.add(new RangerSecurityZoneHeaderInfo(2L, "zoneB"));
        Mockito.when(xZoneDao.findAllZoneHeaderInfos()).thenReturn(headers);

        List<RangerSecurityZoneHeaderInfo> result = securityZoneDBStore.getSecurityZoneHeaderInfoList(request);

        Assertions.assertEquals(2, result.size());
        Mockito.verify(xZoneDao, times(1)).findAllZoneHeaderInfos();
    }

    @Test
    public void test14getSecurityZoneHeaderInfoList_withPrefix() {
        HttpServletRequest request = Mockito.mock(HttpServletRequest.class);
        Mockito.when(request.getParameter(SearchFilter.ZONE_NAME_PREFIX)).thenReturn("sec");

        XXSecurityZoneDao xZoneDao = Mockito.mock(XXSecurityZoneDao.class);
        Mockito.when(daoManager.getXXSecurityZoneDao()).thenReturn(xZoneDao);

        List<RangerSecurityZoneHeaderInfo> headers = new ArrayList<>();
        headers.add(new RangerSecurityZoneHeaderInfo(1L, "secA"));
        headers.add(new RangerSecurityZoneHeaderInfo(2L, "abc"));
        Mockito.when(xZoneDao.findAllZoneHeaderInfos()).thenReturn(headers);

        List<RangerSecurityZoneHeaderInfo> result = securityZoneDBStore.getSecurityZoneHeaderInfoList(request);

        Assertions.assertEquals(1, result.size());
        Assertions.assertEquals("secA", result.get(0).getName());
    }

    @Test
    public void test15getServiceHeaderInfoListByZoneId_unauthorized() {
        HttpServletRequest request = Mockito.mock(HttpServletRequest.class);
        Mockito.when(bizUtil.hasModuleAccess(Mockito.anyString())).thenReturn(false);
        Mockito.when(restErrorUtil.createRESTException(Mockito.anyString(), Mockito.any(MessageEnums.class)))
                .thenThrow(new WebApplicationException());

        Assertions.assertThrows(WebApplicationException.class, () -> securityZoneDBStore.getServiceHeaderInfoListByZoneId(1L, request));
    }

    @Test
    public void test16getServiceHeaderInfoListByZoneId_authorized_withPrefix() {
        HttpServletRequest request = Mockito.mock(HttpServletRequest.class);
        Mockito.when(bizUtil.hasModuleAccess(Mockito.anyString())).thenReturn(true);
        Mockito.when(request.getParameter(SearchFilter.SERVICE_NAME_PREFIX)).thenReturn("s1");

        XXSecurityZoneRefServiceDao svcDao = Mockito.mock(XXSecurityZoneRefServiceDao.class);
        XXSecurityZoneRefTagServiceDao tagSvcDao = Mockito.mock(XXSecurityZoneRefTagServiceDao.class);
        Mockito.when(daoManager.getXXSecurityZoneRefService()).thenReturn(svcDao);
        Mockito.when(daoManager.getXXSecurityZoneRefTagService()).thenReturn(tagSvcDao);

        List<RangerServiceHeaderInfo> services = new ArrayList<>();
        services.add(new RangerServiceHeaderInfo(1L, "s1Name", "disp", "type", true));
        services.add(new RangerServiceHeaderInfo(2L, "other", "disp2", "type2", true));
        List<RangerServiceHeaderInfo> tagServices = new ArrayList<>();
        tagServices.add(new RangerServiceHeaderInfo(3L, "s1Tag", "disp3", "type", true));

        Mockito.when(svcDao.findServiceHeaderInfosByZoneId(1L)).thenReturn(services);
        Mockito.when(tagSvcDao.findServiceHeaderInfosByZoneId(1L)).thenReturn(tagServices);

        List<RangerServiceHeaderInfo> result = securityZoneDBStore.getServiceHeaderInfoListByZoneId(1L, request);

        Assertions.assertEquals(2, result.size());
        Assertions.assertTrue(result.stream().allMatch(h -> h.getName().toLowerCase().startsWith("s1")));
    }

    @Test
    public void test17getSecurityZoneHeaderInfoListByServiceId_invalid() {
        HttpServletRequest request = Mockito.mock(HttpServletRequest.class);
        Mockito.when(restErrorUtil.createRESTException(Mockito.anyString(), Mockito.eq(MessageEnums.INVALID_INPUT_DATA)))
                .thenThrow(new WebApplicationException());

        Assertions.assertThrows(WebApplicationException.class, () -> securityZoneDBStore.getSecurityZoneHeaderInfoListByServiceId(null, false, request));
    }

    @Test
    public void test18getSecurityZoneHeaderInfoListByServiceId_valid_withPrefix() {
        HttpServletRequest request = Mockito.mock(HttpServletRequest.class);
        Mockito.when(request.getParameter(SearchFilter.ZONE_NAME_PREFIX)).thenReturn("z");

        XXSecurityZoneDao xZoneDao = Mockito.mock(XXSecurityZoneDao.class);
        Mockito.when(daoManager.getXXSecurityZoneDao()).thenReturn(xZoneDao);

        List<RangerSecurityZoneHeaderInfo> headers = new ArrayList<>();
        headers.add(new RangerSecurityZoneHeaderInfo(1L, "zoneA"));
        headers.add(new RangerSecurityZoneHeaderInfo(2L, "bzone"));
        Mockito.when(xZoneDao.findAllZoneHeaderInfosByServiceId(10L, false)).thenReturn(headers);

        List<RangerSecurityZoneHeaderInfo> result = securityZoneDBStore.getSecurityZoneHeaderInfoListByServiceId(10L, false, request);

        Assertions.assertEquals(1, result.size());
        Assertions.assertEquals("zoneA", result.get(0).getName());
    }

    @Test
    public void test19getZonesSummary_pagination_and_permissions() throws Exception {
        SearchFilter filter = new SearchFilter();
        filter.setStartIndex(0);
        filter.setMaxRows(10);

        RangerSecurityZone zone = new RangerSecurityZone();
        zone.setId(11L);
        zone.setName("zone1");
        zone.setDescription("desc");
        zone.setAdminUsers(Arrays.asList("u1"));
        zone.setAdminUserGroups(Arrays.asList("g1", "g2"));
        zone.setAdminRoles(Arrays.asList("r1", "r2", "r3"));
        zone.setAuditUsers(Arrays.asList("au1", "au2", "au3", "au4"));
        zone.setAuditUserGroups(Arrays.asList("ag1", "ag2", "ag3", "ag4", "ag5"));
        zone.setAuditRoles(Arrays.asList("ar1", "ar2", "ar3", "ar4", "ar5", "ar6"));
        zone.setTagServices(Arrays.asList("t1"));

        RangerSecurityZone.RangerSecurityZoneService zoneService = new RangerSecurityZone.RangerSecurityZoneService();
        List<HashMap<String, List<String>>> resources = new ArrayList<>();
        resources.add(new HashMap<>());
        resources.add(new HashMap<>());
        zoneService.setResources(resources);
        Map<String, RangerSecurityZone.RangerSecurityZoneService> services = new HashMap<>();
        services.put("svc1", zoneService);
        zone.setServices(services);

        SecurityZoneDBStore spyStore = Mockito.spy(securityZoneDBStore);
        Mockito.doReturn(Arrays.asList(zone)).when(spyStore).getSecurityZones(Mockito.any(SearchFilter.class));
        Mockito.when(bizUtil.isAdmin()).thenReturn(false);
        Mockito.when(serviceMgr.isZoneAdmin("zone1")).thenReturn(true);

        XXServiceDao svcDao = Mockito.mock(XXServiceDao.class);
        XXServiceDefDao svcDefDao = Mockito.mock(XXServiceDefDao.class);
        XXService xService = new XXService();
        xService.setId(100L);
        xService.setType(5L);
        xService.setDisplayName("Service One");
        XXServiceDef xDef = new XXServiceDef();
        xDef.setName("hdfs");
        Mockito.when(daoManager.getXXService()).thenReturn(svcDao);
        Mockito.when(daoManager.getXXServiceDef()).thenReturn(svcDefDao);
        Mockito.when(svcDao.findByName("svc1")).thenReturn(xService);
        Mockito.when(svcDefDao.getById(5L)).thenReturn(xDef);

        PList<RangerSecurityZone.SecurityZoneSummary> result = spyStore.getZonesSummary(filter);

        Assertions.assertEquals(1, result.getListSize());
        RangerSecurityZone.SecurityZoneSummary summary = result.getList().get(0);
        Assertions.assertEquals("zone1", summary.getName());
        Assertions.assertEquals(Long.valueOf(2L), summary.getTotalResourceCount());
        Assertions.assertEquals(1, summary.getServices().size());
    }

    @Test
    public void test20getSecurityZonesForService_exceptionHandling() throws Exception {
        SecurityZoneDBStore spyStore = Mockito.spy(securityZoneDBStore);
        Mockito.doThrow(new RuntimeException("boom")).when(spyStore).getSecurityZones(Mockito.any(SearchFilter.class));
        Map<String, RangerSecurityZone.RangerSecurityZoneService> ret = spyStore.getSecurityZonesForService("svc");
        Assertions.assertNull(ret);
    }

    @Test
    public void test21updateSecurityZoneById_renamedTriggersSignatureUpdate() throws Exception {
        RangerSecurityZone oldZone = new RangerSecurityZone();
        oldZone.setId(2L);
        oldZone.setName("old");
        RangerSecurityZone newZone = new RangerSecurityZone();
        newZone.setId(2L);
        newZone.setName("new");
        RangerSecurityZone updated = new RangerSecurityZone();
        updated.setId(2L);
        updated.setName("new");

        XXGlobalStateDao xXGlobalStateDao = Mockito.mock(XXGlobalStateDao.class);
        Mockito.when(daoManager.getXXGlobalState()).thenReturn(xXGlobalStateDao);
        Mockito.doNothing().when(xXGlobalStateDao).onGlobalStateChange(RANGER_GLOBAL_STATE_NAME);

        Mockito.when(securityZoneService.read(2L)).thenReturn(oldZone);
        Mockito.when(securityZoneService.update(newZone)).thenReturn(updated);

        securityZoneDBStore.updateSecurityZoneById(newZone);
        Mockito.verify(securityZoneRefUpdater, times(1)).updateResourceSignatureWithZoneName(updated);
    }

    @Test
    public void test22createSecurityZone_createReturnsNull_exception() throws Exception {
        RangerSecurityZone securityZone = new RangerSecurityZone();

        XXSecurityZoneDao xXSecurityZoneDao = Mockito.mock(XXSecurityZoneDao.class);
        XXGlobalStateDao xXGlobalStateDao = Mockito.mock(XXGlobalStateDao.class);
        Mockito.when(daoManager.getXXSecurityZoneDao()).thenReturn(xXSecurityZoneDao);
        Mockito.when(xXSecurityZoneDao.findByZoneName(securityZone.getName())).thenReturn(null);
        Mockito.when(daoManager.getXXGlobalState()).thenReturn(xXGlobalStateDao);
        Mockito.doNothing().when(xXGlobalStateDao).onGlobalStateChange(RANGER_GLOBAL_STATE_NAME);

        Mockito.when(securityZoneService.create(securityZone)).thenReturn(null);
        Mockito.when(restErrorUtil.createRESTException(Mockito.anyString())).thenThrow(new WebApplicationException());
        Assertions.assertThrows(WebApplicationException.class, () -> securityZoneDBStore.createSecurityZone(securityZone));
    }

    @Test
    public void test23updateSecurityZoneById_updateReturnsNull_exception() throws Exception {
        RangerSecurityZone securityZone = new RangerSecurityZone();
        securityZone.setId(9L);

        XXGlobalStateDao xXGlobalStateDao = Mockito.mock(XXGlobalStateDao.class);
        Mockito.when(daoManager.getXXGlobalState()).thenReturn(xXGlobalStateDao);
        Mockito.doNothing().when(xXGlobalStateDao).onGlobalStateChange(RANGER_GLOBAL_STATE_NAME);

        Mockito.when(securityZoneService.update(securityZone)).thenReturn(null);
        Mockito.when(restErrorUtil.createRESTException(Mockito.anyString())).thenThrow(new WebApplicationException());
        Assertions.assertThrows(WebApplicationException.class, () -> securityZoneDBStore.updateSecurityZoneById(securityZone));
    }

    @Test
    public void test24initStore_setsPredicateUtil() {
        securityZoneDBStore.initStore();
        Assertions.assertNotNull(securityZoneDBStore.predicateUtil);
    }

    @Test
    public void test25getServiceHeaderInfoListByZoneId_authorized_noPrefix() {
        HttpServletRequest request = Mockito.mock(HttpServletRequest.class);
        Mockito.when(bizUtil.hasModuleAccess(Mockito.anyString())).thenReturn(true);
        Mockito.when(request.getParameter(SearchFilter.SERVICE_NAME_PREFIX)).thenReturn(null);

        XXSecurityZoneRefServiceDao svcDao = Mockito.mock(XXSecurityZoneRefServiceDao.class);
        XXSecurityZoneRefTagServiceDao tagSvcDao = Mockito.mock(XXSecurityZoneRefTagServiceDao.class);
        Mockito.when(daoManager.getXXSecurityZoneRefService()).thenReturn(svcDao);
        Mockito.when(daoManager.getXXSecurityZoneRefTagService()).thenReturn(tagSvcDao);

        List<RangerServiceHeaderInfo> services = new ArrayList<>();
        services.add(new RangerServiceHeaderInfo(1L, "s1", "disp", "type", true));
        List<RangerServiceHeaderInfo> tagServices = new ArrayList<>();
        tagServices.add(new RangerServiceHeaderInfo(2L, "t1", "disp2", "type", true));

        Mockito.when(svcDao.findServiceHeaderInfosByZoneId(7L)).thenReturn(services);
        Mockito.when(tagSvcDao.findServiceHeaderInfosByZoneId(7L)).thenReturn(tagServices);

        List<RangerServiceHeaderInfo> result = securityZoneDBStore.getServiceHeaderInfoListByZoneId(7L, request);
        Assertions.assertEquals(2, result.size());
    }
}
