/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package org.apache.ranger.biz;

import org.apache.ranger.plugin.model.RangerPolicy;
import org.apache.ranger.plugin.policyengine.gds.GdsPolicyEngine;
import org.apache.ranger.plugin.util.ServicePolicies;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.mockito.ArgumentMatchers.anyLong;
import static org.mockito.ArgumentMatchers.anyString;
import static org.mockito.Mockito.when;

/**
* @generated by Cursor
* @description <Unit Test for TestGdsPolicyAdminCache class>
*/
@ExtendWith(MockitoExtension.class)
@TestMethodOrder(MethodOrderer.MethodName.class)
public class TestGdsPolicyAdminCache {
    @InjectMocks
    GdsPolicyAdminCache cache;

    @Mock
    ServiceDBStore svcStore;

    @Test
    public void testIsDatasetSharedWithAndProjectSharedWith() throws Exception {
        // Prepare policies in ServicePolicies
        ServicePolicies sp = new ServicePolicies();
        sp.setServiceName(GdsPolicyEngine.GDS_SERVICE_NAME);
        sp.setPolicyVersion(2L);
        List<RangerPolicy> policies = new ArrayList<>();
        policies.add(buildDatasetPolicy(100L, 10L, Arrays.asList("u1"), Arrays.asList("g1"), Arrays.asList("r1")));
        policies.add(buildProjectPolicy(200L, 20L, Arrays.asList("u2"), Arrays.asList("g2"), Arrays.asList("r2")));
        sp.setPolicies(policies);

        when(svcStore.getServicePoliciesIfUpdated(anyString(), anyLong(), Mockito.eq(true))).thenReturn(sp);

        // First call loads into cache
        boolean datasetShared = cache.isDatasetSharedWith(10L, "u1", Collections.emptyList(), Collections.emptyList());
        assertTrue(datasetShared);

        boolean projectShared = cache.isProjectSharedWith(20L, "u2", Collections.emptyList(), Collections.emptyList());
        assertTrue(projectShared);

        // user not present but group/public/role checks
        boolean datasetByGroup = cache.isDatasetSharedWith(10L, "x", Collections.singleton("g1"),
                Collections.emptyList());
        assertTrue(datasetByGroup);

        boolean datasetByRole = cache.isDatasetSharedWith(10L, "x", Collections.emptyList(),
                Collections.singleton("r1"));
        assertTrue(datasetByRole);

        boolean projectNo = cache.isProjectSharedWith(20L, "none", Collections.emptyList(), Collections.emptyList());
        assertFalse(projectNo);
    }

    @Test
    public void testGetLatestPolicies_NoChangesOrError() throws Exception {
        // First simulate no change
        when(svcStore.getServicePoliciesIfUpdated(anyString(), anyLong(), Mockito.eq(true))).thenReturn(null);
        // Nothing throws
        assertFalse(cache.isDatasetSharedWith(999L, "u", Collections.emptyList(), Collections.emptyList()));

        // Then simulate exception during refresh
        when(svcStore.getServicePoliciesIfUpdated(anyString(), anyLong(), Mockito.eq(true)))
                .thenThrow(new RuntimeException("boom"));
        assertFalse(cache.isProjectSharedWith(111L, "u", Collections.emptyList(), Collections.emptyList()));
    }

    @Test
    public void testHasReference_NullsAndPublicGroup() throws Exception {
        ServicePolicies sp = new ServicePolicies();
        sp.setServiceName(GdsPolicyEngine.GDS_SERVICE_NAME);
        sp.setPolicyVersion(3L);
        RangerPolicy p = new RangerPolicy();
        p.setId(300L);
        p.setIsEnabled(true);
        p.setResources(singletonResource("dataset-id", "30"));
        RangerPolicy.RangerPolicyItem item = new RangerPolicy.RangerPolicyItem();
        item.setUsers(null);
        item.setGroups(Arrays.asList("public"));
        item.setRoles(null);
        p.setPolicyItems(Collections.singletonList(item));
        sp.setPolicies(Collections.singletonList(p));

        when(svcStore.getServicePoliciesIfUpdated(anyString(), anyLong(), Mockito.eq(true))).thenReturn(sp);
        assertTrue(cache.isDatasetSharedWith(30L, "any", Collections.emptyList(), Collections.emptyList()));
    }

    @Test
    public void testPrivateGetIdParsingAndWarnings() throws Exception {
        ServicePolicies sp = new ServicePolicies();
        sp.setServiceName(GdsPolicyEngine.GDS_SERVICE_NAME);
        sp.setPolicyVersion(4L);
        List<RangerPolicy> list = new ArrayList<>();
        // malformed dataset id values
        RangerPolicy badDs = new RangerPolicy();
        badDs.setId(1L);
        badDs.setIsEnabled(true);
        badDs.setResources(singletonResource("dataset-id", "not-a-number"));
        list.add(badDs);
        // no dataset/project keys
        RangerPolicy noKey = new RangerPolicy();
        noKey.setId(2L);
        noKey.setIsEnabled(true);
        noKey.setResources(singletonResource("other", "5"));
        list.add(noKey);
        sp.setPolicies(list);
        when(svcStore.getServicePoliciesIfUpdated(anyString(), anyLong(), Mockito.eq(true))).thenReturn(sp);
        // should not throw
        assertFalse(cache.isDatasetSharedWith(999L, "u", Collections.emptyList(), Collections.emptyList()));
    }

    private RangerPolicy buildDatasetPolicy(Long id, Long datasetId, List<String> users, List<String> groups, List<String> roles) {
        RangerPolicy p = new RangerPolicy();
        p.setId(id);
        p.setIsEnabled(true);
        p.setResources(singletonResource(GdsPolicyEngine.RESOURCE_NAME_DATASET_ID, String.valueOf(datasetId)));
        RangerPolicy.RangerPolicyItem item = new RangerPolicy.RangerPolicyItem();
        item.setUsers(users);
        item.setGroups(groups);
        item.setRoles(roles);
        p.setPolicyItems(Collections.singletonList(item));
        return p;
    }

    private RangerPolicy buildProjectPolicy(Long id, Long projectId, List<String> users, List<String> groups, List<String> roles) {
        RangerPolicy p = new RangerPolicy();
        p.setId(id);
        p.setIsEnabled(true);
        p.setResources(singletonResource(GdsPolicyEngine.RESOURCE_NAME_PROJECT_ID, String.valueOf(projectId)));
        RangerPolicy.RangerPolicyItem item = new RangerPolicy.RangerPolicyItem();
        item.setUsers(users);
        item.setGroups(groups);
        item.setRoles(roles);
        p.setPolicyItems(Collections.singletonList(item));
        return p;
    }

    private Map<String, RangerPolicy.RangerPolicyResource> singletonResource(String key, String value) {
        Map<String, RangerPolicy.RangerPolicyResource> map = new HashMap<>();
        RangerPolicy.RangerPolicyResource res = new RangerPolicy.RangerPolicyResource();
        res.setIsExcludes(false);
        res.setIsRecursive(false);
        res.setValues(Collections.singletonList(value));
        map.put(key, res);
        return map;
    }
}
