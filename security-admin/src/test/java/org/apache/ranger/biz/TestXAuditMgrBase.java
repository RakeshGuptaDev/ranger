/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.apache.ranger.biz;

import org.apache.ranger.common.MessageEnums;
import org.apache.ranger.common.RESTErrorUtil;
import org.apache.ranger.common.SearchCriteria;
import org.apache.ranger.plugin.store.PList;
import org.apache.ranger.service.RangerTrxLogV2Service;
import org.apache.ranger.service.XAccessAuditService;
import org.apache.ranger.view.VXAccessAudit;
import org.apache.ranger.view.VXAccessAuditList;
import org.apache.ranger.view.VXLong;
import org.apache.ranger.view.VXTrxLog;
import org.apache.ranger.view.VXTrxLogList;
import org.apache.ranger.view.VXTrxLogV2;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;

import javax.ws.rs.WebApplicationException;

import java.lang.reflect.Field;
import java.util.Arrays;
import java.util.Collections;

import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.eq;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

/**
* @generated by Cursor
* @description <Unit Test for TestXAuditMgrBase class>
*/
@ExtendWith(MockitoExtension.class)
@TestMethodOrder(MethodOrderer.MethodName.class)
public class TestXAuditMgrBase {
    private static class TestableXAuditMgrBase extends XAuditMgrBase { }

    private static void setField(Object target, String fieldName, Object value) throws Exception {
        Field f = XAuditMgrBase.class.getDeclaredField(fieldName);
        f.setAccessible(true);
        f.set(target, value);
    }

    @Test
    public void testGetXTrxLog() throws Exception {
        TestableXAuditMgrBase mgr = new TestableXAuditMgrBase();
        RangerTrxLogV2Service svc = mock(RangerTrxLogV2Service.class);
        setField(mgr, "xTrxLogService", svc);

        VXTrxLogV2 v2 = new VXTrxLogV2();
        v2.setId(5L);
        when(svc.readResource(5L)).thenReturn(v2);

        VXTrxLog ret = mgr.getXTrxLog(5L);
        Assertions.assertNotNull(ret);
        Assertions.assertEquals(5L, ret.getId());
    }

    @Test
    public void testCreateXTrxLog() throws Exception {
        TestableXAuditMgrBase mgr = new TestableXAuditMgrBase();
        RangerTrxLogV2Service svc = mock(RangerTrxLogV2Service.class);
        setField(mgr, "xTrxLogService", svc);

        VXTrxLog input = new VXTrxLog();
        input.setId(10L);
        VXTrxLogV2 created = new VXTrxLogV2();
        created.setId(10L);
        when(svc.createResource(any(VXTrxLogV2.class))).thenReturn(created);

        VXTrxLog ret = mgr.createXTrxLog(input);
        Assertions.assertNotNull(ret);
        Assertions.assertEquals(10L, ret.getId());
    }

    @Test
    public void testUpdateXTrxLog() throws Exception {
        TestableXAuditMgrBase mgr = new TestableXAuditMgrBase();
        RangerTrxLogV2Service svc = mock(RangerTrxLogV2Service.class);
        setField(mgr, "xTrxLogService", svc);

        VXTrxLog input = new VXTrxLog();
        input.setId(11L);
        VXTrxLogV2 updated = new VXTrxLogV2();
        updated.setId(11L);
        when(svc.updateResource(any(VXTrxLogV2.class))).thenReturn(updated);

        VXTrxLog ret = mgr.updateXTrxLog(input);
        Assertions.assertNotNull(ret);
        Assertions.assertEquals(11L, ret.getId());
    }

    @Test
    public void testDeleteXTrxLog_forceTrue_callsService() throws Exception {
        TestableXAuditMgrBase mgr = new TestableXAuditMgrBase();
        RangerTrxLogV2Service svc = mock(RangerTrxLogV2Service.class);
        setField(mgr, "xTrxLogService", svc);

        mgr.deleteXTrxLog(7L, true);
        verify(svc, times(1)).deleteResource(7L);
    }

    @Test
    public void testDeleteXTrxLog_forceFalse_throws() throws Exception {
        TestableXAuditMgrBase mgr = new TestableXAuditMgrBase();
        RESTErrorUtil restErrorUtil = mock(RESTErrorUtil.class);
        setField(mgr, "restErrorUtil", restErrorUtil);

        WebApplicationException expected = new WebApplicationException();
        when(restErrorUtil.createRESTException(eq("serverMsg.modelMgrBaseDeleteModel"), eq(MessageEnums.OPER_NOT_ALLOWED_FOR_ENTITY)))
                .thenReturn(expected);

        WebApplicationException thrown = Assertions.assertThrows(WebApplicationException.class, () -> mgr.deleteXTrxLog(8L, false));
        Assertions.assertSame(expected, thrown);
    }

    @Test
    public void testSearchXTrxLogs() throws Exception {
        TestableXAuditMgrBase mgr = new TestableXAuditMgrBase();
        RangerTrxLogV2Service svc = mock(RangerTrxLogV2Service.class);
        setField(mgr, "xTrxLogService", svc);

        SearchCriteria criteria = new SearchCriteria();
        VXTrxLogV2 v2 = new VXTrxLogV2();
        v2.setId(1L);
        PList<VXTrxLogV2> plist = new PList<>();
        plist.setList(Collections.singletonList(v2));
        plist.setStartIndex(1);
        plist.setPageSize(2);
        plist.setTotalCount(3);
        plist.setResultSize(1);
        plist.setSortBy("id");
        plist.setSortType("asc");

        when(svc.searchTrxLogs(criteria)).thenReturn(plist);

        VXTrxLogList ret = mgr.searchXTrxLogs(criteria);
        Assertions.assertNotNull(ret);
        Assertions.assertEquals(1, ret.getListSize());
        Assertions.assertEquals(1, ret.getStartIndex());
        Assertions.assertEquals(2, ret.getPageSize());
        Assertions.assertEquals(3, ret.getTotalCount());
        Assertions.assertEquals(1, ret.getResultSize());
        Assertions.assertEquals("id", ret.getSortBy());
        Assertions.assertEquals("asc", ret.getSortType());
    }

    @Test
    public void testGetXTrxLogSearchCount() throws Exception {
        TestableXAuditMgrBase mgr = new TestableXAuditMgrBase();
        RangerTrxLogV2Service svc = mock(RangerTrxLogV2Service.class);
        setField(mgr, "xTrxLogService", svc);

        SearchCriteria criteria = new SearchCriteria();
        when(svc.getTrxLogsCount(criteria)).thenReturn(42L);

        VXLong ret = mgr.getXTrxLogSearchCount(criteria);
        Assertions.assertEquals(42L, ret.getValue());
    }

    @Test
    public void testXAccessAudit_crud_and_search() throws Exception {
        TestableXAuditMgrBase mgr = new TestableXAuditMgrBase();
        XAccessAuditService svc = mock(XAccessAuditService.class);
        setField(mgr, "xAccessAuditService", svc);

        VXAccessAudit audit = new VXAccessAudit();
        when(svc.readResource(1L)).thenReturn(audit);
        Assertions.assertSame(audit, mgr.getXAccessAudit(1L));

        VXAccessAudit created = new VXAccessAudit();
        when(svc.createResource(audit)).thenReturn(created);
        Assertions.assertSame(created, mgr.createXAccessAudit(audit));

        VXAccessAudit updated = new VXAccessAudit();
        when(svc.updateResource(audit)).thenReturn(updated);
        Assertions.assertSame(updated, mgr.updateXAccessAudit(audit));

        mgr.deleteXAccessAudit(4L, true);
        verify(svc, times(1)).deleteResource(4L);

        VXAccessAuditList list = new VXAccessAuditList();
        list.setVXAccessAudits(Arrays.asList(new VXAccessAudit(), new VXAccessAudit()));
        SearchCriteria criteria = new SearchCriteria();
        when(svc.searchXAccessAudits(criteria)).thenReturn(list);
        Assertions.assertSame(list, mgr.searchXAccessAudits(criteria));
    }

    @Test
    public void testGetXAccessAuditSearchCount() throws Exception {
        TestableXAuditMgrBase mgr = new TestableXAuditMgrBase();
        XAccessAuditService svc = mock(XAccessAuditService.class);
        setField(mgr, "xAccessAuditService", svc);

        SearchCriteria criteria = new SearchCriteria();
        VXLong count = new VXLong();
        when(svc.getSearchCount(eq(criteria), any())).thenReturn(count);

        VXLong ret = mgr.getXAccessAuditSearchCount(criteria);
        Assertions.assertSame(count, ret);
    }
}
