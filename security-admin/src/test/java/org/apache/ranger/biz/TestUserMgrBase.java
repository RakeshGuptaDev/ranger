/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.apache.ranger.biz;

import org.apache.ranger.common.MessageEnums;
import org.apache.ranger.common.RESTErrorUtil;
import org.apache.ranger.common.SearchCriteria;
import org.apache.ranger.service.XPortalUserService;
import org.apache.ranger.view.VXLong;
import org.apache.ranger.view.VXPortalUser;
import org.apache.ranger.view.VXPortalUserList;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;

import javax.ws.rs.WebApplicationException;

import java.lang.reflect.Field;

import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.eq;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

/**
* @generated by Cursor
* @description <Unit Test for TestUserMgrBase class>
*/
@ExtendWith(MockitoExtension.class)
@TestMethodOrder(MethodOrderer.MethodName.class)
public class TestUserMgrBase {
    private static class TestableUserMgrBase extends UserMgrBase { }

    private static void setField(Object target, String fieldName, Object value) throws Exception {
        Field f = UserMgrBase.class.getDeclaredField(fieldName);
        f.setAccessible(true);
        f.set(target, value);
    }

    @Test
    public void testGetXPortalUser() throws Exception {
        TestableUserMgrBase mgr = new TestableUserMgrBase();
        XPortalUserService svc = mock(XPortalUserService.class);
        setField(mgr, "xPortalUserService", svc);

        VXPortalUser user = new VXPortalUser();
        when(svc.readResource(1L)).thenReturn(user);

        Assertions.assertSame(user, mgr.getXPortalUser(1L));
    }

    @Test
    public void testCreateXPortalUser() throws Exception {
        TestableUserMgrBase mgr = new TestableUserMgrBase();
        XPortalUserService svc = mock(XPortalUserService.class);
        setField(mgr, "xPortalUserService", svc);

        VXPortalUser input = new VXPortalUser();
        VXPortalUser created = new VXPortalUser();
        when(svc.createResource(input)).thenReturn(created);

        VXPortalUser ret = mgr.createXPortalUser(input);
        Assertions.assertSame(created, ret);
    }

    @Test
    public void testUpdateXPortalUser() throws Exception {
        TestableUserMgrBase mgr = new TestableUserMgrBase();
        XPortalUserService svc = mock(XPortalUserService.class);
        setField(mgr, "xPortalUserService", svc);

        VXPortalUser input = new VXPortalUser();
        VXPortalUser updated = new VXPortalUser();
        when(svc.updateResource(input)).thenReturn(updated);

        VXPortalUser ret = mgr.updateXPortalUser(input);
        Assertions.assertSame(updated, ret);
    }

    @Test
    public void testDeleteXPortalUser_forceTrue_callsService() throws Exception {
        TestableUserMgrBase mgr = new TestableUserMgrBase();
        XPortalUserService svc = mock(XPortalUserService.class);
        setField(mgr, "xPortalUserService", svc);

        mgr.deleteXPortalUser(7L, true);
        verify(svc, times(1)).deleteResource(7L);
    }

    @Test
    public void testDeleteXPortalUser_forceFalse_throwsRestException() throws Exception {
        TestableUserMgrBase mgr = new TestableUserMgrBase();
        XPortalUserService svc = mock(XPortalUserService.class);
        RESTErrorUtil restErrorUtil = mock(RESTErrorUtil.class);
        setField(mgr, "xPortalUserService", svc);
        setField(mgr, "restErrorUtil", restErrorUtil);

        WebApplicationException expected = new WebApplicationException();
        when(restErrorUtil.createRESTException(eq("serverMsg.modelMgrBaseDeleteModel"), eq(MessageEnums.OPER_NOT_ALLOWED_FOR_ENTITY)))
                .thenReturn(expected);

        WebApplicationException thrown = Assertions.assertThrows(WebApplicationException.class, () -> mgr.deleteXPortalUser(9L, false));
        Assertions.assertSame(expected, thrown);
    }

    @Test
    public void testSearchXPortalUsers() throws Exception {
        TestableUserMgrBase mgr = new TestableUserMgrBase();
        XPortalUserService svc = mock(XPortalUserService.class);
        setField(mgr, "xPortalUserService", svc);

        SearchCriteria criteria = new SearchCriteria();
        VXPortalUserList list = new VXPortalUserList();
        when(svc.searchXPortalUsers(criteria)).thenReturn(list);

        Assertions.assertSame(list, mgr.searchXPortalUsers(criteria));
    }

    @Test
    public void testGetXPortalUserSearchCount() throws Exception {
        TestableUserMgrBase mgr = new TestableUserMgrBase();
        XPortalUserService svc = mock(XPortalUserService.class);
        setField(mgr, "xPortalUserService", svc);

        SearchCriteria criteria = new SearchCriteria();
        VXLong count = new VXLong();
        when(svc.getSearchCount(eq(criteria), any())).thenReturn(count);

        Assertions.assertSame(count, mgr.getXPortalUserSearchCount(criteria));
    }
}
