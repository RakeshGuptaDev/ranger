/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package org.apache.ranger.biz;

import com.sun.jersey.api.client.Client;
import com.sun.jersey.api.client.ClientResponse;
import com.sun.jersey.api.client.UniformInterfaceException;
import com.sun.jersey.api.client.WebResource;
import org.apache.commons.collections.Predicate;
import org.apache.hadoop.security.SecureClientLogin;
import org.apache.hadoop.security.authentication.util.KerberosName;
import org.apache.ranger.authorization.utils.JsonUtils;
import org.apache.ranger.common.ContextUtil;
import org.apache.ranger.common.MessageEnums;
import org.apache.ranger.common.PropertiesUtil;
import org.apache.ranger.common.RESTErrorUtil;
import org.apache.ranger.common.RangerConfigUtil;
import org.apache.ranger.common.SortField;
import org.apache.ranger.common.StringUtil;
import org.apache.ranger.db.RangerDaoManagerBase;
import org.apache.ranger.db.XXServiceConfigMapDao;
import org.apache.ranger.db.XXServiceDao;
import org.apache.ranger.entity.XXService;
import org.apache.ranger.entity.XXServiceConfigMap;
import org.apache.ranger.plugin.model.RangerService;
import org.apache.ranger.plugin.util.KeySearchFilter;
import org.apache.ranger.plugin.util.PasswordUtils;
import org.apache.ranger.view.VXKmsKey;
import org.apache.ranger.view.VXKmsKeyList;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockedStatic;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;

import javax.security.auth.Subject;
import javax.servlet.http.HttpServletRequest;
import javax.ws.rs.core.MediaType;

import java.lang.reflect.Field;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.security.PrivilegedAction;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
* @generated by Cursor
* @description <Unit Test for TestKmsKeyMgr class>
*/
@ExtendWith(MockitoExtension.class)
@TestMethodOrder(MethodOrderer.MethodName.class)
public class TestKmsKeyMgr {
    @InjectMocks
    private KmsKeyMgr kmsKeyMgr;

    @Mock
    private ServiceDBStore svcStore;

    @Mock
    private RESTErrorUtil restErrorUtil;

    @Mock
    private RangerConfigUtil configUtil;

    @Mock
    private RangerDaoManagerBase rangerDaoManagerBase;

    @Mock
    private RangerBizUtil rangerBizUtil;

    @Mock
    private HttpServletRequest request;

    @Mock
    private WebResource webResource;

    @Mock
    private WebResource.Builder webResourceBuilder;

    @Mock
    private Client client;

    @Mock
    private XXServiceDao xxServiceDao;

    @Mock
    private XXServiceConfigMapDao xxServiceConfigMapDao;

    private static final String TEST_REPO_NAME = "testKmsRepo";
    private static final String TEST_KEY_NAME = "testKey";
    private static final String TEST_PROVIDER_URL = "kms://http@localhost:9292/kms";
    private static final String TEST_USERNAME = "testUser";
    private static final String TEST_PASSWORD = "testPassword";

    @AfterEach
    public void cleanup() {
        // Clean up any static state
        try {
            Field providerListField = KmsKeyMgr.class.getDeclaredField("providerList");
            providerListField.setAccessible(true);
            Map<String, String> providerList = (Map<String, String>) providerListField.get(null);
            providerList.clear();

            Field nextProviderField = KmsKeyMgr.class.getDeclaredField("nextProvider");
            nextProviderField.setAccessible(true);
            nextProviderField.set(null, 0);
        } catch (Exception e) {
            // Ignore cleanup errors
        }
    }

    @Test
    public void testSearchKeys_Success() throws Exception {
        // Setup mocks
        RangerService rangerService = createMockRangerService();
        VXKmsKey mockKey = createMockVXKmsKey();
        List<String> keyNames = Collections.singletonList(TEST_KEY_NAME);
        String jsonResponse = "[\"" + TEST_KEY_NAME + "\"]";
        String keyMetadataResponse = JsonUtils.objectToJson(mockKey);

        try (MockedStatic<ContextUtil> contextUtilMock = Mockito.mockStatic(ContextUtil.class);
                MockedStatic<StringUtil> stringUtilMock = Mockito.mockStatic(StringUtil.class);
                MockedStatic<JsonUtils> jsonUtilsMock = Mockito.mockStatic(JsonUtils.class);
                MockedStatic<PropertiesUtil> propertiesUtilMock = Mockito.mockStatic(PropertiesUtil.class)) {
            contextUtilMock.when(ContextUtil::getCurrentUserLoginId).thenReturn(TEST_USERNAME);
            stringUtilMock.when(() -> StringUtil.getUTFEncodedString(TEST_USERNAME)).thenReturn(TEST_USERNAME);
            jsonUtilsMock.when(() -> JsonUtils.jsonToListString(jsonResponse)).thenReturn(keyNames);
            jsonUtilsMock.when(() -> JsonUtils.jsonToObject(keyMetadataResponse, VXKmsKey.class)).thenReturn(mockKey);
            propertiesUtilMock.when(() -> PropertiesUtil.getProperty("hadoop.security.authentication", "simple")).thenReturn("simple");

            Mockito.when(request.getParameter(KeySearchFilter.KEY_NAME)).thenReturn(null);
            Mockito.when(request.getParameter(KeySearchFilter.START_INDEX)).thenReturn(null);
            Mockito.when(request.getParameter(KeySearchFilter.PAGE_SIZE)).thenReturn(null);
            Mockito.when(request.getParameter("getCount")).thenReturn(null);
            Mockito.when(request.getParameter(KeySearchFilter.SORT_BY)).thenReturn(null);

            Mockito.when(svcStore.getServiceByName(TEST_REPO_NAME)).thenReturn(rangerService);
            Mockito.when(configUtil.getDefaultMaxRows()).thenReturn(10);
            Mockito.when(restErrorUtil.parseInt(Mockito.isNull(), Mockito.eq(0), Mockito.eq("Invalid value for parameter startIndex"),
                    Mockito.eq(MessageEnums.INVALID_INPUT_DATA), Mockito.isNull(), Mockito.eq(KeySearchFilter.START_INDEX))).thenReturn(0);
            Mockito.when(restErrorUtil.parseInt(Mockito.isNull(), Mockito.eq(10), Mockito.eq("Invalid value for parameter pageSize"),
                    Mockito.eq(MessageEnums.INVALID_INPUT_DATA), Mockito.isNull(), Mockito.eq(KeySearchFilter.PAGE_SIZE))).thenReturn(10);
            Mockito.when(restErrorUtil.parseBoolean(Mockito.isNull(), Mockito.eq(true))).thenReturn(true);
            Mockito.when(restErrorUtil.validateString(Mockito.isNull(), Mockito.anyString(), Mockito.eq("Invalid value for parameter sortBy"),
                    Mockito.eq(MessageEnums.INVALID_INPUT_DATA), Mockito.isNull(), Mockito.eq(KeySearchFilter.SORT_BY))).thenReturn(null);

            // Mock client and web resource
            try (MockedStatic<Client> clientMock = Mockito.mockStatic(Client.class)) {
                clientMock.when(() -> Client.create(Mockito.any())).thenReturn(client);
                Mockito.when(client.resource(Mockito.anyString())).thenReturn(webResource);
                Mockito.when(webResource.accept(MediaType.APPLICATION_JSON_TYPE)).thenReturn(webResourceBuilder);
                Mockito.when(webResourceBuilder.type(MediaType.APPLICATION_JSON_TYPE)).thenReturn(webResourceBuilder);
                Mockito.when(webResourceBuilder.get(String.class)).thenReturn(jsonResponse, keyMetadataResponse);

                VXKmsKeyList result = kmsKeyMgr.searchKeys(request, TEST_REPO_NAME);

                Assertions.assertNotNull(result);
                Assertions.assertNotNull(result.getVXKeys());
            }
        }
    }

    @Test
    public void testSearchKeys_WithKerberos() throws Exception {
        // Setup mocks
        RangerService rangerService = createMockRangerService();
        VXKmsKey mockKey = createMockVXKmsKey();
        List<String> keyNames = Collections.singletonList(TEST_KEY_NAME);
        String jsonResponse = "[\"" + TEST_KEY_NAME + "\"]";
        Subject mockSubject = new Subject();

        try (MockedStatic<ContextUtil> contextUtilMock = Mockito.mockStatic(ContextUtil.class);
                MockedStatic<StringUtil> stringUtilMock = Mockito.mockStatic(StringUtil.class);
                MockedStatic<JsonUtils> jsonUtilsMock = Mockito.mockStatic(JsonUtils.class);
                MockedStatic<PropertiesUtil> propertiesUtilMock = Mockito.mockStatic(PropertiesUtil.class);
                MockedStatic<SecureClientLogin> secureClientLoginMock = Mockito.mockStatic(SecureClientLogin.class);
                MockedStatic<Subject> subjectMock = Mockito.mockStatic(Subject.class);
                MockedStatic<PasswordUtils> passwordUtilsMock = Mockito.mockStatic(PasswordUtils.class)) {
            contextUtilMock.when(ContextUtil::getCurrentUserLoginId).thenReturn(TEST_USERNAME);
            stringUtilMock.when(() -> StringUtil.getUTFEncodedString(TEST_USERNAME)).thenReturn(TEST_USERNAME);
            jsonUtilsMock.when(() -> JsonUtils.jsonToListString(jsonResponse)).thenReturn(keyNames);
            jsonUtilsMock.when(() -> JsonUtils.jsonToObject(Mockito.anyString(), Mockito.eq(VXKmsKey.class))).thenReturn(mockKey);
            propertiesUtilMock.when(() -> PropertiesUtil.getProperty("hadoop.security.authentication", "simple")).thenReturn("kerberos");
            propertiesUtilMock.when(() -> PropertiesUtil.getProperty("hadoop.security.auth_to_local")).thenReturn("DEFAULT");
            propertiesUtilMock.when(() -> PropertiesUtil.getProperty("ranger.admin.kerberos.principal")).thenReturn("ranger/_HOST@REALM");
            propertiesUtilMock.when(() -> PropertiesUtil.getProperty("ranger.admin.kerberos.keytab")).thenReturn("/etc/ranger/keytab");
            propertiesUtilMock.when(() -> PropertiesUtil.getProperty("ranger.service.host")).thenReturn("localhost");

            // Mock request parameters for searchKeys
            Mockito.when(request.getParameter(KeySearchFilter.KEY_NAME)).thenReturn(null);
            Mockito.when(request.getParameter(KeySearchFilter.START_INDEX)).thenReturn(null);
            Mockito.when(request.getParameter(KeySearchFilter.PAGE_SIZE)).thenReturn(null);
            Mockito.when(request.getParameter("getCount")).thenReturn(null);
            Mockito.when(request.getParameter(KeySearchFilter.SORT_BY)).thenReturn(null);
            //Mockito.when(request.getParameter("sortType")).thenReturn(null);

            secureClientLoginMock.when(() -> SecureClientLogin.getPrincipal(Mockito.anyString(), Mockito.anyString())).thenReturn("ranger/localhost@REALM");
            secureClientLoginMock.when(() -> SecureClientLogin.isKerberosCredentialExists(Mockito.anyString(), Mockito.anyString())).thenReturn(true);
            secureClientLoginMock.when(() -> SecureClientLogin.loginUserFromKeytab(Mockito.anyString(), Mockito.anyString(), Mockito.anyString())).thenReturn(mockSubject);
            passwordUtilsMock.when(() -> PasswordUtils.decryptPassword("encryptedPassword")).thenReturn(TEST_PASSWORD);

            subjectMock.when(() -> Subject.doAs(Mockito.eq(mockSubject), Mockito.any(PrivilegedAction.class))).thenReturn(jsonResponse, mockKey.toString());

            XXService xxService = new XXService();
            xxService.setId(1L);
            XXServiceConfigMap xxServiceConfigMap = new XXServiceConfigMap();
            xxServiceConfigMap.setConfigvalue("encryptedPassword");

            Mockito.when(svcStore.getServiceByName(TEST_REPO_NAME)).thenReturn(rangerService);
            Mockito.when(rangerDaoManagerBase.getXXService()).thenReturn(xxServiceDao);
            Mockito.when(xxServiceDao.findByName(TEST_REPO_NAME)).thenReturn(xxService);
            Mockito.when(rangerDaoManagerBase.getXXServiceConfigMap()).thenReturn(xxServiceConfigMapDao);
            Mockito.when(xxServiceConfigMapDao.findByServiceAndConfigKey(1L, "password")).thenReturn(xxServiceConfigMap);
            Mockito.when(configUtil.getDefaultMaxRows()).thenReturn(10);
            Mockito.when(restErrorUtil.parseInt(Mockito.isNull(), Mockito.eq(0), Mockito.eq("Invalid value for parameter startIndex"),
                    Mockito.eq(MessageEnums.INVALID_INPUT_DATA), Mockito.isNull(), Mockito.eq(KeySearchFilter.START_INDEX))).thenReturn(0);
            Mockito.when(restErrorUtil.parseInt(Mockito.isNull(), Mockito.eq(10), Mockito.eq("Invalid value for parameter pageSize"),
                    Mockito.eq(MessageEnums.INVALID_INPUT_DATA), Mockito.isNull(), Mockito.eq(KeySearchFilter.PAGE_SIZE))).thenReturn(10);
            Mockito.when(restErrorUtil.parseBoolean(Mockito.isNull(), Mockito.eq(true))).thenReturn(true);
            Mockito.when(restErrorUtil.validateString(Mockito.isNull(), Mockito.anyString(), Mockito.eq("Invalid value for parameter sortBy"),
                    Mockito.eq(MessageEnums.INVALID_INPUT_DATA), Mockito.isNull(), Mockito.eq(KeySearchFilter.SORT_BY))).thenReturn(null);

            // Mock client and web resource
            try (MockedStatic<Client> clientMock = Mockito.mockStatic(Client.class)) {
                clientMock.when(() -> Client.create(Mockito.any())).thenReturn(client);
                Mockito.when(client.resource(Mockito.anyString())).thenReturn(webResource);

                // Execute test
                VXKmsKeyList result = kmsKeyMgr.searchKeys(request, TEST_REPO_NAME);

                // Verify results
                Assertions.assertNotNull(result);
            }
        }
    }

    @Test
    public void testSearchKeys_ExceptionHandling() throws Exception {
        try (MockedStatic<ContextUtil> contextUtilMock = Mockito.mockStatic(ContextUtil.class);
                MockedStatic<StringUtil> stringUtilMock = Mockito.mockStatic(StringUtil.class);
                MockedStatic<PropertiesUtil> propertiesUtilMock = Mockito.mockStatic(PropertiesUtil.class)) {
            contextUtilMock.when(ContextUtil::getCurrentUserLoginId).thenReturn(TEST_USERNAME);
            stringUtilMock.when(() -> StringUtil.getUTFEncodedString(TEST_USERNAME)).thenReturn(TEST_USERNAME);
            propertiesUtilMock.when(() -> PropertiesUtil.getProperty("hadoop.security.authentication", "simple")).thenReturn("simple");

            Mockito.when(svcStore.getServiceByName(TEST_REPO_NAME)).thenThrow(new RuntimeException("Service not found"));

            VXKmsKeyList result = kmsKeyMgr.searchKeys(request, TEST_REPO_NAME);

            Assertions.assertNotNull(result);
            Assertions.assertNotNull(result.getVXKeys());
            Assertions.assertTrue(result.getVXKeys().isEmpty());
        }
    }

    @Test
    public void testRolloverKey_Success() throws Exception {
        VXKmsKey inputKey = createMockVXKmsKey();
        VXKmsKey resultKey = createMockVXKmsKey();
        RangerService rangerService = createMockRangerService();
        String inputJson = "{}";
        String jsonResponse = JsonUtils.objectToJson(resultKey);

        try (MockedStatic<ContextUtil> contextUtilMock = Mockito.mockStatic(ContextUtil.class);
                MockedStatic<StringUtil> stringUtilMock = Mockito.mockStatic(StringUtil.class);
                MockedStatic<JsonUtils> jsonUtilsMock = Mockito.mockStatic(JsonUtils.class);
                MockedStatic<PropertiesUtil> propertiesUtilMock = Mockito.mockStatic(PropertiesUtil.class)) {
            contextUtilMock.when(ContextUtil::getCurrentUserLoginId).thenReturn(TEST_USERNAME);
            stringUtilMock.when(() -> StringUtil.getUTFEncodedString(TEST_USERNAME)).thenReturn(TEST_USERNAME);
            jsonUtilsMock.when(() -> JsonUtils.objectToJson(inputKey)).thenReturn(inputJson);
            jsonUtilsMock.when(() -> JsonUtils.jsonToObject(jsonResponse, VXKmsKey.class)).thenReturn(resultKey);
            propertiesUtilMock.when(() -> PropertiesUtil.getProperty("hadoop.security.authentication", "simple")).thenReturn("simple");

            Mockito.when(svcStore.getServiceByName(TEST_REPO_NAME)).thenReturn(rangerService);

            // Mock client and web resource
            try (MockedStatic<Client> clientMock = Mockito.mockStatic(Client.class)) {
                clientMock.when(() -> Client.create(Mockito.any())).thenReturn(client);
                Mockito.when(client.resource(Mockito.anyString())).thenReturn(webResource);
                Mockito.when(webResource.accept(MediaType.APPLICATION_JSON_TYPE)).thenReturn(webResourceBuilder);
                Mockito.when(webResourceBuilder.type(MediaType.APPLICATION_JSON_TYPE)).thenReturn(webResourceBuilder);
                Mockito.when(webResourceBuilder.post(String.class, inputJson)).thenReturn(jsonResponse);

                VXKmsKey result = kmsKeyMgr.rolloverKey(TEST_REPO_NAME, inputKey);

                Assertions.assertNotNull(result);
                Assertions.assertEquals(TEST_KEY_NAME, result.getName());
                Mockito.verify(rangerBizUtil).blockAuditorRoleUser();
            }
        }
    }

    @Test
    public void testRolloverKey_WithException() throws Exception {
        VXKmsKey inputKey = createMockVXKmsKey();
        RangerService rangerService = createMockRangerService();

        try (MockedStatic<ContextUtil> contextUtilMock = Mockito.mockStatic(ContextUtil.class);
                MockedStatic<StringUtil> stringUtilMock = Mockito.mockStatic(StringUtil.class);
                MockedStatic<JsonUtils> jsonUtilsMock = Mockito.mockStatic(JsonUtils.class);
                MockedStatic<PropertiesUtil> propertiesUtilMock = Mockito.mockStatic(PropertiesUtil.class)) {
            contextUtilMock.when(ContextUtil::getCurrentUserLoginId).thenReturn(TEST_USERNAME);
            stringUtilMock.when(() -> StringUtil.getUTFEncodedString(TEST_USERNAME)).thenReturn(TEST_USERNAME);
            jsonUtilsMock.when(() -> JsonUtils.objectToJson(inputKey)).thenReturn("{}");
            propertiesUtilMock.when(() -> PropertiesUtil.getProperty("hadoop.security.authentication", "simple")).thenReturn("simple");

            Mockito.when(svcStore.getServiceByName(TEST_REPO_NAME)).thenReturn(rangerService);

            // Mock client and web resource to throw exception
            try (MockedStatic<Client> clientMock = Mockito.mockStatic(Client.class)) {
                clientMock.when(() -> Client.create(Mockito.any())).thenReturn(client);
                ClientResponse response = Mockito.mock(ClientResponse.class);
                Mockito.when(client.resource(Mockito.anyString())).thenReturn(webResource);
                Mockito.when(webResource.accept(MediaType.APPLICATION_JSON_TYPE)).thenReturn(webResourceBuilder);
                Mockito.when(webResourceBuilder.type(MediaType.APPLICATION_JSON_TYPE)).thenReturn(webResourceBuilder);
                Mockito.when(webResourceBuilder.post(String.class, "{}")).thenThrow(new UniformInterfaceException("Connection failed", response, false));

                Assertions.assertThrows(Exception.class, () -> {
                    kmsKeyMgr.rolloverKey(TEST_REPO_NAME, inputKey);
                });
            }
        }
    }

    @Test
    public void testDeleteKey_Success() throws Exception {
        RangerService rangerService = createMockRangerService();

        try (MockedStatic<ContextUtil> contextUtilMock = Mockito.mockStatic(ContextUtil.class);
                MockedStatic<StringUtil> stringUtilMock = Mockito.mockStatic(StringUtil.class);
                MockedStatic<PropertiesUtil> propertiesUtilMock = Mockito.mockStatic(PropertiesUtil.class)) {
            contextUtilMock.when(ContextUtil::getCurrentUserLoginId).thenReturn(TEST_USERNAME);
            stringUtilMock.when(() -> StringUtil.getUTFEncodedString(TEST_USERNAME)).thenReturn(TEST_USERNAME);
            propertiesUtilMock.when(() -> PropertiesUtil.getProperty("hadoop.security.authentication", "simple")).thenReturn("simple");

            Mockito.when(svcStore.getServiceByName(TEST_REPO_NAME)).thenReturn(rangerService);

            // Mock client and web resource
            try (MockedStatic<Client> clientMock = Mockito.mockStatic(Client.class)) {
                clientMock.when(() -> Client.create(Mockito.any())).thenReturn(client);
                Mockito.when(client.resource(Mockito.anyString())).thenReturn(webResource);
                Mockito.when(webResource.delete(String.class)).thenReturn("Success");

                Assertions.assertDoesNotThrow(() -> {
                    kmsKeyMgr.deleteKey(TEST_REPO_NAME, TEST_KEY_NAME);
                });

                Mockito.verify(rangerBizUtil).blockAuditorRoleUser();
            }
        }
    }

    @Test
    public void testDeleteKey_WithException() throws Exception {
        RangerService rangerService = createMockRangerService();

        try (MockedStatic<ContextUtil> contextUtilMock = Mockito.mockStatic(ContextUtil.class);
                MockedStatic<StringUtil> stringUtilMock = Mockito.mockStatic(StringUtil.class);
                MockedStatic<PropertiesUtil> propertiesUtilMock = Mockito.mockStatic(PropertiesUtil.class)) {
            contextUtilMock.when(ContextUtil::getCurrentUserLoginId).thenReturn(TEST_USERNAME);
            stringUtilMock.when(() -> StringUtil.getUTFEncodedString(TEST_USERNAME)).thenReturn(TEST_USERNAME);
            propertiesUtilMock.when(() -> PropertiesUtil.getProperty("hadoop.security.authentication", "simple")).thenReturn("simple");

            Mockito.when(svcStore.getServiceByName(TEST_REPO_NAME)).thenReturn(rangerService);

            // Mock client and web resource to throw exception
            try (MockedStatic<Client> clientMock = Mockito.mockStatic(Client.class)) {
                clientMock.when(() -> Client.create(Mockito.any())).thenReturn(client);
                ClientResponse response = Mockito.mock(ClientResponse.class);
                Mockito.when(client.resource(Mockito.anyString())).thenReturn(webResource);
                Mockito.when(webResource.delete(String.class)).thenThrow(new UniformInterfaceException("Delete failed", response, false));

                Assertions.assertThrows(Exception.class, () -> {
                    kmsKeyMgr.deleteKey(TEST_REPO_NAME, TEST_KEY_NAME);
                });
            }
        }
    }

    @Test
    public void testCreateKey_Success() throws Exception {
        VXKmsKey inputKey = createMockVXKmsKey();
        VXKmsKey resultKey = createMockVXKmsKey();
        RangerService rangerService = createMockRangerService();
        String inputJson = "{}";
        String jsonResponse = JsonUtils.objectToJson(resultKey);

        try (MockedStatic<ContextUtil> contextUtilMock = Mockito.mockStatic(ContextUtil.class);
                MockedStatic<StringUtil> stringUtilMock = Mockito.mockStatic(StringUtil.class);
                MockedStatic<JsonUtils> jsonUtilsMock = Mockito.mockStatic(JsonUtils.class);
                MockedStatic<PropertiesUtil> propertiesUtilMock = Mockito.mockStatic(PropertiesUtil.class)) {
            contextUtilMock.when(ContextUtil::getCurrentUserLoginId).thenReturn(TEST_USERNAME);
            stringUtilMock.when(() -> StringUtil.getUTFEncodedString(TEST_USERNAME)).thenReturn(TEST_USERNAME);
            jsonUtilsMock.when(() -> JsonUtils.objectToJson(inputKey)).thenReturn(inputJson);
            jsonUtilsMock.when(() -> JsonUtils.jsonToObject(jsonResponse, VXKmsKey.class)).thenReturn(resultKey);
            propertiesUtilMock.when(() -> PropertiesUtil.getProperty("hadoop.security.authentication", "simple")).thenReturn("simple");

            Mockito.when(svcStore.getServiceByName(TEST_REPO_NAME)).thenReturn(rangerService);

            // Mock client and web resource
            try (MockedStatic<Client> clientMock = Mockito.mockStatic(Client.class)) {
                clientMock.when(() -> Client.create(Mockito.any())).thenReturn(client);
                Mockito.when(client.resource(Mockito.anyString())).thenReturn(webResource);
                Mockito.when(webResource.accept(MediaType.APPLICATION_JSON_TYPE)).thenReturn(webResourceBuilder);
                Mockito.when(webResourceBuilder.type(MediaType.APPLICATION_JSON_TYPE)).thenReturn(webResourceBuilder);
                Mockito.when(webResourceBuilder.post(String.class, inputJson)).thenReturn(jsonResponse);

                VXKmsKey result = kmsKeyMgr.createKey(TEST_REPO_NAME, inputKey);

                Assertions.assertNotNull(result);
                Assertions.assertEquals(TEST_KEY_NAME, result.getName());
                Mockito.verify(rangerBizUtil).blockAuditorRoleUser();
            }
        }
    }

    @Test
    public void testCreateKey_WithException() throws Exception {
        VXKmsKey inputKey = createMockVXKmsKey();
        RangerService rangerService = createMockRangerService();

        try (MockedStatic<ContextUtil> contextUtilMock = Mockito.mockStatic(ContextUtil.class);
                MockedStatic<StringUtil> stringUtilMock = Mockito.mockStatic(StringUtil.class);
                MockedStatic<JsonUtils> jsonUtilsMock = Mockito.mockStatic(JsonUtils.class);
                MockedStatic<PropertiesUtil> propertiesUtilMock = Mockito.mockStatic(PropertiesUtil.class)) {
            contextUtilMock.when(ContextUtil::getCurrentUserLoginId).thenReturn(TEST_USERNAME);
            stringUtilMock.when(() -> StringUtil.getUTFEncodedString(TEST_USERNAME)).thenReturn(TEST_USERNAME);
            jsonUtilsMock.when(() -> JsonUtils.objectToJson(inputKey)).thenReturn("{}");
            propertiesUtilMock.when(() -> PropertiesUtil.getProperty("hadoop.security.authentication", "simple")).thenReturn("simple");

            Mockito.when(svcStore.getServiceByName(TEST_REPO_NAME)).thenReturn(rangerService);

            // Mock client and web resource to throw exception
            try (MockedStatic<Client> clientMock = Mockito.mockStatic(Client.class)) {
                clientMock.when(() -> Client.create(Mockito.any())).thenReturn(client);
                ClientResponse response = Mockito.mock(ClientResponse.class);
                Mockito.when(client.resource(Mockito.anyString())).thenReturn(webResource);
                Mockito.when(webResource.accept(MediaType.APPLICATION_JSON_TYPE)).thenReturn(webResourceBuilder);
                Mockito.when(webResourceBuilder.type(MediaType.APPLICATION_JSON_TYPE)).thenReturn(webResourceBuilder);
                Mockito.when(webResourceBuilder.post(String.class, "{}")).thenThrow(new UniformInterfaceException("Create failed", response, false));

                Assertions.assertThrows(Exception.class, () -> {
                    kmsKeyMgr.createKey(TEST_REPO_NAME, inputKey);
                });
            }
        }
    }

    @Test
    public void testGetKey_Success() throws Exception {
        VXKmsKey resultKey = createMockVXKmsKey();
        RangerService rangerService = createMockRangerService();
        String jsonResponse = JsonUtils.objectToJson(resultKey);

        try (MockedStatic<ContextUtil> contextUtilMock = Mockito.mockStatic(ContextUtil.class);
                MockedStatic<StringUtil> stringUtilMock = Mockito.mockStatic(StringUtil.class);
                MockedStatic<JsonUtils> jsonUtilsMock = Mockito.mockStatic(JsonUtils.class);
                MockedStatic<PropertiesUtil> propertiesUtilMock = Mockito.mockStatic(PropertiesUtil.class)) {
            contextUtilMock.when(ContextUtil::getCurrentUserLoginId).thenReturn(TEST_USERNAME);
            stringUtilMock.when(() -> StringUtil.getUTFEncodedString(TEST_USERNAME)).thenReturn(TEST_USERNAME);
            jsonUtilsMock.when(() -> JsonUtils.jsonToObject(jsonResponse, VXKmsKey.class)).thenReturn(resultKey);
            propertiesUtilMock.when(() -> PropertiesUtil.getProperty("hadoop.security.authentication", "simple")).thenReturn("simple");

            Mockito.when(svcStore.getServiceByName(TEST_REPO_NAME)).thenReturn(rangerService);

            // Mock client and web resource
            try (MockedStatic<Client> clientMock = Mockito.mockStatic(Client.class)) {
                clientMock.when(() -> Client.create(Mockito.any())).thenReturn(client);
                Mockito.when(client.resource(Mockito.anyString())).thenReturn(webResource);
                Mockito.when(webResource.accept(MediaType.APPLICATION_JSON_TYPE)).thenReturn(webResourceBuilder);
                Mockito.when(webResourceBuilder.type(MediaType.APPLICATION_JSON_TYPE)).thenReturn(webResourceBuilder);
                Mockito.when(webResourceBuilder.get(String.class)).thenReturn(jsonResponse);

                VXKmsKey result = kmsKeyMgr.getKey(TEST_REPO_NAME, TEST_KEY_NAME);

                Assertions.assertNotNull(result);
                Assertions.assertEquals(TEST_KEY_NAME, result.getName());
            }
        }
    }

    @Test
    public void testGetKey_WithException() throws Exception {
        RangerService rangerService = createMockRangerService();

        try (MockedStatic<ContextUtil> contextUtilMock = Mockito.mockStatic(ContextUtil.class);
                MockedStatic<StringUtil> stringUtilMock = Mockito.mockStatic(StringUtil.class);
                MockedStatic<PropertiesUtil> propertiesUtilMock = Mockito.mockStatic(PropertiesUtil.class)) {
            contextUtilMock.when(ContextUtil::getCurrentUserLoginId).thenReturn(TEST_USERNAME);
            stringUtilMock.when(() -> StringUtil.getUTFEncodedString(TEST_USERNAME)).thenReturn(TEST_USERNAME);
            propertiesUtilMock.when(() -> PropertiesUtil.getProperty("hadoop.security.authentication", "simple")).thenReturn("simple");

            Mockito.when(svcStore.getServiceByName(TEST_REPO_NAME)).thenReturn(rangerService);

            // Mock client and web resource to throw exception
            try (MockedStatic<Client> clientMock = Mockito.mockStatic(Client.class)) {
                clientMock.when(() -> Client.create(Mockito.any())).thenReturn(client);
                ClientResponse response = Mockito.mock(ClientResponse.class);
                Mockito.when(client.resource(Mockito.anyString())).thenReturn(webResource);
                Mockito.when(webResource.accept(MediaType.APPLICATION_JSON_TYPE)).thenReturn(webResourceBuilder);
                Mockito.when(webResourceBuilder.type(MediaType.APPLICATION_JSON_TYPE)).thenReturn(webResourceBuilder);
                Mockito.when(webResourceBuilder.get(String.class)).thenThrow(new UniformInterfaceException("Get failed", response, false));

                Assertions.assertThrows(Exception.class, () -> {
                    kmsKeyMgr.getKey(TEST_REPO_NAME, TEST_KEY_NAME);
                });
            }
        }
    }

    @Test
    public void testGetKey_ReturnsNull() throws Exception {
        try (MockedStatic<ContextUtil> contextUtilMock = Mockito.mockStatic(ContextUtil.class);
                MockedStatic<StringUtil> stringUtilMock = Mockito.mockStatic(StringUtil.class);
                MockedStatic<PropertiesUtil> propertiesUtilMock = Mockito.mockStatic(PropertiesUtil.class)) {
            contextUtilMock.when(ContextUtil::getCurrentUserLoginId).thenReturn(TEST_USERNAME);
            stringUtilMock.when(() -> StringUtil.getUTFEncodedString(TEST_USERNAME)).thenReturn(TEST_USERNAME);
            propertiesUtilMock.when(() -> PropertiesUtil.getProperty("hadoop.security.authentication", "simple")).thenReturn("simple");

            Mockito.when(svcStore.getServiceByName(TEST_REPO_NAME)).thenThrow(new RuntimeException("Service not found"));

            VXKmsKey result = kmsKeyMgr.getKey(TEST_REPO_NAME, TEST_KEY_NAME);

            Assertions.assertNull(result);
        }
    }

    @Test
    public void testGetKeyFromUri_Success() throws Exception {
        VXKmsKey resultKey = createMockVXKmsKey();
        String jsonResponse = JsonUtils.objectToJson(resultKey);

        try (MockedStatic<ContextUtil> contextUtilMock = Mockito.mockStatic(ContextUtil.class);
                MockedStatic<StringUtil> stringUtilMock = Mockito.mockStatic(StringUtil.class);
                MockedStatic<JsonUtils> jsonUtilsMock = Mockito.mockStatic(JsonUtils.class)) {
            contextUtilMock.when(ContextUtil::getCurrentUserLoginId).thenReturn(TEST_USERNAME);
            stringUtilMock.when(() -> StringUtil.getUTFEncodedString(TEST_USERNAME)).thenReturn(TEST_USERNAME);
            jsonUtilsMock.when(() -> JsonUtils.jsonToObject(Mockito.anyString(), Mockito.eq(VXKmsKey.class))).thenReturn(resultKey);

            // Mock client and web resource
            try (MockedStatic<Client> clientMock = Mockito.mockStatic(Client.class)) {
                clientMock.when(() -> Client.create(Mockito.any())).thenReturn(client);
                Mockito.when(client.resource(Mockito.anyString())).thenReturn(webResource);
                Mockito.when(webResource.accept(MediaType.APPLICATION_JSON_TYPE)).thenReturn(webResourceBuilder);
                Mockito.when(webResourceBuilder.type(MediaType.APPLICATION_JSON_TYPE)).thenReturn(webResourceBuilder);
                Mockito.when(webResourceBuilder.get(String.class)).thenReturn(jsonResponse);

                VXKmsKey result = kmsKeyMgr.getKeyFromUri(TEST_PROVIDER_URL, TEST_KEY_NAME, false, TEST_REPO_NAME);

                Assertions.assertNotNull(result);
                Assertions.assertEquals(TEST_KEY_NAME, result.getName());
            }
        }
    }

    @Test
    public void testGetKeyFromUri_WithKerberos() throws Exception {
        VXKmsKey resultKey = createMockVXKmsKey();
        RangerService rangerService = createMockRangerService();
        String jsonResponse = JsonUtils.objectToJson(resultKey);
        Subject mockSubject = new Subject();

        try (MockedStatic<ContextUtil> contextUtilMock = Mockito.mockStatic(ContextUtil.class);
                MockedStatic<StringUtil> stringUtilMock = Mockito.mockStatic(StringUtil.class);
                MockedStatic<JsonUtils> jsonUtilsMock = Mockito.mockStatic(JsonUtils.class);
                MockedStatic<PropertiesUtil> propertiesUtilMock = Mockito.mockStatic(PropertiesUtil.class);
                MockedStatic<SecureClientLogin> secureClientLoginMock = Mockito.mockStatic(SecureClientLogin.class);
                MockedStatic<Subject> subjectMock = Mockito.mockStatic(Subject.class);
                MockedStatic<KerberosName> kerberosNameMock = Mockito.mockStatic(KerberosName.class);
                MockedStatic<PasswordUtils> passwordUtilsMock = Mockito.mockStatic(PasswordUtils.class)) {
            contextUtilMock.when(ContextUtil::getCurrentUserLoginId).thenReturn(TEST_USERNAME);
            stringUtilMock.when(() -> StringUtil.getUTFEncodedString(TEST_USERNAME)).thenReturn(TEST_USERNAME);
            jsonUtilsMock.when(() -> JsonUtils.jsonToObject(jsonResponse, VXKmsKey.class)).thenReturn(resultKey);

            setupKerberosMocks(propertiesUtilMock, secureClientLoginMock, mockSubject);
            kerberosNameMock.when(() -> KerberosName.setRules("DEFAULT")).then(invocation -> null);
            passwordUtilsMock.when(() -> PasswordUtils.decryptPassword("encryptedPassword")).thenReturn(TEST_PASSWORD);
            subjectMock.when(() -> Subject.doAs(Mockito.eq(mockSubject), Mockito.any(PrivilegedAction.class))).thenReturn(jsonResponse);

            XXService xxService = new XXService();
            xxService.setId(1L);
            XXServiceConfigMap xxServiceConfigMap = new XXServiceConfigMap();
            xxServiceConfigMap.setConfigvalue("encryptedPassword");

            Mockito.when(svcStore.getServiceByName(TEST_REPO_NAME)).thenReturn(rangerService);
            Mockito.when(rangerDaoManagerBase.getXXService()).thenReturn(xxServiceDao);
            Mockito.when(xxServiceDao.findByName(TEST_REPO_NAME)).thenReturn(xxService);
            Mockito.when(rangerDaoManagerBase.getXXServiceConfigMap()).thenReturn(xxServiceConfigMapDao);
            Mockito.when(xxServiceConfigMapDao.findByServiceAndConfigKey(1L, "password")).thenReturn(xxServiceConfigMap);

            // Mock client and web resource
            try (MockedStatic<Client> clientMock = Mockito.mockStatic(Client.class)) {
                clientMock.when(() -> Client.create(Mockito.any())).thenReturn(client);
                Mockito.when(client.resource(Mockito.anyString())).thenReturn(webResource);

                VXKmsKey result = kmsKeyMgr.getKeyFromUri(TEST_PROVIDER_URL, TEST_KEY_NAME, true, TEST_REPO_NAME);

                Assertions.assertNotNull(result);
                Assertions.assertEquals(TEST_KEY_NAME, result.getName());
            }
        }
    }

    @Test
    public void testGetFilteredKeyList_Success() throws Exception {
        VXKmsKeyList inputList = new VXKmsKeyList();
        List<VXKmsKey> keys = new ArrayList<>();
        VXKmsKey key1 = new VXKmsKey();
        key1.setName("testKey1");
        VXKmsKey key2 = new VXKmsKey();
        key2.setName("testKey2");
        keys.add(key1);
        keys.add(key2);
        inputList.setVXKeys(keys);

        Mockito.when(request.getParameter(KeySearchFilter.KEY_NAME)).thenReturn("test");
        Mockito.when(request.getParameter(KeySearchFilter.START_INDEX)).thenReturn("0");
        Mockito.when(request.getParameter(KeySearchFilter.PAGE_SIZE)).thenReturn("10");
        Mockito.when(request.getParameter("getCount")).thenReturn("true");
        Mockito.when(request.getParameter(KeySearchFilter.SORT_BY)).thenReturn("name");
        Mockito.when(request.getParameter("sortType")).thenReturn("asc");
        Mockito.when(request.getParameterMap()).thenReturn(new HashMap<>());
        Mockito.when(restErrorUtil.parseInt(Mockito.eq("0"), Mockito.eq(0), Mockito.eq("Invalid value for parameter startIndex"),
                Mockito.eq(MessageEnums.INVALID_INPUT_DATA), Mockito.isNull(), Mockito.eq(KeySearchFilter.START_INDEX))).thenReturn(0);
        Mockito.when(restErrorUtil.parseInt(Mockito.eq("10"), Mockito.eq(10), Mockito.eq("Invalid value for parameter pageSize"),
                Mockito.eq(MessageEnums.INVALID_INPUT_DATA), Mockito.isNull(), Mockito.eq(KeySearchFilter.PAGE_SIZE))).thenReturn(10);
        Mockito.when(restErrorUtil.parseBoolean(Mockito.eq("true"), Mockito.eq(true))).thenReturn(true);
        Mockito.when(restErrorUtil.validateString(Mockito.eq("name"), Mockito.anyString(), Mockito.eq("Invalid value for parameter sortBy"),
                Mockito.eq(MessageEnums.INVALID_INPUT_DATA), Mockito.isNull(), Mockito.eq(KeySearchFilter.SORT_BY))).thenReturn("name");
        Mockito.when(restErrorUtil.validateString(Mockito.eq("asc"), Mockito.anyString(), Mockito.eq("Invalid value for parameter sortType"),
                Mockito.eq(MessageEnums.INVALID_INPUT_DATA), Mockito.isNull(), Mockito.eq("sortType"))).thenReturn("asc");
        Mockito.when(configUtil.getDefaultMaxRows()).thenReturn(10);

        VXKmsKeyList result = kmsKeyMgr.getFilteredKeyList(request, inputList);

        Assertions.assertNotNull(result);
        Assertions.assertNotNull(result.getVXKeys());
    }

    @Test
    public void testGetFilteredKeyList_NullRequest() {
        VXKmsKeyList inputList = new VXKmsKeyList();
        List<VXKmsKey> keys = new ArrayList<>();
        inputList.setVXKeys(keys);

        VXKmsKeyList result = kmsKeyMgr.getFilteredKeyList(null, inputList);

        Assertions.assertNotNull(result);
        Assertions.assertEquals(inputList, result);
    }

    @Test
    public void testCreateProvider_SingleHost() throws Exception {
        Method createProviderMethod = KmsKeyMgr.class.getDeclaredMethod("createProvider", String.class, String.class);
        createProviderMethod.setAccessible(true);

        String[] result = (String[]) createProviderMethod.invoke(kmsKeyMgr, "kms://http@localhost:9292/kms", "kms://http@localhost:9292/kms");

        Assertions.assertNotNull(result);
        Assertions.assertEquals(1, result.length);
        Assertions.assertTrue(result[0].contains("localhost:9292"));
    }

    @Test
    public void testCreateProvider_MultipleHosts() throws Exception {
        Method createProviderMethod = KmsKeyMgr.class.getDeclaredMethod("createProvider", String.class, String.class);
        createProviderMethod.setAccessible(true);

        String[] result = (String[]) createProviderMethod.invoke(kmsKeyMgr, "kms://http@host1;host2:9292/kms", "kms://http@host1;host2:9292/kms");

        Assertions.assertNotNull(result);
        Assertions.assertEquals(2, result.length);
    }

    @Test
    public void testCreateProvider_InvalidURI() throws Exception {
        Method createProviderMethod = KmsKeyMgr.class.getDeclaredMethod("createProvider", String.class, String.class);
        createProviderMethod.setAccessible(true);

        Assertions.assertThrows(InvocationTargetException.class, () -> {
            createProviderMethod.invoke(kmsKeyMgr, "invalid://uri", "invalid://uri");
        });
    }

    @Test
    public void testCheckKerberos_Simple() throws Exception {
        try (MockedStatic<PropertiesUtil> propertiesUtilMock = Mockito.mockStatic(PropertiesUtil.class)) {
            propertiesUtilMock.when(() -> PropertiesUtil.getProperty("hadoop.security.authentication", "simple")).thenReturn("simple");

            Method checkKerberosMethod = KmsKeyMgr.class.getDeclaredMethod("checkKerberos");
            checkKerberosMethod.setAccessible(true);

            boolean result = (boolean) checkKerberosMethod.invoke(kmsKeyMgr);

            Assertions.assertFalse(result);
        }
    }

    @Test
    public void testCheckKerberos_Kerberos() throws Exception {
        try (MockedStatic<PropertiesUtil> propertiesUtilMock = Mockito.mockStatic(PropertiesUtil.class)) {
            propertiesUtilMock.when(() -> PropertiesUtil.getProperty("hadoop.security.authentication", "simple")).thenReturn("kerberos");

            Method checkKerberosMethod = KmsKeyMgr.class.getDeclaredMethod("checkKerberos");
            checkKerberosMethod.setAccessible(true);

            boolean result = (boolean) checkKerberosMethod.invoke(kmsKeyMgr);

            Assertions.assertTrue(result);
        }
    }

    @Test
    public void testGetClient() throws Exception {
        Method getClientMethod = KmsKeyMgr.class.getDeclaredMethod("getClient");
        getClientMethod.setAccessible(true);

        Client result = (Client) getClientMethod.invoke(kmsKeyMgr);

        Assertions.assertNotNull(result);
    }

    @Test
    public void testGetKMSURL_ServiceNotFound() throws Exception {
        Mockito.when(svcStore.getServiceByName(TEST_REPO_NAME)).thenReturn(null);

        Method getKMSURLMethod = KmsKeyMgr.class.getDeclaredMethod("getKMSURL", String.class);
        getKMSURLMethod.setAccessible(true);

        InvocationTargetException exception = Assertions.assertThrows(InvocationTargetException.class, () -> {
            getKMSURLMethod.invoke(kmsKeyMgr, TEST_REPO_NAME);
        });

        Assertions.assertTrue(exception.getCause().getMessage().contains("getServiceByName(" + TEST_REPO_NAME + ") failed"));
    }

    @Test
    public void testGetKMSURL_Success() throws Exception {
        RangerService rangerService = createMockRangerService();
        Mockito.when(svcStore.getServiceByName(TEST_REPO_NAME)).thenReturn(rangerService);

        Method getKMSURLMethod = KmsKeyMgr.class.getDeclaredMethod("getKMSURL", String.class);
        getKMSURLMethod.setAccessible(true);

        String[] result = (String[]) getKMSURLMethod.invoke(kmsKeyMgr, TEST_REPO_NAME);

        Assertions.assertNotNull(result);
        Assertions.assertTrue(result.length > 0);
    }

    @Test
    public void testGetSubjectForKerberos_WithKeytab() throws Exception {
        RangerService rangerService = createMockRangerService();
        Subject mockSubject = new Subject();

        try (MockedStatic<PropertiesUtil> propertiesUtilMock = Mockito.mockStatic(PropertiesUtil.class);
                MockedStatic<SecureClientLogin> secureClientLoginMock = Mockito.mockStatic(SecureClientLogin.class);
                MockedStatic<KerberosName> kerberosNameMock = Mockito.mockStatic(KerberosName.class);
                MockedStatic<PasswordUtils> passwordUtilsMock = Mockito.mockStatic(PasswordUtils.class)) {
            setupKerberosMocks(propertiesUtilMock, secureClientLoginMock, mockSubject);
            kerberosNameMock.when(() -> KerberosName.setRules("DEFAULT")).then(invocation -> null);
            passwordUtilsMock.when(() -> PasswordUtils.decryptPassword("encryptedPassword")).thenReturn(TEST_PASSWORD);

            XXService xxService = new XXService();
            xxService.setId(1L);
            XXServiceConfigMap xxServiceConfigMap = new XXServiceConfigMap();
            xxServiceConfigMap.setConfigvalue("encryptedPassword");

            Mockito.when(svcStore.getServiceByName(TEST_REPO_NAME)).thenReturn(rangerService);
            Mockito.when(rangerDaoManagerBase.getXXService()).thenReturn(xxServiceDao);
            Mockito.when(xxServiceDao.findByName(TEST_REPO_NAME)).thenReturn(xxService);
            Mockito.when(rangerDaoManagerBase.getXXServiceConfigMap()).thenReturn(xxServiceConfigMapDao);
            Mockito.when(xxServiceConfigMapDao.findByServiceAndConfigKey(1L, "password")).thenReturn(xxServiceConfigMap);

            Method getSubjectForKerberosMethod = KmsKeyMgr.class.getDeclaredMethod("getSubjectForKerberos", String.class);
            getSubjectForKerberosMethod.setAccessible(true);

            Subject result = (Subject) getSubjectForKerberosMethod.invoke(kmsKeyMgr, TEST_REPO_NAME);

            Assertions.assertNotNull(result);
            Assertions.assertEquals(mockSubject, result);
        }
    }

    @Test
    public void testGetSubjectForKerberos_WithPassword() throws Exception {
        RangerService rangerService = createMockRangerService();
        Subject mockSubject = new Subject();
        XXService xxService = new XXService();
        xxService.setId(1L);
        XXServiceConfigMap xxServiceConfigMap = new XXServiceConfigMap();
        xxServiceConfigMap.setConfigvalue("encryptedPassword");

        try (MockedStatic<PropertiesUtil> propertiesUtilMock = Mockito.mockStatic(PropertiesUtil.class);
                MockedStatic<SecureClientLogin> secureClientLoginMock = Mockito.mockStatic(SecureClientLogin.class);
                MockedStatic<KerberosName> kerberosNameMock = Mockito.mockStatic(KerberosName.class);
                MockedStatic<PasswordUtils> passwordUtilsMock = Mockito.mockStatic(PasswordUtils.class)) {
            setupKerberosMocks(propertiesUtilMock, secureClientLoginMock, mockSubject);
            kerberosNameMock.when(() -> KerberosName.setRules("DEFAULT")).then(invocation -> null);
            passwordUtilsMock.when(() -> PasswordUtils.decryptPassword("encryptedPassword")).thenReturn(TEST_PASSWORD);

            // Mock keytab not existing
            secureClientLoginMock.when(() -> SecureClientLogin.isKerberosCredentialExists(Mockito.anyString(), Mockito.anyString())).thenReturn(false);
            secureClientLoginMock.when(() -> SecureClientLogin.loginUserWithPassword(TEST_USERNAME, TEST_PASSWORD)).thenReturn(mockSubject);

            Mockito.when(svcStore.getServiceByName(TEST_REPO_NAME)).thenReturn(rangerService);
            Mockito.when(rangerDaoManagerBase.getXXService()).thenReturn(xxServiceDao);
            Mockito.when(xxServiceDao.findByName(TEST_REPO_NAME)).thenReturn(xxService);
            Mockito.when(rangerDaoManagerBase.getXXServiceConfigMap()).thenReturn(xxServiceConfigMapDao);
            Mockito.when(xxServiceConfigMapDao.findByServiceAndConfigKey(1L, "password")).thenReturn(xxServiceConfigMap);

            Method getSubjectForKerberosMethod = KmsKeyMgr.class.getDeclaredMethod("getSubjectForKerberos", String.class);
            getSubjectForKerberosMethod.setAccessible(true);

            Subject result = (Subject) getSubjectForKerberosMethod.invoke(kmsKeyMgr, TEST_REPO_NAME);

            Assertions.assertNotNull(result);
            Assertions.assertEquals(mockSubject, result);
        }
    }

    @Test
    public void testGetKMSPassword() throws Exception {
        XXService xxService = new XXService();
        xxService.setId(1L);
        XXServiceConfigMap xxServiceConfigMap = new XXServiceConfigMap();
        xxServiceConfigMap.setConfigvalue("encryptedPassword");

        try (MockedStatic<PasswordUtils> passwordUtilsMock = Mockito.mockStatic(PasswordUtils.class)) {
            passwordUtilsMock.when(() -> PasswordUtils.decryptPassword("encryptedPassword")).thenReturn(TEST_PASSWORD);

            Mockito.when(rangerDaoManagerBase.getXXService()).thenReturn(xxServiceDao);
            Mockito.when(xxServiceDao.findByName(TEST_REPO_NAME)).thenReturn(xxService);
            Mockito.when(rangerDaoManagerBase.getXXServiceConfigMap()).thenReturn(xxServiceConfigMapDao);
            Mockito.when(xxServiceConfigMapDao.findByServiceAndConfigKey(1L, "password")).thenReturn(xxServiceConfigMap);

            Method getKMSPasswordMethod = KmsKeyMgr.class.getDeclaredMethod("getKMSPassword", String.class);
            getKMSPasswordMethod.setAccessible(true);

            String result = (String) getKMSPasswordMethod.invoke(kmsKeyMgr, TEST_REPO_NAME);

            Assertions.assertEquals(TEST_PASSWORD, result);
        }
    }

    @Test
    public void testGetKMSUserName() throws Exception {
        RangerService rangerService = createMockRangerService();
        Mockito.when(svcStore.getServiceByName(TEST_REPO_NAME)).thenReturn(rangerService);

        Method getKMSUserNameMethod = KmsKeyMgr.class.getDeclaredMethod("getKMSUserName", String.class);
        getKMSUserNameMethod.setAccessible(true);

        String result = (String) getKMSUserNameMethod.invoke(kmsKeyMgr, TEST_REPO_NAME);

        Assertions.assertEquals(TEST_USERNAME, result);
    }

    @Test
    public void testGetPredicate_Null() throws Exception {
        Method getPredicateMethod = KmsKeyMgr.class.getDeclaredMethod("getPredicate", KeySearchFilter.class);
        getPredicateMethod.setAccessible(true);

        Predicate result = (Predicate) getPredicateMethod.invoke(kmsKeyMgr, (KeySearchFilter) null);

        Assertions.assertNull(result);
    }

    @Test
    public void testGetPredicate_EmptyFilter() throws Exception {
        KeySearchFilter filter = new KeySearchFilter();

        Method getPredicateMethod = KmsKeyMgr.class.getDeclaredMethod("getPredicate", KeySearchFilter.class);
        getPredicateMethod.setAccessible(true);

        Predicate result = (Predicate) getPredicateMethod.invoke(kmsKeyMgr, filter);

        Assertions.assertNull(result);
    }

    @Test
    public void testAddPredicateForKeyName_EmptyName() throws Exception {
        List<Predicate> predicates = new ArrayList<>();

        Method addPredicateForKeyNameMethod = KmsKeyMgr.class.getDeclaredMethod("addPredicateForKeyName", String.class, List.class);
        addPredicateForKeyNameMethod.setAccessible(true);

        Predicate result = (Predicate) addPredicateForKeyNameMethod.invoke(kmsKeyMgr, "", predicates);

        Assertions.assertNull(result);
        Assertions.assertTrue(predicates.isEmpty());
    }

    @Test
    public void testAddPredicateForKeyName_WithName() throws Exception {
        List<Predicate> predicates = new ArrayList<>();

        Method addPredicateForKeyNameMethod = KmsKeyMgr.class.getDeclaredMethod("addPredicateForKeyName", String.class, List.class);
        addPredicateForKeyNameMethod.setAccessible(true);

        Predicate result = (Predicate) addPredicateForKeyNameMethod.invoke(kmsKeyMgr, "test", predicates);

        Assertions.assertNotNull(result);
        Assertions.assertEquals(1, predicates.size());

        // Test predicate evaluation
        VXKmsKey key = new VXKmsKey();
        key.setName("testKey");
        Assertions.assertTrue(result.evaluate(key));

        key.setName("otherKey");
        Assertions.assertFalse(result.evaluate(key));

        key.setName(null);
        Assertions.assertTrue(result.evaluate(key));

        Assertions.assertTrue(result.evaluate("notAKey"));
        Assertions.assertFalse(result.evaluate(null));
    }

    @Test
    public void testGetKeySearchFilter_NullRequest() throws Exception {
        List<SortField> sortFields = new ArrayList<>();

        Method getKeySearchFilterMethod = KmsKeyMgr.class.getDeclaredMethod("getKeySearchFilter", HttpServletRequest.class, List.class);
        getKeySearchFilterMethod.setAccessible(true);

        KeySearchFilter result = (KeySearchFilter) getKeySearchFilterMethod.invoke(kmsKeyMgr, null, sortFields);

        Assertions.assertNull(result);
    }

    @Test
    public void testExtractCommonCriteriasForFilter() throws Exception {
        KeySearchFilter filter = new KeySearchFilter();
        List<SortField> sortFields = new ArrayList<>();
        sortFields.add(new SortField("name", "name"));

        Mockito.when(request.getParameter(KeySearchFilter.START_INDEX)).thenReturn("0");
        Mockito.when(request.getParameter(KeySearchFilter.PAGE_SIZE)).thenReturn("10");
        Mockito.when(request.getParameter("getCount")).thenReturn("true");
        Mockito.when(request.getParameter(KeySearchFilter.SORT_BY)).thenReturn("name");
        Mockito.when(request.getParameter("sortType")).thenReturn("asc");

        Mockito.when(restErrorUtil.parseInt(Mockito.anyString(), Mockito.anyInt(), Mockito.anyString(),
                Mockito.any(MessageEnums.class), Mockito.any(), Mockito.anyString())).thenReturn(0, 10);
        Mockito.when(restErrorUtil.parseBoolean(Mockito.anyString(), Mockito.anyBoolean())).thenReturn(true);
        Mockito.when(restErrorUtil.validateString(Mockito.anyString(), Mockito.anyString(), Mockito.anyString(),
                Mockito.any(MessageEnums.class), Mockito.any(), Mockito.anyString())).thenReturn("name", "asc");
        Mockito.when(configUtil.getDefaultMaxRows()).thenReturn(10);

        Method extractCommonCriteriasForFilterMethod = KmsKeyMgr.class.getDeclaredMethod("extractCommonCriteriasForFilter", HttpServletRequest.class, KeySearchFilter.class, List.class);
        extractCommonCriteriasForFilterMethod.setAccessible(true);

        KeySearchFilter result = (KeySearchFilter) extractCommonCriteriasForFilterMethod.invoke(kmsKeyMgr, request, filter, sortFields);

        Assertions.assertNotNull(result);
        Assertions.assertEquals(0, result.getStartIndex());
        Assertions.assertEquals(10, result.getMaxRows());
        Assertions.assertEquals("name", result.getSortBy());
        Assertions.assertEquals("asc", result.getSortType());
    }

    @Test
    public void testSearchKeys_NullRequest() throws Exception {
        VXKmsKeyList result = kmsKeyMgr.searchKeys(null, TEST_REPO_NAME);

        Assertions.assertNotNull(result);
        Assertions.assertNotNull(result.getVXKeys());
        Assertions.assertTrue(result.getVXKeys().isEmpty());
    }

    @Test
    public void testSearchKeys_EmptyKeyList() throws Exception {
        RangerService rangerService = createMockRangerService();
        String jsonResponse = "[]";  // Empty array

        try (MockedStatic<ContextUtil> contextUtilMock = Mockito.mockStatic(ContextUtil.class);
                MockedStatic<StringUtil> stringUtilMock = Mockito.mockStatic(StringUtil.class);
                MockedStatic<JsonUtils> jsonUtilsMock = Mockito.mockStatic(JsonUtils.class);
                MockedStatic<PropertiesUtil> propertiesUtilMock = Mockito.mockStatic(PropertiesUtil.class)) {
            contextUtilMock.when(ContextUtil::getCurrentUserLoginId).thenReturn(TEST_USERNAME);
            stringUtilMock.when(() -> StringUtil.getUTFEncodedString(TEST_USERNAME)).thenReturn(TEST_USERNAME);
            jsonUtilsMock.when(() -> JsonUtils.jsonToListString(jsonResponse)).thenReturn(Collections.emptyList());
            propertiesUtilMock.when(() -> PropertiesUtil.getProperty("hadoop.security.authentication", "simple")).thenReturn("simple");

            Mockito.when(request.getParameter(KeySearchFilter.KEY_NAME)).thenReturn(null);
            Mockito.when(request.getParameter(KeySearchFilter.START_INDEX)).thenReturn(null);
            Mockito.when(request.getParameter(KeySearchFilter.PAGE_SIZE)).thenReturn(null);
            Mockito.when(request.getParameter("getCount")).thenReturn(null);
            Mockito.when(request.getParameter(KeySearchFilter.SORT_BY)).thenReturn(null);

            Mockito.when(svcStore.getServiceByName(TEST_REPO_NAME)).thenReturn(rangerService);
            Mockito.when(configUtil.getDefaultMaxRows()).thenReturn(10);
            Mockito.when(restErrorUtil.parseInt(Mockito.isNull(), Mockito.eq(0), Mockito.eq("Invalid value for parameter startIndex"),
                    Mockito.eq(MessageEnums.INVALID_INPUT_DATA), Mockito.isNull(), Mockito.eq(KeySearchFilter.START_INDEX))).thenReturn(0);
            Mockito.when(restErrorUtil.parseInt(Mockito.isNull(), Mockito.eq(10), Mockito.eq("Invalid value for parameter pageSize"),
                    Mockito.eq(MessageEnums.INVALID_INPUT_DATA), Mockito.isNull(), Mockito.eq(KeySearchFilter.PAGE_SIZE))).thenReturn(10);
            Mockito.when(restErrorUtil.parseBoolean(Mockito.isNull(), Mockito.eq(true))).thenReturn(true);
            Mockito.when(restErrorUtil.validateString(Mockito.isNull(), Mockito.anyString(), Mockito.eq("Invalid value for parameter sortBy"),
                    Mockito.eq(MessageEnums.INVALID_INPUT_DATA), Mockito.isNull(), Mockito.eq(KeySearchFilter.SORT_BY))).thenReturn(null);

            try (MockedStatic<Client> clientMock = Mockito.mockStatic(Client.class)) {
                clientMock.when(() -> Client.create(Mockito.any())).thenReturn(client);
                Mockito.when(client.resource(Mockito.anyString())).thenReturn(webResource);
                Mockito.when(webResource.accept(MediaType.APPLICATION_JSON_TYPE)).thenReturn(webResourceBuilder);
                Mockito.when(webResourceBuilder.type(MediaType.APPLICATION_JSON_TYPE)).thenReturn(webResourceBuilder);
                Mockito.when(webResourceBuilder.get(String.class)).thenReturn(jsonResponse);

                VXKmsKeyList result = kmsKeyMgr.searchKeys(request, TEST_REPO_NAME);

                Assertions.assertNotNull(result);
                Assertions.assertNotNull(result.getVXKeys());
                Assertions.assertTrue(result.getVXKeys().isEmpty());
            }
        }
    }

    @Test
    public void testRolloverKey_NullProviders() throws Exception {
        VXKmsKey inputKey = createMockVXKmsKey();

        try (MockedStatic<ContextUtil> contextUtilMock = Mockito.mockStatic(ContextUtil.class);
                MockedStatic<StringUtil> stringUtilMock = Mockito.mockStatic(StringUtil.class);
                MockedStatic<PropertiesUtil> propertiesUtilMock = Mockito.mockStatic(PropertiesUtil.class)) {
            contextUtilMock.when(ContextUtil::getCurrentUserLoginId).thenReturn(TEST_USERNAME);
            stringUtilMock.when(() -> StringUtil.getUTFEncodedString(TEST_USERNAME)).thenReturn(TEST_USERNAME);
            propertiesUtilMock.when(() -> PropertiesUtil.getProperty("hadoop.security.authentication", "simple")).thenReturn("simple");

            Mockito.when(svcStore.getServiceByName(TEST_REPO_NAME)).thenReturn(null);

            VXKmsKey result = kmsKeyMgr.rolloverKey(TEST_REPO_NAME, inputKey);

            Assertions.assertNull(result);
            Mockito.verify(rangerBizUtil).blockAuditorRoleUser();
        }
    }

    @Test
    public void testCreateKey_NullProviders() throws Exception {
        VXKmsKey inputKey = createMockVXKmsKey();

        try (MockedStatic<ContextUtil> contextUtilMock = Mockito.mockStatic(ContextUtil.class);
                MockedStatic<StringUtil> stringUtilMock = Mockito.mockStatic(StringUtil.class);
                MockedStatic<PropertiesUtil> propertiesUtilMock = Mockito.mockStatic(PropertiesUtil.class)) {
            contextUtilMock.when(ContextUtil::getCurrentUserLoginId).thenReturn(TEST_USERNAME);
            stringUtilMock.when(() -> StringUtil.getUTFEncodedString(TEST_USERNAME)).thenReturn(TEST_USERNAME);
            propertiesUtilMock.when(() -> PropertiesUtil.getProperty("hadoop.security.authentication", "simple")).thenReturn("simple");

            Mockito.when(svcStore.getServiceByName(TEST_REPO_NAME)).thenReturn(null);

            VXKmsKey result = kmsKeyMgr.createKey(TEST_REPO_NAME, inputKey);

            Assertions.assertNull(result);
            Mockito.verify(rangerBizUtil).blockAuditorRoleUser();
        }
    }

    @Test
    public void testDeleteKey_NullProviders() throws Exception {
        try (MockedStatic<ContextUtil> contextUtilMock = Mockito.mockStatic(ContextUtil.class);
                MockedStatic<StringUtil> stringUtilMock = Mockito.mockStatic(StringUtil.class);
                MockedStatic<PropertiesUtil> propertiesUtilMock = Mockito.mockStatic(PropertiesUtil.class)) {
            contextUtilMock.when(ContextUtil::getCurrentUserLoginId).thenReturn(TEST_USERNAME);
            stringUtilMock.when(() -> StringUtil.getUTFEncodedString(TEST_USERNAME)).thenReturn(TEST_USERNAME);
            propertiesUtilMock.when(() -> PropertiesUtil.getProperty("hadoop.security.authentication", "simple")).thenReturn("simple");

            Mockito.when(svcStore.getServiceByName(TEST_REPO_NAME)).thenReturn(null);

            Assertions.assertDoesNotThrow(() -> {
                kmsKeyMgr.deleteKey(TEST_REPO_NAME, TEST_KEY_NAME);
            });

            Mockito.verify(rangerBizUtil).blockAuditorRoleUser();
        }
    }

    @Test
    public void testGetKey_NullProviders() throws Exception {
        try (MockedStatic<ContextUtil> contextUtilMock = Mockito.mockStatic(ContextUtil.class);
                MockedStatic<StringUtil> stringUtilMock = Mockito.mockStatic(StringUtil.class);
                MockedStatic<PropertiesUtil> propertiesUtilMock = Mockito.mockStatic(PropertiesUtil.class)) {
            contextUtilMock.when(ContextUtil::getCurrentUserLoginId).thenReturn(TEST_USERNAME);
            stringUtilMock.when(() -> StringUtil.getUTFEncodedString(TEST_USERNAME)).thenReturn(TEST_USERNAME);
            propertiesUtilMock.when(() -> PropertiesUtil.getProperty("hadoop.security.authentication", "simple")).thenReturn("simple");

            Mockito.when(svcStore.getServiceByName(TEST_REPO_NAME)).thenReturn(null);

            VXKmsKey result = kmsKeyMgr.getKey(TEST_REPO_NAME, TEST_KEY_NAME);

            Assertions.assertNull(result);
        }
    }

    @Test
    public void testGetKMSPassword_NullService() throws Exception {
        Mockito.when(rangerDaoManagerBase.getXXService()).thenReturn(xxServiceDao);
        Mockito.when(xxServiceDao.findByName(TEST_REPO_NAME)).thenReturn(null);

        Method getKMSPasswordMethod = KmsKeyMgr.class.getDeclaredMethod("getKMSPassword", String.class);
        getKMSPasswordMethod.setAccessible(true);

        Assertions.assertThrows(InvocationTargetException.class, () -> {
            getKMSPasswordMethod.invoke(kmsKeyMgr, TEST_REPO_NAME);
        });
    }

    @Test
    public void testGetKMSPassword_NullConfigMap() throws Exception {
        XXService xxService = new XXService();
        xxService.setId(1L);

        Mockito.when(rangerDaoManagerBase.getXXService()).thenReturn(xxServiceDao);
        Mockito.when(xxServiceDao.findByName(TEST_REPO_NAME)).thenReturn(xxService);
        Mockito.when(rangerDaoManagerBase.getXXServiceConfigMap()).thenReturn(xxServiceConfigMapDao);
        Mockito.when(xxServiceConfigMapDao.findByServiceAndConfigKey(1L, "password")).thenReturn(null);

        Method getKMSPasswordMethod = KmsKeyMgr.class.getDeclaredMethod("getKMSPassword", String.class);
        getKMSPasswordMethod.setAccessible(true);

        Assertions.assertThrows(InvocationTargetException.class, () -> {
            getKMSPasswordMethod.invoke(kmsKeyMgr, TEST_REPO_NAME);
        });
    }

    @Test
    public void testGetKMSUserName_NullService() throws Exception {
        Mockito.when(svcStore.getServiceByName(TEST_REPO_NAME)).thenReturn(null);

        Method getKMSUserNameMethod = KmsKeyMgr.class.getDeclaredMethod("getKMSUserName", String.class);
        getKMSUserNameMethod.setAccessible(true);

        Assertions.assertThrows(InvocationTargetException.class, () -> {
            getKMSUserNameMethod.invoke(kmsKeyMgr, TEST_REPO_NAME);
        });
    }

    @Test
    public void testCreateProvider_EmptyURL() throws Exception {
        Method createProviderMethod = KmsKeyMgr.class.getDeclaredMethod("createProvider", String.class, String.class);
        createProviderMethod.setAccessible(true);

        Assertions.assertThrows(InvocationTargetException.class, () -> {
            createProviderMethod.invoke(kmsKeyMgr, "", "");
        });
    }

    @Test
    public void testCreateProvider_NullURL() throws Exception {
        Method createProviderMethod = KmsKeyMgr.class.getDeclaredMethod("createProvider", String.class, String.class);
        createProviderMethod.setAccessible(true);

        Assertions.assertThrows(InvocationTargetException.class, () -> {
            createProviderMethod.invoke(kmsKeyMgr, null, null);
        });
    }

    @Test
    public void testGetFilteredKeyList_WithFilter() throws Exception {
        VXKmsKeyList inputList = new VXKmsKeyList();
        List<VXKmsKey> keys = new ArrayList<>();
        VXKmsKey key1 = new VXKmsKey();
        key1.setName("matchingKey");
        VXKmsKey key2 = new VXKmsKey();
        key2.setName("nonMatchingKey");
        keys.add(key1);
        keys.add(key2);
        inputList.setVXKeys(keys);

        Mockito.when(request.getParameter(KeySearchFilter.KEY_NAME)).thenReturn("matching");
        Mockito.when(request.getParameter(KeySearchFilter.START_INDEX)).thenReturn("0");
        Mockito.when(request.getParameter(KeySearchFilter.PAGE_SIZE)).thenReturn("10");
        Mockito.when(request.getParameter("getCount")).thenReturn("true");
        Mockito.when(request.getParameter(KeySearchFilter.SORT_BY)).thenReturn("name");
        Mockito.when(request.getParameterMap()).thenReturn(new HashMap<>());

        Mockito.when(restErrorUtil.parseInt(Mockito.eq("0"), Mockito.eq(0), Mockito.eq("Invalid value for parameter startIndex"),
                Mockito.eq(MessageEnums.INVALID_INPUT_DATA), Mockito.isNull(), Mockito.eq(KeySearchFilter.START_INDEX))).thenReturn(0);
        Mockito.when(restErrorUtil.parseInt(Mockito.eq("10"), Mockito.eq(10), Mockito.eq("Invalid value for parameter pageSize"),
                Mockito.eq(MessageEnums.INVALID_INPUT_DATA), Mockito.isNull(), Mockito.eq(KeySearchFilter.PAGE_SIZE))).thenReturn(10);
        Mockito.when(restErrorUtil.parseBoolean(Mockito.eq("true"), Mockito.eq(true))).thenReturn(true);
        Mockito.when(restErrorUtil.validateString(Mockito.eq("name"), Mockito.anyString(), Mockito.eq("Invalid value for parameter sortBy"),
                Mockito.eq(MessageEnums.INVALID_INPUT_DATA), Mockito.isNull(), Mockito.eq(KeySearchFilter.SORT_BY))).thenReturn("name");
        Mockito.when(configUtil.getDefaultMaxRows()).thenReturn(10);

        VXKmsKeyList result = kmsKeyMgr.getFilteredKeyList(request, inputList);

        Assertions.assertNotNull(result);
        Assertions.assertNotNull(result.getVXKeys());
        // The predicate should filter out non-matching keys
        Assertions.assertEquals(1, result.getVXKeys().size());
        Assertions.assertEquals("matchingKey", result.getVXKeys().get(0).getName());
    }

    @Test
    public void testGetFilteredKeyList_EmptyFilter() throws Exception {
        VXKmsKeyList inputList = new VXKmsKeyList();
        List<VXKmsKey> keys = new ArrayList<>();
        VXKmsKey key1 = new VXKmsKey();
        key1.setName("key1");
        keys.add(key1);
        inputList.setVXKeys(keys);

        Mockito.when(request.getParameter(KeySearchFilter.KEY_NAME)).thenReturn("");
        Mockito.when(request.getParameter(KeySearchFilter.START_INDEX)).thenReturn(null);
        Mockito.when(request.getParameter(KeySearchFilter.PAGE_SIZE)).thenReturn(null);
        Mockito.when(request.getParameter("getCount")).thenReturn(null);
        Mockito.when(request.getParameter(KeySearchFilter.SORT_BY)).thenReturn(null);
        Mockito.when(request.getParameterMap()).thenReturn(new HashMap<>());

        Mockito.when(restErrorUtil.parseInt(Mockito.isNull(), Mockito.eq(0), Mockito.eq("Invalid value for parameter startIndex"),
                Mockito.eq(MessageEnums.INVALID_INPUT_DATA), Mockito.isNull(), Mockito.eq(KeySearchFilter.START_INDEX))).thenReturn(0);
        Mockito.when(restErrorUtil.parseInt(Mockito.isNull(), Mockito.eq(10), Mockito.eq("Invalid value for parameter pageSize"),
                Mockito.eq(MessageEnums.INVALID_INPUT_DATA), Mockito.isNull(), Mockito.eq(KeySearchFilter.PAGE_SIZE))).thenReturn(10);
        Mockito.when(restErrorUtil.parseBoolean(Mockito.isNull(), Mockito.eq(true))).thenReturn(true);
        Mockito.when(restErrorUtil.validateString(Mockito.isNull(), Mockito.anyString(), Mockito.eq("Invalid value for parameter sortBy"),
                Mockito.eq(MessageEnums.INVALID_INPUT_DATA), Mockito.isNull(), Mockito.eq(KeySearchFilter.SORT_BY))).thenReturn(null);
        Mockito.when(configUtil.getDefaultMaxRows()).thenReturn(10);

        VXKmsKeyList result = kmsKeyMgr.getFilteredKeyList(request, inputList);

        Assertions.assertNotNull(result);
        Assertions.assertNotNull(result.getVXKeys());
        // No filtering should occur with empty filter
        Assertions.assertEquals(1, result.getVXKeys().size());
    }

    @Test
    public void testSearchKeys_ContinueOnNonUniformException() throws Exception {
        RangerService rangerService = new RangerService();
        rangerService.setName(TEST_REPO_NAME);
        Map<String, String> configs = new HashMap<>();
        configs.put("provider", "kms://http@host1;host2:9292/kms");
        configs.put("username", TEST_USERNAME);
        rangerService.setConfigs(configs);

        String jsonResponse = "[]"; // empty list so details section is skipped

        try (MockedStatic<ContextUtil> contextUtilMock = Mockito.mockStatic(ContextUtil.class);
                MockedStatic<StringUtil> stringUtilMock = Mockito.mockStatic(StringUtil.class);
                MockedStatic<JsonUtils> jsonUtilsMock = Mockito.mockStatic(JsonUtils.class);
                MockedStatic<PropertiesUtil> propertiesUtilMock = Mockito.mockStatic(PropertiesUtil.class);
                MockedStatic<Client> clientMock = Mockito.mockStatic(Client.class)) {
            contextUtilMock.when(ContextUtil::getCurrentUserLoginId).thenReturn(TEST_USERNAME);
            stringUtilMock.when(() -> StringUtil.getUTFEncodedString(TEST_USERNAME)).thenReturn(TEST_USERNAME);
            jsonUtilsMock.when(() -> JsonUtils.jsonToListString(jsonResponse)).thenReturn(Collections.emptyList());
            propertiesUtilMock.when(() -> PropertiesUtil.getProperty("hadoop.security.authentication", "simple")).thenReturn("simple");

            Mockito.when(svcStore.getServiceByName(TEST_REPO_NAME)).thenReturn(rangerService);

            Client localClient = Mockito.mock(Client.class);
            WebResource webResource1 = Mockito.mock(WebResource.class);
            WebResource.Builder builder1 = Mockito.mock(WebResource.Builder.class);
            WebResource webResource2 = Mockito.mock(WebResource.class);
            WebResource.Builder builder2 = Mockito.mock(WebResource.Builder.class);

            clientMock.when(() -> Client.create(Mockito.any())).thenReturn(localClient);
            Mockito.when(localClient.resource(Mockito.anyString())).thenReturn(webResource1, webResource2);

            Mockito.when(webResource1.accept(MediaType.APPLICATION_JSON_TYPE)).thenReturn(builder1);
            Mockito.when(builder1.type(MediaType.APPLICATION_JSON_TYPE)).thenReturn(builder1);
            Mockito.when(builder1.get(String.class)).thenThrow(new RuntimeException("Transient failure"));

            Mockito.when(webResource2.accept(MediaType.APPLICATION_JSON_TYPE)).thenReturn(builder2);
            Mockito.when(builder2.type(MediaType.APPLICATION_JSON_TYPE)).thenReturn(builder2);
            Mockito.when(builder2.get(String.class)).thenReturn(jsonResponse);

            Mockito.when(request.getParameter(KeySearchFilter.KEY_NAME)).thenReturn(null);
            Mockito.when(request.getParameter(KeySearchFilter.START_INDEX)).thenReturn(null);
            Mockito.when(request.getParameter(KeySearchFilter.PAGE_SIZE)).thenReturn(null);
            Mockito.when(request.getParameter("getCount")).thenReturn(null);
            Mockito.when(request.getParameter(KeySearchFilter.SORT_BY)).thenReturn(null);

            VXKmsKeyList result = kmsKeyMgr.searchKeys(request, TEST_REPO_NAME);
            Assertions.assertNotNull(result);
            Assertions.assertNotNull(result.getVXKeys());
            Assertions.assertTrue(result.getVXKeys().isEmpty());
        }
    }

    @Test
    public void testSearchKeys_ThrowsOnUniformInterfaceException() throws Exception {
        RangerService rangerService = createMockRangerService();

        try (MockedStatic<ContextUtil> contextUtilMock = Mockito.mockStatic(ContextUtil.class);
                MockedStatic<StringUtil> stringUtilMock = Mockito.mockStatic(StringUtil.class);
                MockedStatic<PropertiesUtil> propertiesUtilMock = Mockito.mockStatic(PropertiesUtil.class);
                MockedStatic<Client> clientMock = Mockito.mockStatic(Client.class)) {
            contextUtilMock.when(ContextUtil::getCurrentUserLoginId).thenReturn(TEST_USERNAME);
            stringUtilMock.when(() -> StringUtil.getUTFEncodedString(TEST_USERNAME)).thenReturn(TEST_USERNAME);
            propertiesUtilMock.when(() -> PropertiesUtil.getProperty("hadoop.security.authentication", "simple")).thenReturn("simple");

            Mockito.when(svcStore.getServiceByName(TEST_REPO_NAME)).thenReturn(rangerService);

            Client localClient = Mockito.mock(Client.class);
            WebResource localResource = Mockito.mock(WebResource.class);
            WebResource.Builder localBuilder = Mockito.mock(WebResource.Builder.class);
            clientMock.when(() -> Client.create(Mockito.any())).thenReturn(localClient);
            Mockito.when(localClient.resource(Mockito.anyString())).thenReturn(localResource);
            Mockito.when(localResource.accept(MediaType.APPLICATION_JSON_TYPE)).thenReturn(localBuilder);
            Mockito.when(localBuilder.type(MediaType.APPLICATION_JSON_TYPE)).thenReturn(localBuilder);

            ClientResponse response = Mockito.mock(ClientResponse.class);
            Mockito.when(localBuilder.get(String.class)).thenThrow(new UniformInterfaceException("Names fetch failed", response, false));

            Assertions.assertThrows(Exception.class, () -> kmsKeyMgr.searchKeys(request, TEST_REPO_NAME));
        }
    }

    @Test
    public void testDeleteKey_ContinueOnNonUniformException() throws Exception {
        RangerService rangerService = new RangerService();
        rangerService.setName(TEST_REPO_NAME);
        Map<String, String> configs = new HashMap<>();
        configs.put("provider", "kms://http@host1;host2:9292/kms");
        configs.put("username", TEST_USERNAME);
        rangerService.setConfigs(configs);

        try (MockedStatic<ContextUtil> contextUtilMock = Mockito.mockStatic(ContextUtil.class);
                MockedStatic<StringUtil> stringUtilMock = Mockito.mockStatic(StringUtil.class);
                MockedStatic<PropertiesUtil> propertiesUtilMock = Mockito.mockStatic(PropertiesUtil.class);
                MockedStatic<Client> clientMock = Mockito.mockStatic(Client.class)) {
            contextUtilMock.when(ContextUtil::getCurrentUserLoginId).thenReturn(TEST_USERNAME);
            stringUtilMock.when(() -> StringUtil.getUTFEncodedString(TEST_USERNAME)).thenReturn(TEST_USERNAME);
            propertiesUtilMock.when(() -> PropertiesUtil.getProperty("hadoop.security.authentication", "simple")).thenReturn("simple");

            Mockito.when(svcStore.getServiceByName(TEST_REPO_NAME)).thenReturn(rangerService);

            Client localClient = Mockito.mock(Client.class);
            WebResource webResource1 = Mockito.mock(WebResource.class);
            WebResource webResource2 = Mockito.mock(WebResource.class);

            clientMock.when(() -> Client.create(Mockito.any())).thenReturn(localClient);
            Mockito.when(localClient.resource(Mockito.anyString())).thenReturn(webResource1, webResource2);

            Mockito.when(webResource1.delete(String.class)).thenThrow(new RuntimeException("first host down"));
            Mockito.when(webResource2.delete(String.class)).thenReturn("Success");

            Assertions.assertDoesNotThrow(() -> kmsKeyMgr.deleteKey(TEST_REPO_NAME, TEST_KEY_NAME));
        }
    }

    @Test
    public void testGetKeyFromUri_ThrowsUniformInterfaceException() throws Exception {
        try (MockedStatic<ContextUtil> contextUtilMock = Mockito.mockStatic(ContextUtil.class);
                MockedStatic<StringUtil> stringUtilMock = Mockito.mockStatic(StringUtil.class);
                MockedStatic<Client> clientMock = Mockito.mockStatic(Client.class)) {
            contextUtilMock.when(ContextUtil::getCurrentUserLoginId).thenReturn(TEST_USERNAME);
            stringUtilMock.when(() -> StringUtil.getUTFEncodedString(TEST_USERNAME)).thenReturn(TEST_USERNAME);

            Client localClient = Mockito.mock(Client.class);
            WebResource localResource = Mockito.mock(WebResource.class);
            WebResource.Builder localBuilder = Mockito.mock(WebResource.Builder.class);
            clientMock.when(() -> Client.create(Mockito.any())).thenReturn(localClient);
            Mockito.when(localClient.resource(Mockito.anyString())).thenReturn(localResource);
            Mockito.when(localResource.accept(MediaType.APPLICATION_JSON_TYPE)).thenReturn(localBuilder);
            Mockito.when(localBuilder.type(MediaType.APPLICATION_JSON_TYPE)).thenReturn(localBuilder);

            ClientResponse response = Mockito.mock(ClientResponse.class);
            Mockito.when(localBuilder.get(String.class)).thenThrow(new UniformInterfaceException("Get failed", response, false));

            Assertions.assertThrows(Exception.class, () ->
                    kmsKeyMgr.getKeyFromUri(TEST_PROVIDER_URL, TEST_KEY_NAME, false, TEST_REPO_NAME));
        }
    }

    @Test
    public void testGetSubjectForKerberos_SimpleAuth() throws Exception {
        RangerService rangerService = createMockRangerService();
        Subject mockSubject = new Subject();

        try (MockedStatic<PropertiesUtil> propertiesUtilMock = Mockito.mockStatic(PropertiesUtil.class);
                MockedStatic<SecureClientLogin> secureClientLoginMock = Mockito.mockStatic(SecureClientLogin.class);
                MockedStatic<KerberosName> kerberosNameMock = Mockito.mockStatic(KerberosName.class);
                MockedStatic<PasswordUtils> passwordUtilsMock = Mockito.mockStatic(PasswordUtils.class)) {
            // Simple auth
            propertiesUtilMock.when(() -> PropertiesUtil.getProperty("hadoop.security.authentication", "simple")).thenReturn("simple");
            propertiesUtilMock.when(() -> PropertiesUtil.getProperty("hadoop.security.auth_to_local")).thenReturn(null);
            propertiesUtilMock.when(() -> PropertiesUtil.getProperty("ranger.admin.kerberos.principal")).thenReturn("ranger/_HOST@REALM");
            propertiesUtilMock.when(() -> PropertiesUtil.getProperty("ranger.service.host")).thenReturn("localhost");
            kerberosNameMock.when(() -> KerberosName.setRules("DEFAULT")).then(invocation -> null);
            secureClientLoginMock.when(() -> SecureClientLogin.getPrincipal(Mockito.anyString(), Mockito.anyString())).thenReturn("ranger/localhost@REALM");
            secureClientLoginMock.when(() -> SecureClientLogin.login(TEST_USERNAME)).thenReturn(mockSubject);

            // Mock DB lookups used by getKMSPassword
            XXService xxService = new XXService();
            xxService.setId(1L);
            XXServiceConfigMap xxServiceConfigMap = new XXServiceConfigMap();
            xxServiceConfigMap.setConfigvalue("encryptedPassword");
            Mockito.when(rangerDaoManagerBase.getXXService()).thenReturn(xxServiceDao);
            Mockito.when(xxServiceDao.findByName(TEST_REPO_NAME)).thenReturn(xxService);
            Mockito.when(rangerDaoManagerBase.getXXServiceConfigMap()).thenReturn(xxServiceConfigMapDao);
            Mockito.when(xxServiceConfigMapDao.findByServiceAndConfigKey(1L, "password")).thenReturn(xxServiceConfigMap);
            passwordUtilsMock.when(() -> PasswordUtils.decryptPassword("encryptedPassword")).thenReturn(TEST_PASSWORD);

            Mockito.when(svcStore.getServiceByName(TEST_REPO_NAME)).thenReturn(rangerService);

            Method getSubjectForKerberosMethod = KmsKeyMgr.class.getDeclaredMethod("getSubjectForKerberos", String.class);
            getSubjectForKerberosMethod.setAccessible(true);

            Subject result = (Subject) getSubjectForKerberosMethod.invoke(kmsKeyMgr, TEST_REPO_NAME);

            Assertions.assertNotNull(result);
        }
    }

    @Test
    public void testExtractCommonCriteriasForFilter_InvalidSortBy() throws Exception {
        KeySearchFilter filter = new KeySearchFilter();
        List<SortField> sortFields = new ArrayList<>();
        sortFields.add(new SortField("name", "name"));

        Mockito.when(request.getParameter(KeySearchFilter.START_INDEX)).thenReturn("0");
        Mockito.when(request.getParameter(KeySearchFilter.PAGE_SIZE)).thenReturn("10");
        Mockito.when(request.getParameter("getCount")).thenReturn("true");
        Mockito.when(request.getParameter(KeySearchFilter.SORT_BY)).thenReturn("unknown");

        Mockito.when(restErrorUtil.parseInt(Mockito.anyString(), Mockito.anyInt(), Mockito.anyString(),
                Mockito.any(MessageEnums.class), Mockito.any(), Mockito.anyString())).thenReturn(0, 10);
        Mockito.when(restErrorUtil.parseBoolean(Mockito.anyString(), Mockito.anyBoolean())).thenReturn(true);
        Mockito.when(restErrorUtil.validateString(Mockito.anyString(), Mockito.anyString(), Mockito.anyString(),
                Mockito.any(MessageEnums.class), Mockito.any(), Mockito.anyString())).thenReturn("unknown");
        Mockito.when(configUtil.getDefaultMaxRows()).thenReturn(10);

        Method extractCommonCriteriasForFilterMethod = KmsKeyMgr.class.getDeclaredMethod("extractCommonCriteriasForFilter", HttpServletRequest.class, KeySearchFilter.class, List.class);
        extractCommonCriteriasForFilterMethod.setAccessible(true);

        KeySearchFilter result = (KeySearchFilter) extractCommonCriteriasForFilterMethod.invoke(kmsKeyMgr, request, filter, sortFields);

        Assertions.assertNotNull(result);
        Assertions.assertNull(result.getSortBy());
        Assertions.assertNull(result.getSortType());
    }

    @Test
    public void testCreateProvider_InvalidPort() throws Exception {
        Method createProviderMethod = KmsKeyMgr.class.getDeclaredMethod("createProvider", String.class, String.class);
        createProviderMethod.setAccessible(true);

        Assertions.assertThrows(InvocationTargetException.class, () -> {
            createProviderMethod.invoke(kmsKeyMgr, "kms://http@host:abc/kms", "kms://http@host:abc/kms");
        });
    }

    // Helper methods
    private RangerService createMockRangerService() {
        RangerService rangerService = new RangerService();
        rangerService.setName(TEST_REPO_NAME);
        Map<String, String> configs = new HashMap<>();
        configs.put("provider", TEST_PROVIDER_URL);
        configs.put("username", TEST_USERNAME);
        rangerService.setConfigs(configs);
        return rangerService;
    }

    private VXKmsKey createMockVXKmsKey() {
        VXKmsKey key = new VXKmsKey();
        key.setName(TEST_KEY_NAME);
        key.setCipher("AES");
        key.setLength(256);
        key.setDescription("Test key");
        key.setCreated(System.currentTimeMillis());
        return key;
    }

    private void setupKerberosMocks(MockedStatic<PropertiesUtil> propertiesUtilMock,
                                   MockedStatic<SecureClientLogin> secureClientLoginMock,
                                   Subject mockSubject) {
        propertiesUtilMock.when(() -> PropertiesUtil.getProperty("hadoop.security.authentication", "simple")).thenReturn("kerberos");
        propertiesUtilMock.when(() -> PropertiesUtil.getProperty("hadoop.security.auth_to_local")).thenReturn("DEFAULT");
        propertiesUtilMock.when(() -> PropertiesUtil.getProperty("ranger.admin.kerberos.principal")).thenReturn("ranger/_HOST@REALM");
        propertiesUtilMock.when(() -> PropertiesUtil.getProperty("ranger.admin.kerberos.keytab")).thenReturn("/etc/ranger/keytab");
        propertiesUtilMock.when(() -> PropertiesUtil.getProperty("ranger.service.host")).thenReturn("localhost");

        secureClientLoginMock.when(() -> SecureClientLogin.getPrincipal(Mockito.anyString(), Mockito.anyString())).thenReturn("ranger/localhost@REALM");
        secureClientLoginMock.when(() -> SecureClientLogin.isKerberosCredentialExists(Mockito.anyString(), Mockito.anyString())).thenReturn(true);
        secureClientLoginMock.when(() -> SecureClientLogin.loginUserFromKeytab(Mockito.anyString(), Mockito.anyString(), Mockito.anyString())).thenReturn(mockSubject);
    }
}
