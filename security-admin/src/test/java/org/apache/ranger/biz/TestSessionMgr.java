/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package org.apache.ranger.biz;

import org.apache.ranger.common.HTTPUtil;
import org.apache.ranger.common.MessageEnums;
import org.apache.ranger.common.RESTErrorUtil;
import org.apache.ranger.common.RangerCommonEnums;
import org.apache.ranger.common.RangerConstants;
import org.apache.ranger.common.SearchCriteria;
import org.apache.ranger.common.StringUtil;
import org.apache.ranger.common.UserSessionBase;
import org.apache.ranger.db.RangerDaoManager;
import org.apache.ranger.db.XXAuthSessionDao;
import org.apache.ranger.db.XXModuleDefDao;
import org.apache.ranger.db.XXPortalUserDao;
import org.apache.ranger.db.XXPortalUserRoleDao;
import org.apache.ranger.db.XXUserDao;
import org.apache.ranger.entity.XXAuthSession;
import org.apache.ranger.entity.XXPortalUser;
import org.apache.ranger.entity.XXPortalUserRole;
import org.apache.ranger.entity.XXUser;
import org.apache.ranger.security.context.RangerContextHolder;
import org.apache.ranger.security.context.RangerSecurityContext;
import org.apache.ranger.security.listener.RangerHttpSessionListener;
import org.apache.ranger.security.web.filter.RangerSecurityContextFormationFilter;
import org.apache.ranger.service.AuthSessionService;
import org.apache.ranger.view.VXAuthSession;
import org.apache.ranger.view.VXAuthSessionList;
import org.apache.ranger.view.VXLong;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockedStatic;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContext;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.web.authentication.WebAuthenticationDetails;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;
import javax.ws.rs.WebApplicationException;

import java.util.Arrays;
import java.util.Calendar;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Set;
import java.util.concurrent.CopyOnWriteArrayList;
import java.util.function.BiConsumer;
import java.util.function.Consumer;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.anyInt;
import static org.mockito.ArgumentMatchers.anyString;
import static org.mockito.Mockito.doReturn;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

/**
* @generated by Cursor
* @description <Unit Test for TestSessionMgr class>
*/
@ExtendWith(MockitoExtension.class)
@TestMethodOrder(MethodOrderer.MethodName.class)
public class TestSessionMgr {
    @InjectMocks
    SessionMgr sessionMgr;

    @Mock
    RESTErrorUtil restErrorUtil;

    @Mock
    RangerDaoManager daoManager;

    @Mock
    XUserMgr xUserMgr;

    @Mock
    AuthSessionService authSessionService;

    @Mock
    HTTPUtil httpUtil;

    @Mock
    StringUtil stringUtil;

    @Test
    public void testProcessSuccessLogin_ExistingValidSession() {
        // Prepare existing user session in RangerContextHolder
        UserSessionBase existing = new UserSessionBase();
        XXPortalUser user = new XXPortalUser();
        user.setLoginId("user1");
        user.setId(11L);
        existing.setXXPortalUser(user);
        RangerSecurityContext rctx = new RangerSecurityContext();
        rctx.setUserSession(existing);
        RangerContextHolder.setSecurityContext(rctx);

        // Spring Security authentication
        Authentication authentication = mock(Authentication.class);
        when(authentication.getDetails()).thenReturn(null);
        when(authentication.getName()).thenReturn("user1");
        SecurityContext sc = SecurityContextHolder.createEmptyContext();
        sc.setAuthentication(authentication);
        SecurityContextHolder.setContext(sc);

        HttpServletRequest request = mock(HttpServletRequest.class);
        UserSessionBase ret = sessionMgr.processSuccessLogin(XXAuthSession.AUTH_TYPE_PASSWORD, "agent", request);
        assertNotNull(ret);
        assertEquals(existing, ret);
    }

    @Test
    public void testProcessSuccessLogin_CreateNewSession() {
        // Clear Ranger context
        RangerContextHolder.setSecurityContext(null);

        // Spring Security authentication
        Authentication authentication = mock(Authentication.class);
        WebAuthenticationDetails details = mock(WebAuthenticationDetails.class);
        when(authentication.getDetails()).thenReturn(details);
        when(authentication.getName()).thenReturn("user2");
        when(details.getSessionId()).thenReturn("httpSess1");
        when(details.getRemoteAddress()).thenReturn("127.0.0.1");
        SecurityContext sc = SecurityContextHolder.createEmptyContext();
        sc.setAuthentication(authentication);
        SecurityContextHolder.setContext(sc);

        // DAO returns portal user and auth-session on create
        XXPortalUser p = new XXPortalUser();
        p.setId(21L);
        p.setLoginId("user2");
        XXPortalUserDao portalDao = mock(XXPortalUserDao.class);
        when(daoManager.getXXPortalUser()).thenReturn(portalDao);
        when(portalDao.findByLoginId("user2")).thenReturn(p);
        // roles lookup during setUserRoles()
        XXPortalUserRoleDao roleDao = mock(XXPortalUserRoleDao.class);
        when(daoManager.getXXPortalUserRole()).thenReturn(roleDao);
        when(roleDao.findByUserId(21L)).thenReturn(Collections.emptyList());
        // module permissions during resetUserModulePermission()
        XXUserDao xxUserDao = mock(XXUserDao.class);
        when(daoManager.getXXUser()).thenReturn(xxUserDao);
        XXUser xUser = new XXUser();
        xUser.setId(21L);
        xUser.setName("user2");
        when(xxUserDao.findByUserName("user2")).thenReturn(xUser);
        XXModuleDefDao moduleDefDao = mock(XXModuleDefDao.class);
        when(daoManager.getXXModuleDef()).thenReturn(moduleDefDao);
        when(moduleDefDao.findAccessibleModulesByUserId(21L, 21L)).thenReturn(Collections.emptyList());

        XXAuthSession created = new XXAuthSession();
        created.setId(99L);
        XXAuthSessionDao authDao = mock(XXAuthSessionDao.class);
        when(daoManager.getXXAuthSession()).thenReturn(authDao);
        when(authDao.create(any(XXAuthSession.class))).thenReturn(created);

        when(httpUtil.getDeviceType(anyString())).thenReturn(RangerCommonEnums.DEVICE_UNKNOWN);

        HttpSession httpSession = mock(HttpSession.class);
        when(httpSession.getAttribute("auditLoginId")).thenReturn(null);
        HttpServletRequest request = mock(HttpServletRequest.class);
        when(request.getSession()).thenReturn(httpSession);
        when(request.getRequestURI()).thenReturn("");
        when(request.getAttribute("spnegoEnabled")).thenReturn(Boolean.TRUE);

        UserSessionBase ret = sessionMgr.processSuccessLogin(XXAuthSession.AUTH_TYPE_TRUSTED_PROXY, "UA", request);
        assertNotNull(ret);
        assertEquals(21L, ret.getUserId());
        assertTrue(ret.isSSOEnabled());
        assertTrue(ret.isSpnegoEnabled());
    }

    @Test
    public void testProcessSuccessLogin_UserNotFound() {
        RangerContextHolder.setSecurityContext(null);
        Authentication authentication = mock(Authentication.class);
        when(authentication.getDetails()).thenReturn(null);
        when(authentication.getName()).thenReturn("nouser");
        SecurityContext sc = SecurityContextHolder.createEmptyContext();
        sc.setAuthentication(authentication);
        SecurityContextHolder.setContext(sc);

        XXPortalUserDao portalDao = mock(XXPortalUserDao.class);
        when(daoManager.getXXPortalUser()).thenReturn(portalDao);
        when(portalDao.findByLoginId("nouser")).thenReturn(null);

        HttpServletRequest request = mock(HttpServletRequest.class);
        UserSessionBase ret = sessionMgr.processSuccessLogin(XXAuthSession.AUTH_TYPE_PASSWORD, null, request);
        assertNull(ret);
    }

    @Test
    public void testProcessFailureLogin() {
        XXAuthSession created = new XXAuthSession();
        created.setId(7L);
        XXAuthSessionDao authDao = mock(XXAuthSessionDao.class);
        when(daoManager.getXXAuthSession()).thenReturn(authDao);
        when(authDao.create(any(XXAuthSession.class))).thenReturn(created);

        XXAuthSession ret = sessionMgr.processFailureLogin(XXAuthSession.AUTH_STATUS_UNKNOWN,
                XXAuthSession.AUTH_TYPE_PASSWORD, "u", "ip", "sid", "ua");
        assertNotNull(ret);
        assertEquals(7L, ret.getId());
    }

    @Test
    public void testProcessStandaloneSuccessLogin() {
        Authentication authentication = mock(Authentication.class);
        when(authentication.getName()).thenReturn("user3");
        SecurityContext sc = SecurityContextHolder.createEmptyContext();
        sc.setAuthentication(authentication);
        SecurityContextHolder.setContext(sc);

        XXPortalUser p = new XXPortalUser();
        p.setId(31L);
        p.setLoginId("user3");
        XXPortalUserDao portalDao = mock(XXPortalUserDao.class);
        when(daoManager.getXXPortalUser()).thenReturn(portalDao);
        when(portalDao.findByLoginId("user3")).thenReturn(p);
        // roles lookup during setUserRoles()
        XXPortalUserRoleDao roleDao = mock(XXPortalUserRoleDao.class);
        when(daoManager.getXXPortalUserRole()).thenReturn(roleDao);
        when(roleDao.findByUserId(31L)).thenReturn(Collections.emptyList());
        // module permissions during resetUserModulePermission()
        XXUserDao xxUserDao = mock(XXUserDao.class);
        when(daoManager.getXXUser()).thenReturn(xxUserDao);
        XXUser xUser = new XXUser();
        xUser.setId(31L);
        xUser.setName("user3");
        when(xxUserDao.findByUserName("user3")).thenReturn(xUser);
        XXModuleDefDao moduleDefDao = mock(XXModuleDefDao.class);
        when(daoManager.getXXModuleDef()).thenReturn(moduleDefDao);
        when(moduleDefDao.findAccessibleModulesByUserId(31L, 31L)).thenReturn(Collections.emptyList());

        XXAuthSession created = new XXAuthSession();
        created.setId(100L);
        XXAuthSessionDao authDao = mock(XXAuthSessionDao.class);
        when(daoManager.getXXAuthSession()).thenReturn(authDao);
        when(authDao.create(any(XXAuthSession.class))).thenReturn(created);

        UserSessionBase ret = sessionMgr.processStandaloneSuccessLogin(XXAuthSession.AUTH_TYPE_PASSWORD, "10.0.0.1");
        assertNotNull(ret);
        assertEquals(31L, ret.getUserId());
    }

    @Test
    public void testSearchAuthSessions_NullCriteriaAndWithParams() {
        VXAuthSessionList list = new VXAuthSessionList();
        when(authSessionService.search(any(SearchCriteria.class))).thenReturn(list);
        VXAuthSessionList ret1 = sessionMgr.searchAuthSessions(null);
        assertNotNull(ret1);

        SearchCriteria sc = new SearchCriteria();
        HashMap<String, Object> params = new HashMap<>();
        params.put("startDate", new Date());
        params.put("endDate", new Date());
        // emulate setting via getParamList map reference
        if (sc.getParamList() != null) {
            sc.getParamList().putAll(params);
        }
        VXAuthSessionList ret2 = sessionMgr.searchAuthSessions(sc);
        assertNotNull(ret2);
        verify(authSessionService, times(2)).search(any(SearchCriteria.class));
    }

    @Test
    public void testCountAndGetAuthSession() {
        VXLong cnt = new VXLong();
        cnt.setValue(3L);
        when(authSessionService.getSearchCount(any(SearchCriteria.class), any(List.class))).thenReturn(cnt);
        assertEquals(3L, sessionMgr.countAuthSessions(new SearchCriteria()).getValue());

        VXAuthSession v = new VXAuthSession();
        when(authSessionService.readResource(5L)).thenReturn(v);
        assertEquals(v, sessionMgr.getAuthSession(5L));
    }

    @Test
    public void testGetAuthSessionBySessionId_ErrorsAndSuccess() {
        when(stringUtil.isEmpty("")).thenReturn(true);
        when(restErrorUtil.createRESTException(anyString(), any(MessageEnums.class)))
                .thenReturn(new WebApplicationException());
        assertThrows(WebApplicationException.class, () -> sessionMgr.getAuthSessionBySessionId(""));

        when(stringUtil.isEmpty("abc")).thenReturn(false);
        XXAuthSessionDao authDao = mock(XXAuthSessionDao.class);
        when(daoManager.getXXAuthSession()).thenReturn(authDao);
        when(authDao.getAuthSessionBySessionId("abc")).thenReturn(null);
        assertThrows(WebApplicationException.class, () -> sessionMgr.getAuthSessionBySessionId("abc"));

        XXAuthSession x = new XXAuthSession();
        when(authDao.getAuthSessionBySessionId("good")).thenReturn(x);
        VXAuthSession vx = new VXAuthSession();
        when(authSessionService.populateViewBean(x)).thenReturn(vx);
        assertEquals(vx, sessionMgr.getAuthSessionBySessionId("good"));
    }

    @Test
    public void testIsLoginIdLocked_TrueAndFalse() {
        XXAuthSessionDao authDao = mock(XXAuthSessionDao.class);
        when(daoManager.getXXAuthSession()).thenReturn(authDao);
        when(authDao.getRecentAuthFailureCountByLoginId(anyString(), anyInt())).thenReturn(5L);
        assertTrue(sessionMgr.isLoginIdLocked("u"));

        when(authDao.getRecentAuthFailureCountByLoginId(anyString(), anyInt())).thenReturn(0L);
        assertFalse(sessionMgr.isLoginIdLocked("u"));
    }

    @Test
    public void testIsValidXAUser() {
        XXPortalUserDao portalDao = mock(XXPortalUserDao.class);
        when(daoManager.getXXPortalUser()).thenReturn(portalDao);
        XXPortalUser p = new XXPortalUser();
        p.setUserSource(RangerCommonEnums.USER_APP);
        when(portalDao.findByLoginId("ok")).thenReturn(p);
        assertTrue(sessionMgr.isValidXAUser("ok"));

        XXPortalUser p2 = new XXPortalUser();
        p2.setUserSource(RangerCommonEnums.USER_FEDERATED);
        when(portalDao.findByLoginId("fed")).thenReturn(p2);
        assertFalse(sessionMgr.isValidXAUser("fed"));

        when(portalDao.findByLoginId("none")).thenReturn(null);
        assertFalse(sessionMgr.isValidXAUser("none"));
    }

    @Test
    public void testGetActiveSessionsOnServer_EmptyAndWithOne() {
        try (MockedStatic<RangerHttpSessionListener> mocked = Mockito.mockStatic(RangerHttpSessionListener.class)) {
            mocked.when(RangerHttpSessionListener::getActiveSessionOnServer).thenReturn(new CopyOnWriteArrayList<>());
            CopyOnWriteArrayList<UserSessionBase> empty = sessionMgr.getActiveSessionsOnServer();
            assertNotNull(empty);
            assertTrue(empty.isEmpty());

            HttpSession httpSession = mock(HttpSession.class);
            UserSessionBase usb = new UserSessionBase();
            XXPortalUser p = new XXPortalUser();
            p.setId(55L);
            p.setLoginId("u55");
            usb.setXXPortalUser(p);
            RangerSecurityContext rsc = new RangerSecurityContext();
            rsc.setUserSession(usb);
            when(httpSession.getAttribute(RangerSecurityContextFormationFilter.AKA_SC_SESSION_KEY)).thenReturn(rsc);
            CopyOnWriteArrayList<HttpSession> sessions = new CopyOnWriteArrayList<>();
            sessions.add(httpSession);
            mocked.when(RangerHttpSessionListener::getActiveSessionOnServer).thenReturn(sessions);

            CopyOnWriteArrayList<UserSessionBase> one = sessionMgr.getActiveSessionsOnServer();
            assertEquals(1, one.size());
        }
    }

    @Test
    public void testGetActiveUserSessionsForPortalAndXUser() {
        SessionMgr spy = Mockito.spy(sessionMgr);
        UserSessionBase s1 = new UserSessionBase();
        XXPortalUser u1 = new XXPortalUser();
        u1.setId(10L);
        u1.setLoginId("u1");
        s1.setXXPortalUser(u1);

        UserSessionBase s2 = new UserSessionBase();
        XXPortalUser u2 = new XXPortalUser();
        u2.setId(20L);
        u2.setLoginId("u2");
        s2.setXXPortalUser(u2);

        CopyOnWriteArrayList<UserSessionBase> list = new CopyOnWriteArrayList<>();
        list.add(s1);
        list.add(s2);
        doReturn(list).when(spy).getActiveSessionsOnServer();

        Set<UserSessionBase> found = spy.getActiveUserSessionsForPortalUserId(10L);
        assertNotNull(found);
        assertEquals(1, found.size());

        XXPortalUserDao portalDao = mock(XXPortalUserDao.class);
        when(daoManager.getXXPortalUser()).thenReturn(portalDao);
        XXPortalUser p = new XXPortalUser();
        p.setId(10L);
        when(portalDao.findByXUserId(77L)).thenReturn(p);
        Set<UserSessionBase> foundByX = spy.getActiveUserSessionsForXUserId(77L);
        assertEquals(1, foundByX.size());

        when(portalDao.findByXUserId(88L)).thenReturn(null);
        assertNull(spy.getActiveUserSessionsForXUserId(88L));
    }

    @Test
    public void testRefreshPermissionsIfNeeded() {
        SessionMgr spy = Mockito.spy(sessionMgr);
        Mockito.doNothing().when(spy).resetUserModulePermission(any(UserSessionBase.class));
        spy.refreshPermissionsIfNeeded(null); // no-op

        UserSessionBase u = new UserSessionBase();
        u.setXXPortalUser(new XXPortalUser());
        // lastUpdatedTime null -> triggers reset
        spy.refreshPermissionsIfNeeded(u);
        verify(spy).resetUserModulePermission(u);

        UserSessionBase u2 = new UserSessionBase();
        u2.setXXPortalUser(new XXPortalUser());
        UserSessionBase.RangerUserPermission perm = new UserSessionBase.RangerUserPermission();
        perm.setLastUpdatedTime(0L);
        u2.setRangerUserPermission(perm);
        spy.refreshPermissionsIfNeeded(u2);
        verify(spy, times(2)).resetUserModulePermission(any(UserSessionBase.class));

        UserSessionBase u3 = new UserSessionBase();
        u3.setXXPortalUser(new XXPortalUser());
        UserSessionBase.RangerUserPermission perm3 = new UserSessionBase.RangerUserPermission();
        perm3.setLastUpdatedTime(Calendar.getInstance().getTimeInMillis());
        u3.setRangerUserPermission(perm3);
        spy.refreshPermissionsIfNeeded(u3);
        verify(spy, times(2)).resetUserModulePermission(any(UserSessionBase.class)); // unchanged
    }

    @Test
    public void testValidateUserSession() {
        UserSessionBase u = new UserSessionBase();
        XXPortalUser p = new XXPortalUser();
        p.setLoginId("A");
        u.setXXPortalUser(p);
        assertTrue(sessionMgr.validateUserSession(u, "a"));
        assertFalse(sessionMgr.validateUserSession(u, "b"));
    }

    @Test
    public void testStoreAuthSession() {
        XXAuthSession created = new XXAuthSession();
        created.setId(5L);
        XXAuthSessionDao authDao = mock(XXAuthSessionDao.class);
        when(daoManager.getXXAuthSession()).thenReturn(authDao);
        when(authDao.create(any(XXAuthSession.class))).thenReturn(created);
        XXAuthSession ret = sessionMgr.storeAuthSession(new XXAuthSession());
        assertEquals(5L, ret.getId());
    }

    @Test
    public void testSetUserRoles_Combinations() {
        // Helper to run one role list and verify flags
        BiConsumer<List<XXPortalUserRole>, Consumer<UserSessionBase>> runCase = (
                roles, verifier) -> {
            UserSessionBase u = new UserSessionBase();
            XXPortalUser p = new XXPortalUser();
            p.setId(40L);
            p.setLoginId("combo");
            u.setXXPortalUser(p);
            XXPortalUserDao portalDao = mock(XXPortalUserDao.class);
            when(daoManager.getXXPortalUser()).thenReturn(portalDao);
            when(portalDao.findByLoginId("combo")).thenReturn(p);
            XXPortalUserRoleDao roleDao = mock(XXPortalUserRoleDao.class);
            when(daoManager.getXXPortalUserRole()).thenReturn(roleDao);
            when(roleDao.findByUserId(40L)).thenReturn(roles);

            sessionMgr.resetUserSessionForProfiles(u);
            verifier.accept(u);
        };

        // SYS_ADMIN -> userAdmin true
        XXPortalUserRole sys = new XXPortalUserRole();
        sys.setUserRole(RangerConstants.ROLE_SYS_ADMIN);
        runCase.accept(Arrays.asList(sys), us -> {
            assertTrue(us.isUserAdmin());
            assertFalse(us.isKeyAdmin());
            assertFalse(us.isAuditUserAdmin());
            assertFalse(us.isAuditKeyAdmin());
        });

        // KEY_ADMIN -> keyAdmin true
        XXPortalUserRole key = new XXPortalUserRole();
        key.setUserRole(RangerConstants.ROLE_KEY_ADMIN);
        runCase.accept(Arrays.asList(key), us -> {
            assertTrue(us.isKeyAdmin());
            assertFalse(us.isUserAdmin());
            assertFalse(us.isAuditUserAdmin());
            assertFalse(us.isAuditKeyAdmin());
        });

        // Only USER -> all admin flags false
        XXPortalUserRole plain = new XXPortalUserRole();
        plain.setUserRole(RangerConstants.ROLE_USER);
        runCase.accept(Arrays.asList(plain), us -> {
            assertFalse(us.isKeyAdmin());
            assertFalse(us.isUserAdmin());
            assertFalse(us.isAuditUserAdmin());
            assertFalse(us.isAuditKeyAdmin());
        });

        // ADMIN_AUDITOR -> auditUserAdmin true
        XXPortalUserRole adminAud = new XXPortalUserRole();
        adminAud.setUserRole(RangerConstants.ROLE_ADMIN_AUDITOR);
        runCase.accept(Arrays.asList(adminAud), us -> {
            assertTrue(us.isAuditUserAdmin());
            assertFalse(us.isAuditKeyAdmin());
            assertFalse(us.isKeyAdmin());
            assertFalse(us.isUserAdmin());
        });

        // KEY_ADMIN_AUDITOR -> auditKeyAdmin true
        XXPortalUserRole keyAud = new XXPortalUserRole();
        keyAud.setUserRole(RangerConstants.ROLE_KEY_ADMIN_AUDITOR);
        runCase.accept(Arrays.asList(keyAud), us -> {
            assertTrue(us.isAuditKeyAdmin());
            assertFalse(us.isAuditUserAdmin());
            assertFalse(us.isKeyAdmin());
            assertFalse(us.isUserAdmin());
        });
    }
}
