/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.apache.ranger.biz;

import org.apache.ranger.common.TimedExecutor;
import org.apache.ranger.db.XXGroupUserDao;
import org.apache.ranger.plugin.model.RangerRole;
import org.apache.ranger.plugin.model.RangerSecurityZone;
import org.apache.ranger.plugin.model.RangerService;
import org.apache.ranger.plugin.model.RangerServiceDef;
import org.apache.ranger.plugin.service.RangerBaseService;
import org.apache.ranger.plugin.service.RangerDefaultService;
import org.apache.ranger.plugin.service.ResourceLookupContext;
import org.apache.ranger.plugin.store.ServiceStore;
import org.apache.ranger.plugin.util.RangerRoles;
import org.apache.ranger.service.RangerServiceService;
import org.apache.ranger.view.VXResponse;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;

import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

/**
 * @generated by Cursor
 * @description <Unit Test for TestServiceMgr class>
 */
@ExtendWith(MockitoExtension.class)
@TestMethodOrder(MethodOrderer.MethodName.class)
public class TestServiceMgr {
    private static void setField(Object target, Class<?> declaring, String fieldName, Object value) throws Exception {
        Field f = declaring.getDeclaredField(fieldName);
        f.setAccessible(true);
        f.set(target, value);
    }

    @Test
    public void test01_parseLong_andTimeoutFallbacks() throws Exception {
        ServiceMgr mgr = new ServiceMgr();
        Assertions.assertNull(mgr.parseLong("abc"));
        Assertions.assertEquals(42L, mgr.parseLong("42"));

        RangerBaseService svc = mock(RangerBaseService.class);
        when(svc.getConfigs()).thenReturn(Collections.emptyMap());
        when(svc.getServiceName()).thenReturn("s");
        when(svc.getServiceType()).thenReturn("hdfs");
        long v1 = mgr.getTimeoutValueInMilliSeconds("resource.lookup", svc, 1000L);
        long v2 = mgr.getTimeoutValueInMilliSeconds("validate.config", svc, 10000L);
        Assertions.assertEquals(1000L, v1);
        Assertions.assertEquals(10000L, v2);
    }

    @Test
    public void test02_getRangerServiceByService_andByName() throws Exception {
        ServiceMgr mgr = new ServiceMgr();
        ServiceStore store = mock(ServiceStore.class);
        RangerService svc = new RangerService();
        svc.setType("hdfs");
        svc.setName("s");
        RangerServiceDef def = new RangerServiceDef();
        def.setName("hdfs");
        def.setImplClass(RangerDefaultService.class.getName());
        when(store.getServiceDefByName("hdfs")).thenReturn(def);
        RangerBaseService built = mgr.getRangerServiceByService(svc, store);
        Assertions.assertNotNull(built);
        Assertions.assertEquals("s", built.getServiceName());

        when(store.getServiceByName("n1")).thenReturn(svc);
        Assertions.assertNotNull(mgr.getRangerServiceByName("n1", store));
    }

    @Test
    public void test03_validateConfig_populatesKerberosConfigsAndHandlesErrors() throws Exception {
        ServiceMgr mgr = new ServiceMgr();
        RangerServiceService svcService = mock(RangerServiceService.class);
        TimedExecutor exec = mock(TimedExecutor.class);
        setField(mgr, ServiceMgr.class, "rangerSvcService", svcService);
        setField(mgr, ServiceMgr.class, "timedExecutor", exec);

        RangerService svc = new RangerService();
        svc.setName("s");
        svc.setType("hdfs");
        svc.setConfigs(new HashMap<>());
        ServiceStore store = mock(ServiceStore.class);
        RangerServiceDef def = new RangerServiceDef();
        def.setName("hdfs");
        def.setImplClass(RangerDefaultService.class.getName());
        when(store.getServiceDefByName("hdfs")).thenReturn(def);
        when(svcService.getConfigsWithDecryptedPassword(any(RangerService.class))).thenReturn(new HashMap<>());

        Map<String, Object> resp = new HashMap<>();
        resp.put("connectivityStatus", true);
        when(exec.timedTask(any(ServiceMgr.ValidateCallable.class), any(Long.class), any())).thenReturn(resp);
        VXResponse ok = mgr.validateConfig(svc, store);
        Assertions.assertEquals(VXResponse.STATUS_SUCCESS, ok.getStatusCode());
    }

    @Test
    public void test04_lookupResource_delegatesToService() throws Exception {
        ServiceMgr mgr = new ServiceMgr();
        ServiceDBStore db = mock(ServiceDBStore.class);
        RangerServiceService svcService = mock(RangerServiceService.class);
        setField(mgr, ServiceMgr.class, "svcDBStore", db);
        setField(mgr, ServiceMgr.class, "rangerSvcService", svcService);
        TimedExecutor exec = mock(TimedExecutor.class);
        setField(mgr, ServiceMgr.class, "timedExecutor", exec);

        RangerService svc = new RangerService();
        svc.setName("s");
        svc.setType("hdfs");
        svc.setConfigs(new HashMap<>());
        when(db.getServiceByName("s")).thenReturn(svc);
        when(svcService.getConfigsWithDecryptedPassword(any(RangerService.class))).thenReturn(new HashMap<>());
        ServiceStore store = mock(ServiceStore.class);
        RangerServiceDef def = new RangerServiceDef();
        def.setName("hdfs");
        def.setImplClass(RangerDefaultService.class.getName());
        when(store.getServiceDefByName("hdfs")).thenReturn(def);
        RangerBaseService built = mgr.getRangerServiceByService(svc, store);
        ResourceLookupContext ctx = new ResourceLookupContext();
        List<String> expected = Arrays.asList("a", "b");
        // Use timed path
        when(exec.timedTask(any(ServiceMgr.LookupCallable.class), any(Long.class), any())).thenReturn(expected);
        List<String> out = mgr.lookupResource("s", ctx, store);
        Assertions.assertEquals(expected, out);
    }

    @Test
    public void test05_isZoneAdmin_and_isZoneAuditor() throws Exception {
        ServiceMgr mgr = new ServiceMgr();
        SecurityZoneDBStore zstore = mock(SecurityZoneDBStore.class);
        RangerBizUtil biz = mock(RangerBizUtil.class);
        XXGroupUserDao groupUserDao = mock(XXGroupUserDao.class);
        setField(mgr, ServiceMgr.class, "zoneStore", zstore);
        setField(mgr, ServiceMgr.class, "rangerBizUtil", biz);
        setField(mgr, ServiceMgr.class, "groupUserDao", groupUserDao);

        RangerSecurityZone z = new RangerSecurityZone();
        z.setName("z1");
        z.setAdminUsers(Arrays.asList("u1"));
        z.setAdminUserGroups(Arrays.asList("g1"));
        z.setAdminRoles(Arrays.asList("r1"));
        z.setAuditUsers(Arrays.asList("u2"));
        z.setAuditUserGroups(Arrays.asList("g2"));
        z.setAuditRoles(Arrays.asList("r2"));
        when(zstore.getSecurityZoneByName("z1")).thenReturn(z);
        when(biz.getCurrentUserLoginId()).thenReturn("u1");
        // Admin by user
        Assertions.assertTrue(mgr.isZoneAdmin("z1"));
        // Auditor by user
        when(biz.getCurrentUserLoginId()).thenReturn("u2");
        Assertions.assertTrue(mgr.isZoneAuditor("z1"));
    }

    @Test
    public void test06_getValidURL_validAndInvalid() throws Exception {
        Method m = ServiceMgr.class.getDeclaredMethod("getValidURL", String.class);
        m.setAccessible(true);
        Assertions.assertNotNull(m.invoke(null, "http://example.com"));
        Assertions.assertNull(m.invoke(null, "not_a_url"));
    }

    @Test
    public void test07_getFilesInDirectory_existingAndMissing() throws Exception {
        ServiceMgr mgr = new ServiceMgr();
        Method m = ServiceMgr.class.getDeclaredMethod("getFilesInDirectory", String.class, List.class);
        m.setAccessible(true);
        List<java.net.URL> files = new ArrayList<>();
        // Directory may not exist; method should handle and leave list empty
        m.invoke(mgr, "ranger-plugins/unknown", files);
        Assertions.assertTrue(files.isEmpty());
    }

    @Test
    public void test08_isUserOrUserGroupsInRole_userAndGroup() throws Exception {
        ServiceMgr mgr = new ServiceMgr();
        RoleDBStore rolesStore = mock(RoleDBStore.class);
        setField(mgr, ServiceMgr.class, "rolesStore", rolesStore);

        RangerRole roleUser = new RangerRole();
        roleUser.setName("r1");
        roleUser.setUsers(Arrays.asList(new RangerRole.RoleMember("u1", false)));
        RangerRole roleGroup = new RangerRole();
        roleGroup.setName("r2");
        roleGroup.setGroups(Arrays.asList(new RangerRole.RoleMember("g1", false)));

        RangerRoles rr = new RangerRoles();
        Set<RangerRole> set = new HashSet<>();
        set.add(roleUser);
        set.add(roleGroup);
        rr.setRangerRoles(set);
        when(rolesStore.getRoles("", -1L)).thenReturn(rr);

        Method m = ServiceMgr.class.getDeclaredMethod("isUserOrUserGroupsInRole", String.class, Set.class, List.class);
        m.setAccessible(true);

        // user in r1
        Assertions.assertTrue((Boolean) m.invoke(mgr, "u1", Collections.emptySet(), Arrays.asList("r1")));
        // group in r2
        Assertions.assertTrue((Boolean) m.invoke(mgr, "uX", new HashSet<>(Arrays.asList("g1")), Arrays.asList("r2")));
        // no match
        Assertions.assertFalse((Boolean) m.invoke(mgr, "uX", Collections.emptySet(), Arrays.asList("r3")));
    }

    @Test
    public void test09_validateConfig_rejectsLocalhostUrl() throws Exception {
        ServiceMgr mgr = new ServiceMgr();
        RangerServiceService svcService = mock(RangerServiceService.class);
        TimedExecutor exec = mock(TimedExecutor.class);
        setField(mgr, ServiceMgr.class, "rangerSvcService", svcService);
        setField(mgr, ServiceMgr.class, "timedExecutor", exec);

        RangerService svc = new RangerService();
        svc.setName("s");
        svc.setType("hdfs");
        Map<String, String> cfg = new HashMap<>();
        cfg.put("namenode", "http://localhost:9870");
        svc.setConfigs(cfg);
        ServiceStore store = mock(ServiceStore.class);
        RangerServiceDef def = new RangerServiceDef();
        def.setName("hdfs");
        def.setImplClass(RangerDefaultService.class.getName());
        when(store.getServiceDefByName("hdfs")).thenReturn(def);
        when(svcService.getConfigsWithDecryptedPassword(any(RangerService.class))).thenReturn(cfg);

        try {
            mgr.validateConfig(svc, store);
            Assertions.fail("Expected exception for localhost URL");
        } catch (Exception expected) {
            // ok
        }
    }

    @Test
    public void test10_lookupResource_tagServiceDirectCall() throws Exception {
        ServiceMgr mgr = new ServiceMgr();
        ServiceDBStore db = mock(ServiceDBStore.class);
        RangerServiceService svcService = mock(RangerServiceService.class);
        setField(mgr, ServiceMgr.class, "svcDBStore", db);
        setField(mgr, ServiceMgr.class, "rangerSvcService", svcService);

        RangerService svc = new RangerService();
        svc.setName("s");
        svc.setType(org.apache.ranger.plugin.store.EmbeddedServiceDefsUtil.EMBEDDED_SERVICEDEF_TAG_NAME);
        svc.setConfigs(new HashMap<>());
        when(db.getServiceByName("s")).thenReturn(svc);
        when(svcService.getConfigsWithDecryptedPassword(any(RangerService.class))).thenReturn(new HashMap<>());
        ServiceStore store = mock(ServiceStore.class);
        RangerServiceDef def = new RangerServiceDef();
        def.setName(org.apache.ranger.plugin.store.EmbeddedServiceDefsUtil.EMBEDDED_SERVICEDEF_TAG_NAME);
        def.setImplClass(RangerDefaultService.class.getName());
        when(store.getServiceDefByName(def.getName())).thenReturn(def);

        // RangerServiceTag should cause direct svc.lookupResource without timed executor
        RangerBaseService built = mgr.getRangerServiceByService(svc, store);
        ResourceLookupContext ctx = new ResourceLookupContext();
        // no NPE, may return null which is acceptable
        mgr.lookupResource("s", ctx, store);
        Assertions.assertTrue(true);
    }
}
