/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package org.apache.ranger.biz;

import org.apache.ranger.plugin.model.RangerServiceDef;
import org.apache.ranger.plugin.policyengine.RangerPolicyEngineOptions;
import org.apache.ranger.plugin.store.RoleStore;
import org.apache.ranger.plugin.store.SecurityZoneStore;
import org.apache.ranger.plugin.store.ServiceStore;
import org.apache.ranger.plugin.util.RangerPolicyDeltaUtil;
import org.apache.ranger.plugin.util.RangerRoles;
import org.apache.ranger.plugin.util.ServicePolicies;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockedStatic;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;

import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.Date;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.mockito.Mockito.when;

/**
* @generated by Cursor
* @description <Unit Test for TestRangerPolicyAdminCache class>
*/
@ExtendWith(MockitoExtension.class)
@TestMethodOrder(MethodOrderer.MethodName.class)
public class TestRangerPolicyAdminCache {
    @InjectMocks
    RangerPolicyAdminCache cache;

    @Mock
    ServiceStore svcStore;
    @Mock
    RoleStore roleStore;
    @Mock
    SecurityZoneStore zoneStore;

    @Test
    public void testGetServicePoliciesAdmin_NullArgsAndServiceNotExistsAndException() throws Exception {
        RangerPolicyEngineOptions opts = new RangerPolicyEngineOptions();
        // null args -> null
        assertNull(cache.getServicePoliciesAdmin(null, null, null, null, opts));

        when(svcStore.serviceExists("svc")).thenReturn(false);
        assertNull(cache.getServicePoliciesAdmin("svc", svcStore, roleStore, zoneStore, opts));

        when(svcStore.serviceExists("svc")).thenThrow(new RuntimeException("oops"));
        assertNull(cache.getServicePoliciesAdmin("svc", svcStore, roleStore, zoneStore, opts));
    }

    @Test
    public void testGetServicePoliciesAdmin_NoPoliciesOrNoRoleChanges() throws Exception {
        RangerPolicyEngineOptions opts = new RangerPolicyEngineOptions();
        when(svcStore.serviceExists("svc")).thenReturn(true);
        RangerRoles rolesLatest = new RangerRoles();
        when(roleStore.getRoles("svc", -1L)).thenReturn(rolesLatest);
        // first call -> ret stays null as policies null
        when(svcStore.getServicePoliciesIfUpdated("svc", -1L, ServiceDBStore.isSupportsPolicyDeltas()))
                .thenReturn(null);
        assertNull(cache.getServicePoliciesAdmin("svc", svcStore, roleStore, zoneStore, opts));
    }

    @Test
    public void testGetServicePoliciesAdmin_AddPolicyAdminNoDeltas() throws Exception {
        RangerPolicyEngineOptions opts = new RangerPolicyEngineOptions();
        when(svcStore.serviceExists("svc")).thenReturn(true);
        RangerRoles rolesLatest = new RangerRoles();
        when(roleStore.getRoles("svc", -1L)).thenReturn(rolesLatest);

        ServicePolicies sp = new ServicePolicies();
        sp.setServiceName("svc");
        sp.setPolicies(new ArrayList<>());
        sp.setPolicyVersion(1L);
        // minimal service-def required by PolicyEngine
        RangerServiceDef sd = new RangerServiceDef();
        sd.setName("test-service-def");
        sd.setResources(new ArrayList<>());
        sd.setAccessTypes(new ArrayList<>());
        sd.setUpdateTime(new Date());
        sp.setServiceDef(sd);

        try (MockedStatic<RangerPolicyDeltaUtil> mocked = Mockito.mockStatic(RangerPolicyDeltaUtil.class)) {
            mocked.when(() -> RangerPolicyDeltaUtil.hasPolicyDeltas(sp)).thenReturn(Boolean.FALSE);
            when(svcStore.getServicePoliciesIfUpdated("svc", -1L, ServiceDBStore.isSupportsPolicyDeltas()))
                    .thenReturn(sp);
            RangerPolicyAdmin admin = cache.getServicePoliciesAdmin("svc", svcStore, roleStore, zoneStore, opts);
            assertNotNull(admin);
        }
    }

    @Test
    public void testGetServicePoliciesAdmin_WithDeltasOldNull() throws Exception {
        RangerPolicyEngineOptions opts = new RangerPolicyEngineOptions();
        when(svcStore.serviceExists("svc")).thenReturn(true);
        RangerRoles rolesLatest = new RangerRoles();
        when(roleStore.getRoles("svc", -1L)).thenReturn(rolesLatest);

        ServicePolicies sp = new ServicePolicies();
        sp.setServiceName("svc");
        sp.setPolicies(new ArrayList<>());
        sp.setPolicyVersion(2L);

        try (MockedStatic<RangerPolicyDeltaUtil> mocked = Mockito.mockStatic(RangerPolicyDeltaUtil.class)) {
            mocked.when(() -> RangerPolicyDeltaUtil.hasPolicyDeltas(sp)).thenReturn(Boolean.TRUE);
            when(svcStore.getServicePoliciesIfUpdated("svc", -1L, ServiceDBStore.isSupportsPolicyDeltas()))
                    .thenReturn(sp);
            // Since there is no existing admin, deltas path logs error and returns null
            RangerPolicyAdmin admin = cache.getServicePoliciesAdmin("svc", svcStore, roleStore, zoneStore, opts);
            assertNull(admin);
        }
    }

    @Test
    public void testAddOrUpdatePolicyAdmin_WithDeltasAndOldPresent_ReplacesAndReleasesOld() throws Exception {
        RangerPolicyEngineOptions opts = new RangerPolicyEngineOptions();
        RangerRoles rolesLatest = new RangerRoles();
        ServicePolicies sp = new ServicePolicies();
        sp.setServiceName("svc");

        // Prepare existing wrapper with old admin
        RangerPolicyAdminImpl oldAdmin = Mockito.mock(RangerPolicyAdminImpl.class);
        RangerPolicyAdminCache.RangerPolicyAdminWrapper wrapper = new RangerPolicyAdminCache.RangerPolicyAdminWrapper(
                oldAdmin);

        // New admin returned by delta-apply
        RangerPolicyAdminImpl newAdmin = Mockito.mock(RangerPolicyAdminImpl.class);

        try (MockedStatic<RangerPolicyDeltaUtil> mockedDelta = Mockito.mockStatic(RangerPolicyDeltaUtil.class);
                MockedStatic<RangerPolicyAdminImpl> mockedAdmin = Mockito.mockStatic(RangerPolicyAdminImpl.class)) {
            mockedDelta.when(() -> RangerPolicyDeltaUtil.hasPolicyDeltas(sp)).thenReturn(Boolean.TRUE);
            mockedAdmin.when(() -> RangerPolicyAdminImpl.getPolicyAdmin(oldAdmin, sp)).thenReturn(newAdmin);

            Method m = RangerPolicyAdminCache.class.getDeclaredMethod("addOrUpdatePolicyAdmin",
                    RangerPolicyAdminCache.RangerPolicyAdminWrapper.class, ServicePolicies.class, RangerRoles.class,
                    RangerPolicyEngineOptions.class);
            m.setAccessible(true);
            RangerPolicyAdminCache.RangerPolicyAdminWrapper ret = (RangerPolicyAdminCache.RangerPolicyAdminWrapper) m
                    .invoke(cache, wrapper, sp, rolesLatest, opts);

            assertNotNull(ret);
            // returned wrapper should be built around new admin
            assertEquals(newAdmin, ret.getPolicyAdmin());
            // roles should be set on new admin in deltas path
            Mockito.verify(newAdmin).setRoles(rolesLatest);
            // old admin should be released with releasePolicyEngine=false since engine is
            // shared
            Mockito.verify(oldAdmin).releaseResources(false);
        }
    }

    @Test
    public void testAddOrUpdatePolicyAdmin_HasPolicyDeltasNull_KeepsOld() throws Exception {
        RangerPolicyEngineOptions opts = new RangerPolicyEngineOptions();
        RangerRoles rolesLatest = new RangerRoles();
        ServicePolicies sp = new ServicePolicies();
        sp.setServiceName("svc");

        RangerPolicyAdminImpl oldAdmin = Mockito.mock(RangerPolicyAdminImpl.class);
        RangerPolicyAdminCache.RangerPolicyAdminWrapper wrapper = new RangerPolicyAdminCache.RangerPolicyAdminWrapper(
                oldAdmin);

        try (MockedStatic<RangerPolicyDeltaUtil> mockedDelta = Mockito.mockStatic(RangerPolicyDeltaUtil.class)) {
            mockedDelta.when(() -> RangerPolicyDeltaUtil.hasPolicyDeltas(sp)).thenReturn(null);

            Method m = RangerPolicyAdminCache.class.getDeclaredMethod("addOrUpdatePolicyAdmin",
                    RangerPolicyAdminCache.RangerPolicyAdminWrapper.class, ServicePolicies.class, RangerRoles.class,
                    RangerPolicyEngineOptions.class);
            m.setAccessible(true);
            RangerPolicyAdminCache.RangerPolicyAdminWrapper ret = (RangerPolicyAdminCache.RangerPolicyAdminWrapper) m
                    .invoke(cache, wrapper, sp, rolesLatest, opts);

            assertNotNull(ret);
            assertEquals(oldAdmin, ret.getPolicyAdmin());
            Mockito.verify(oldAdmin, Mockito.never()).releaseResources(Mockito.anyBoolean());
        }
    }
}
