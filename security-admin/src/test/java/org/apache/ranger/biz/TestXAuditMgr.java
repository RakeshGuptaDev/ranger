/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.apache.ranger.biz;

import org.apache.ranger.amazon.cloudwatch.CloudWatchAccessAuditsService;
import org.apache.ranger.common.RESTErrorUtil;
import org.apache.ranger.common.SearchCriteria;
import org.apache.ranger.common.UserSessionBase;
import org.apache.ranger.elasticsearch.ElasticSearchAccessAuditsService;
import org.apache.ranger.entity.XXPortalUser;
import org.apache.ranger.plugin.store.PList;
import org.apache.ranger.security.context.RangerContextHolder;
import org.apache.ranger.security.context.RangerSecurityContext;
import org.apache.ranger.service.RangerTrxLogV2Service;
import org.apache.ranger.service.XAccessAuditService;
import org.apache.ranger.solr.SolrAccessAuditsService;
import org.apache.ranger.view.VXAccessAudit;
import org.apache.ranger.view.VXAccessAuditList;
import org.apache.ranger.view.VXLong;
import org.apache.ranger.view.VXTrxLog;
import org.apache.ranger.view.VXTrxLogV2;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;

import javax.servlet.http.HttpServletResponse;
import javax.ws.rs.WebApplicationException;
import javax.ws.rs.core.Response;

import java.lang.reflect.Field;
import java.util.ArrayList;

import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.eq;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

/**
* @generated by Cursor
* @description <Unit Test for TestXAuditMgr class>
*/
@ExtendWith(MockitoExtension.class)
@TestMethodOrder(MethodOrderer.MethodName.class)
public class TestXAuditMgr {
    private static void setField(Object target, Class<?> declaring, String fieldName, Object value) throws Exception {
        Field f = declaring.getDeclaredField(fieldName);
        f.setAccessible(true);
        f.set(target, value);
    }

    private static UserSessionBase newSession(boolean isAdmin) {
        UserSessionBase s = new UserSessionBase();
        s.setUserAdmin(isAdmin);
        return s;
    }

    @Test
    public void testGetXTrxLog_allowsAdmin_deniesNonAdmin() throws Exception {
        XAuditMgr mgr = new XAuditMgr();
        RangerBizUtil biz = mock(RangerBizUtil.class);
        setField(mgr, XAuditMgr.class, "rangerBizUtil", biz);
        RangerTrxLogV2Service xTrxLogService = mock(RangerTrxLogV2Service.class);
        setField(mgr, XAuditMgrBase.class, "xTrxLogService", xTrxLogService);
        VXTrxLogV2 v2 = new VXTrxLogV2();
        v2.setId(1L);
        when(xTrxLogService.readResource(1L)).thenReturn(v2);

        when(biz.isAdmin()).thenReturn(true);
        when(biz.isKeyAdmin()).thenReturn(false);
        when(biz.isAuditAdmin()).thenReturn(false);
        when(biz.isAuditKeyAdmin()).thenReturn(false);
        Assertions.assertNotNull(mgr.getXTrxLog(1L));

        when(biz.isAdmin()).thenReturn(false);
        RESTErrorUtil restErrorUtil = mock(RESTErrorUtil.class);
        setField(mgr, XAuditMgrBase.class, "restErrorUtil", restErrorUtil);
        WebApplicationException expectedEx = new WebApplicationException(Response.status(HttpServletResponse.SC_FORBIDDEN).build());
        when(restErrorUtil.createRESTException(eq(HttpServletResponse.SC_FORBIDDEN), any(String.class), eq(true))).thenReturn(expectedEx);

        WebApplicationException thrown = Assertions.assertThrows(WebApplicationException.class, () -> mgr.getXTrxLog(2L));
        Assertions.assertEquals(HttpServletResponse.SC_FORBIDDEN, thrown.getResponse().getStatus());
    }

    @Test
    public void testCreateUpdateDeleteXTrxLog_checksAdmin() throws Exception {
        XAuditMgr mgr = new XAuditMgr();
        RangerBizUtil biz = mock(RangerBizUtil.class);
        RESTErrorUtil restErrorUtil = mock(RESTErrorUtil.class);
        setField(mgr, XAuditMgr.class, "rangerBizUtil", biz);
        setField(mgr, XAuditMgrBase.class, "restErrorUtil", restErrorUtil);

        WebApplicationException unauth = new WebApplicationException(Response.status(HttpServletResponse.SC_UNAUTHORIZED).build());
        when(restErrorUtil.generateRESTException(any())).thenReturn(unauth);
        RangerContextHolder.resetSecurityContext();
        Assertions.assertThrows(WebApplicationException.class, () -> mgr.createXTrxLog(new VXTrxLog()));
        Assertions.assertThrows(WebApplicationException.class, () -> mgr.updateXTrxLog(new VXTrxLog()));
        Assertions.assertThrows(WebApplicationException.class, () -> mgr.deleteXTrxLog(1L, true));

        RangerSecurityContext ctx = new RangerSecurityContext();
        UserSessionBase notAdmin = newSession(false);
        XXPortalUser user = new XXPortalUser();
        user.setId(123L);
        notAdmin.setXXPortalUser(user);
        ctx.setUserSession(notAdmin);
        RangerContextHolder.setSecurityContext(ctx);
        WebApplicationException forbidden = new WebApplicationException(Response.status(HttpServletResponse.SC_FORBIDDEN).build());
        when(restErrorUtil.create403RESTException(any(String.class))).thenReturn(forbidden);
        Assertions.assertThrows(WebApplicationException.class, () -> mgr.createXTrxLog(new VXTrxLog()));
        Assertions.assertThrows(WebApplicationException.class, () -> mgr.updateXTrxLog(new VXTrxLog()));
        Assertions.assertThrows(WebApplicationException.class, () -> mgr.deleteXTrxLog(1L, true));

        UserSessionBase admin = newSession(true);
        XXPortalUser adminUser = new XXPortalUser();
        adminUser.setId(1L);
        admin.setXXPortalUser(adminUser);
        ctx.setUserSession(admin);

        RangerTrxLogV2Service xTrxLogService = mock(RangerTrxLogV2Service.class);
        setField(mgr, XAuditMgrBase.class, "xTrxLogService", xTrxLogService);
        when(xTrxLogService.updateResource(any(VXTrxLogV2.class))).thenReturn(new VXTrxLogV2());
        when(xTrxLogService.createResource(any(VXTrxLogV2.class))).thenReturn(new VXTrxLogV2());
        Assertions.assertDoesNotThrow(() -> mgr.createXTrxLog(new VXTrxLog()));
        Assertions.assertDoesNotThrow(() -> mgr.updateXTrxLog(new VXTrxLog()));
        Assertions.assertDoesNotThrow(() -> mgr.deleteXTrxLog(1L, true));
    }

    @Test
    public void testSearchXTrxLogs_and_Count_accessCheck() throws Exception {
        XAuditMgr mgr = new XAuditMgr();
        RangerBizUtil biz = mock(RangerBizUtil.class);
        RESTErrorUtil restErrorUtil = mock(RESTErrorUtil.class);
        setField(mgr, XAuditMgr.class, "rangerBizUtil", biz);
        setField(mgr, XAuditMgrBase.class, "restErrorUtil", restErrorUtil);
        RangerTrxLogV2Service xTrxLogService = mock(RangerTrxLogV2Service.class);
        setField(mgr, XAuditMgrBase.class, "xTrxLogService", xTrxLogService);
        PList<VXTrxLogV2> plist = new PList<>();
        plist.setList(new ArrayList<>());
        when(xTrxLogService.searchTrxLogs(any(SearchCriteria.class))).thenReturn(plist);
        when(xTrxLogService.getTrxLogsCount(any(SearchCriteria.class))).thenReturn(0L);

        SearchCriteria criteria = new SearchCriteria();
        WebApplicationException forbidden = new WebApplicationException(Response.status(HttpServletResponse.SC_FORBIDDEN).build());
        when(restErrorUtil.createRESTException(eq(HttpServletResponse.SC_FORBIDDEN), any(String.class), eq(true))).thenReturn(forbidden);

        when(biz.isAdmin()).thenReturn(false);
        when(biz.isKeyAdmin()).thenReturn(false);
        when(biz.isAuditAdmin()).thenReturn(false);
        when(biz.isAuditKeyAdmin()).thenReturn(false);
        Assertions.assertThrows(WebApplicationException.class, () -> mgr.searchXTrxLogs(criteria));
        Assertions.assertThrows(WebApplicationException.class, () -> mgr.getXTrxLogSearchCount(criteria));

        when(biz.isAdmin()).thenReturn(true);
        Assertions.assertDoesNotThrow(() -> mgr.searchXTrxLogs(criteria));
        Assertions.assertDoesNotThrow(() -> mgr.getXTrxLogSearchCount(criteria));
    }

    @Test
    public void testSearchXAccessAudits_routingByAuditDBType() throws Exception {
        XAuditMgr mgr = new XAuditMgr();
        RangerBizUtil biz = mock(RangerBizUtil.class);
        SolrAccessAuditsService solr = mock(SolrAccessAuditsService.class);
        ElasticSearchAccessAuditsService open = mock(ElasticSearchAccessAuditsService.class);
        CloudWatchAccessAuditsService cloud = mock(CloudWatchAccessAuditsService.class);
        setField(mgr, XAuditMgr.class, "rangerBizUtil", biz);
        setField(mgr, XAuditMgr.class, "solrAccessAuditsService", solr);
        setField(mgr, XAuditMgr.class, "elasticSearchAccessAuditsService", open);
        setField(mgr, XAuditMgr.class, "cloudWatchAccessAuditsService", cloud);

        SearchCriteria criteria = new SearchCriteria();
        VXAccessAuditList list = new VXAccessAuditList();

        when(biz.getAuditDBType()).thenReturn(RangerBizUtil.AUDIT_STORE_SOLR);
        when(solr.searchXAccessAudits(criteria)).thenReturn(list);
        Assertions.assertSame(list, mgr.searchXAccessAudits(criteria));
        verify(solr, times(1)).searchXAccessAudits(criteria);

        when(biz.getAuditDBType()).thenReturn(RangerBizUtil.AUDIT_STORE_ELASTIC_SEARCH);
        when(open.searchXAccessAudits(criteria)).thenReturn(list);
        Assertions.assertSame(list, mgr.searchXAccessAudits(criteria));
        verify(open, times(1)).searchXAccessAudits(criteria);

        when(biz.getAuditDBType()).thenReturn(RangerBizUtil.AUDIT_STORE_CLOUD_WATCH);
        when(cloud.searchXAccessAudits(criteria)).thenReturn(list);
        Assertions.assertSame(list, mgr.searchXAccessAudits(criteria));
        verify(cloud, times(1)).searchXAccessAudits(criteria);
    }

    @Test
    public void testGetXAccessAuditSearchCount_routingByAuditDBType() throws Exception {
        XAuditMgr mgr = new XAuditMgr();
        RangerBizUtil biz = mock(RangerBizUtil.class);
        SolrAccessAuditsService solr = mock(SolrAccessAuditsService.class);
        ElasticSearchAccessAuditsService open = mock(ElasticSearchAccessAuditsService.class);
        CloudWatchAccessAuditsService cloud = mock(CloudWatchAccessAuditsService.class);
        setField(mgr, XAuditMgr.class, "rangerBizUtil", biz);
        setField(mgr, XAuditMgr.class, "solrAccessAuditsService", solr);
        setField(mgr, XAuditMgr.class, "elasticSearchAccessAuditsService", open);
        setField(mgr, XAuditMgr.class, "cloudWatchAccessAuditsService", cloud);

        SearchCriteria criteria = new SearchCriteria();
        VXLong count = new VXLong();

        when(biz.getAuditDBType()).thenReturn(RangerBizUtil.AUDIT_STORE_SOLR);
        when(solr.getXAccessAuditSearchCount(criteria)).thenReturn(count);
        Assertions.assertSame(count, mgr.getXAccessAuditSearchCount(criteria));

        when(biz.getAuditDBType()).thenReturn(RangerBizUtil.AUDIT_STORE_ELASTIC_SEARCH);
        when(open.getXAccessAuditSearchCount(criteria)).thenReturn(count);
        Assertions.assertSame(count, mgr.getXAccessAuditSearchCount(criteria));

        when(biz.getAuditDBType()).thenReturn(RangerBizUtil.AUDIT_STORE_CLOUD_WATCH);
        when(cloud.getXAccessAuditSearchCount(criteria)).thenReturn(count);
        Assertions.assertSame(count, mgr.getXAccessAuditSearchCount(criteria));
    }

    @Test
    public void testXAccessAudit_create_update_delete_accessChecks() throws Exception {
        XAuditMgr mgr = new XAuditMgr();
        RangerBizUtil biz = mock(RangerBizUtil.class);
        RESTErrorUtil restErrorUtil = mock(RESTErrorUtil.class);
        setField(mgr, XAuditMgr.class, "rangerBizUtil", biz);
        setField(mgr, XAuditMgrBase.class, "restErrorUtil", restErrorUtil);

        // non-admin path should throw
        RangerSecurityContext ctx = new RangerSecurityContext();
        UserSessionBase notAdmin = newSession(false);
        XXPortalUser user = new XXPortalUser();
        user.setId(123L);
        notAdmin.setXXPortalUser(user);
        ctx.setUserSession(notAdmin);
        RangerContextHolder.setSecurityContext(ctx);
        WebApplicationException forbidden = new WebApplicationException(Response.status(HttpServletResponse.SC_FORBIDDEN).build());
        when(restErrorUtil.create403RESTException(any(String.class))).thenReturn(forbidden);
        Assertions.assertThrows(WebApplicationException.class, () -> mgr.createXAccessAudit(new VXAccessAudit()));
        Assertions.assertThrows(WebApplicationException.class, () -> mgr.updateXAccessAudit(new VXAccessAudit()));
        Assertions.assertThrows(WebApplicationException.class, () -> mgr.deleteXAccessAudit(1L, true));

        // admin path delegates
        UserSessionBase admin = newSession(true);
        XXPortalUser adminUser = new XXPortalUser();
        adminUser.setId(1L);
        admin.setXXPortalUser(adminUser);
        ctx.setUserSession(admin);

        XAccessAuditService xAccessAuditService = mock(XAccessAuditService.class);
        setField(mgr, XAuditMgrBase.class, "xAccessAuditService", xAccessAuditService);
        when(xAccessAuditService.createResource(any(VXAccessAudit.class))).thenReturn(new VXAccessAudit());
        when(xAccessAuditService.updateResource(any(VXAccessAudit.class))).thenReturn(new VXAccessAudit());
        Assertions.assertDoesNotThrow(() -> mgr.createXAccessAudit(new VXAccessAudit()));
        Assertions.assertDoesNotThrow(() -> mgr.updateXAccessAudit(new VXAccessAudit()));
        Assertions.assertDoesNotThrow(() -> mgr.deleteXAccessAudit(1L, true));
    }
}
