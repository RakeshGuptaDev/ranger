/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.ranger.biz;

import org.apache.ranger.authorization.utils.JsonUtils;
import org.apache.ranger.db.RangerDaoManager;
import org.apache.ranger.db.XXPolicyDao;
import org.apache.ranger.db.XXPolicyLabelDao;
import org.apache.ranger.db.XXPolicyLabelMapDao;
import org.apache.ranger.db.XXPolicyRefAccessTypeDao;
import org.apache.ranger.db.XXPolicyRefConditionDao;
import org.apache.ranger.db.XXPolicyRefDataMaskTypeDao;
import org.apache.ranger.db.XXPolicyRefGroupDao;
import org.apache.ranger.db.XXPolicyRefResourceDao;
import org.apache.ranger.db.XXPolicyRefRoleDao;
import org.apache.ranger.db.XXPolicyRefUserDao;
import org.apache.ranger.db.XXServiceDao;
import org.apache.ranger.db.XXServiceDefDao;
import org.apache.ranger.entity.XXPolicy;
import org.apache.ranger.entity.XXPolicyLabel;
import org.apache.ranger.entity.XXPolicyLabelMap;
import org.apache.ranger.entity.XXService;
import org.apache.ranger.entity.XXServiceDef;
import org.apache.ranger.plugin.model.RangerPolicy;
import org.apache.ranger.plugin.model.RangerPolicy.RangerDataMaskPolicyItem;
import org.apache.ranger.plugin.model.RangerPolicy.RangerPolicyItem;
import org.apache.ranger.plugin.model.RangerPolicy.RangerPolicyItemAccess;
import org.apache.ranger.plugin.model.RangerPolicy.RangerPolicyItemCondition;
import org.apache.ranger.plugin.model.RangerPolicy.RangerPolicyItemDataMaskInfo;
import org.apache.ranger.plugin.model.RangerPolicy.RangerPolicyResource;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.MockedStatic;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

/**
 * @generated by Cursor
 * @description <Unit Test for TestRangerPolicyRetriever class>
 */
@ExtendWith(MockitoExtension.class)
@TestMethodOrder(MethodOrderer.MethodName.class)
public class TestRangerPolicyRetriever {
    @Mock
    RangerDaoManager daoMgr;

    private RangerPolicyRetriever createRetriever() {
        return new RangerPolicyRetriever(daoMgr);
    }

    @Test
    public void test01_asList_nullAndNonNull() {
        List<XXPolicy> empty = RangerPolicyRetriever.asList(null);
        Assertions.assertNotNull(empty);
        Assertions.assertTrue(empty.isEmpty());

        XXPolicy xp = new XXPolicy();
        List<XXPolicy> one = RangerPolicyRetriever.asList(xp);
        Assertions.assertEquals(1, one.size());
        Assertions.assertSame(xp, one.get(0));
    }

    @Test
    public void test02_getServicePoliciesById_nullAndServiceMissing() {
        RangerPolicyRetriever r = createRetriever();
        Assertions.assertNull(r.getServicePolicies((Long) null));

        XXServiceDao xxServiceDao = mock(XXServiceDao.class);
        when(daoMgr.getXXService()).thenReturn(xxServiceDao);
        when(xxServiceDao.getById(5L)).thenReturn(null);

        Assertions.assertNull(r.getServicePolicies(5L));
    }

    @Test
    public void test03_getServicePoliciesByName_nullAndServiceMissing() {
        RangerPolicyRetriever r = createRetriever();
        Assertions.assertNull(r.getServicePolicies((String) null));

        XXServiceDao xxServiceDao = mock(XXServiceDao.class);
        when(daoMgr.getXXService()).thenReturn(xxServiceDao);
        when(xxServiceDao.findByName("svc")).thenReturn(null);

        Assertions.assertNull(r.getServicePolicies("svc"));
    }

    @Test
    public void test04_getServicePolicies_success_noRenames() {
        RangerPolicyRetriever r = createRetriever();

        XXService xService = new XXService();
        xService.setId(10L);
        xService.setName("svc");
        xService.setType(7L);

        XXServiceDef xServiceDef = new XXServiceDef();
        xServiceDef.setName("type-a");

        XXServiceDao xxServiceDao = mock(XXServiceDao.class);
        XXServiceDefDao xxServiceDefDao = mock(XXServiceDefDao.class);
        XXPolicyDao xxPolicyDao = mock(XXPolicyDao.class);
        XXPolicyLabelMapDao xxPolicyLabelMapDao = mock(XXPolicyLabelMapDao.class);
        XXPolicyLabelDao xxPolicyLabelDao = mock(XXPolicyLabelDao.class);
        XXPolicyRefRoleDao xxRole = mock(XXPolicyRefRoleDao.class);
        XXPolicyRefGroupDao xxGroup = mock(XXPolicyRefGroupDao.class);
        XXPolicyRefUserDao xxUser = mock(XXPolicyRefUserDao.class);
        XXPolicyRefAccessTypeDao xxAccess = mock(XXPolicyRefAccessTypeDao.class);
        XXPolicyRefResourceDao xxRes = mock(XXPolicyRefResourceDao.class);
        XXPolicyRefDataMaskTypeDao xxMask = mock(XXPolicyRefDataMaskTypeDao.class);
        XXPolicyRefConditionDao xxCond = mock(XXPolicyRefConditionDao.class);

        when(daoMgr.getXXService()).thenReturn(xxServiceDao);
        when(daoMgr.getXXServiceDef()).thenReturn(xxServiceDefDao);
        when(daoMgr.getXXPolicy()).thenReturn(xxPolicyDao);
        when(daoMgr.getXXPolicyLabelMap()).thenReturn(xxPolicyLabelMapDao);
        when(daoMgr.getXXPolicyLabels()).thenReturn(xxPolicyLabelDao);
        when(daoMgr.getXXPolicyRefRole()).thenReturn(xxRole);
        when(daoMgr.getXXPolicyRefGroup()).thenReturn(xxGroup);
        when(daoMgr.getXXPolicyRefUser()).thenReturn(xxUser);
        when(daoMgr.getXXPolicyRefAccessType()).thenReturn(xxAccess);
        when(daoMgr.getXXPolicyRefResource()).thenReturn(xxRes);
        when(daoMgr.getXXPolicyRefDataMaskType()).thenReturn(xxMask);
        when(daoMgr.getXXPolicyRefCondition()).thenReturn(xxCond);

        when(xxServiceDao.findByName("svc")).thenReturn(xService);
        when(xxServiceDefDao.getById(7L)).thenReturn(xServiceDef);

        XXPolicy xp = new XXPolicy();
        xp.setId(1L);
        xp.setService(10L);
        xp.setPolicyText("{}");
        List<XXPolicy> xps = new ArrayList<>();
        xps.add(xp);
        when(xxPolicyDao.findByServiceId(10L)).thenReturn(xps);

        XXPolicyLabelMap lm = new XXPolicyLabelMap();
        lm.setPolicyId(1L);
        lm.setPolicyLabelId(100L);
        List<XXPolicyLabelMap> lmm = new ArrayList<>();
        lmm.add(lm);
        when(xxPolicyLabelMapDao.findByServiceId(10L)).thenReturn(lmm);

        XXPolicyLabel lab = new XXPolicyLabel();
        lab.setId(100L);
        lab.setPolicyLabel("lab1");
        when(xxPolicyLabelDao.getById(100L)).thenReturn(lab);

        when(xxRole.findUpdatedRoleNamesByService(10L)).thenReturn(Collections.emptyList());
        when(xxGroup.findUpdatedGroupNamesByService(10L)).thenReturn(Collections.emptyList());
        when(xxUser.findUpdatedUserNamesByService(10L)).thenReturn(Collections.emptyList());
        when(xxAccess.findUpdatedAccessNamesByService(10L)).thenReturn(Collections.emptyList());
        when(xxRes.findUpdatedResourceNamesByService(10L)).thenReturn(Collections.emptyList());
        when(xxMask.findUpdatedDataMaskNamesByService(10L)).thenReturn(Collections.emptyList());
        when(xxCond.findUpdatedConditionNamesByService(10L)).thenReturn(Collections.emptyList());

        RangerPolicy seed = new RangerPolicy();
        seed.setResource("db1", new RangerPolicyResource());
        RangerPolicyItem item = new RangerPolicyItem();
        List<RangerPolicyItem> items = new ArrayList<>();
        items.add(item);
        seed.setPolicyItems(items);

        try (MockedStatic<JsonUtils> mocked = Mockito.mockStatic(JsonUtils.class)) {
            mocked.when(() -> JsonUtils.jsonToObject(any(String.class), Mockito.eq(RangerPolicy.class)))
                    .thenReturn(seed);

            List<RangerPolicy> policies = r.getServicePolicies("svc");
            Assertions.assertNotNull(policies);
            Assertions.assertEquals(1, policies.size());
            RangerPolicy out = policies.get(0);
            Assertions.assertEquals(1L, out.getId());
            Assertions.assertEquals("svc", out.getService());
            Assertions.assertEquals("type-a", out.getServiceType());
            Assertions.assertEquals(1, out.getPolicyLabels().size());
            Assertions.assertEquals("lab1", out.getPolicyLabels().get(0));
        }
    }

    @Test
    public void test05_getServicePolicies_withRenamesApplied() {
        RangerPolicyRetriever r = createRetriever();

        XXService xService = new XXService();
        xService.setId(20L);
        xService.setName("svc2");
        xService.setType(8L);

        XXServiceDef xServiceDef = new XXServiceDef();
        xServiceDef.setName("type-b");

        XXServiceDao xxServiceDao = mock(XXServiceDao.class);
        XXServiceDefDao xxServiceDefDao = mock(XXServiceDefDao.class);
        XXPolicyDao xxPolicyDao = mock(XXPolicyDao.class);
        XXPolicyLabelMapDao xxPolicyLabelMapDao = mock(XXPolicyLabelMapDao.class);
        XXPolicyRefRoleDao xxRole = mock(XXPolicyRefRoleDao.class);
        XXPolicyRefGroupDao xxGroup = mock(XXPolicyRefGroupDao.class);
        XXPolicyRefUserDao xxUser = mock(XXPolicyRefUserDao.class);
        XXPolicyRefAccessTypeDao xxAccess = mock(XXPolicyRefAccessTypeDao.class);
        XXPolicyRefResourceDao xxRes = mock(XXPolicyRefResourceDao.class);
        XXPolicyRefDataMaskTypeDao xxMask = mock(XXPolicyRefDataMaskTypeDao.class);
        XXPolicyRefConditionDao xxCond = mock(XXPolicyRefConditionDao.class);

        when(daoMgr.getXXService()).thenReturn(xxServiceDao);
        when(daoMgr.getXXServiceDef()).thenReturn(xxServiceDefDao);
        when(daoMgr.getXXPolicy()).thenReturn(xxPolicyDao);
        when(daoMgr.getXXPolicyLabelMap()).thenReturn(xxPolicyLabelMapDao);
        when(daoMgr.getXXPolicyRefRole()).thenReturn(xxRole);
        when(daoMgr.getXXPolicyRefGroup()).thenReturn(xxGroup);
        when(daoMgr.getXXPolicyRefUser()).thenReturn(xxUser);
        when(daoMgr.getXXPolicyRefAccessType()).thenReturn(xxAccess);
        when(daoMgr.getXXPolicyRefResource()).thenReturn(xxRes);
        when(daoMgr.getXXPolicyRefDataMaskType()).thenReturn(xxMask);
        when(daoMgr.getXXPolicyRefCondition()).thenReturn(xxCond);

        when(xxServiceDao.getById(20L)).thenReturn(xService);
        when(xxServiceDefDao.getById(8L)).thenReturn(xServiceDef);

        XXPolicy xp = new XXPolicy();
        xp.setId(2L);
        xp.setService(20L);
        xp.setPolicyText("{}");
        List<XXPolicy> xps = new ArrayList<>();
        xps.add(xp);
        when(xxPolicyDao.findByServiceId(20L)).thenReturn(xps);

        List<RangerPolicyRetriever.PolicyTextNameMap> roleMap = new ArrayList<>();
        roleMap.add(new RangerPolicyRetriever.PolicyTextNameMap(2L, "roleOld", "roleNew"));
        when(xxRole.findUpdatedRoleNamesByService(20L)).thenReturn(roleMap);
        when(xxGroup.findUpdatedGroupNamesByService(20L)).thenReturn(Collections.emptyList());
        when(xxUser.findUpdatedUserNamesByService(20L)).thenReturn(Collections.emptyList());
        when(xxAccess.findUpdatedAccessNamesByService(20L)).thenReturn(Collections.emptyList());
        when(xxRes.findUpdatedResourceNamesByService(20L)).thenReturn(Collections.emptyList());
        when(xxMask.findUpdatedDataMaskNamesByService(20L)).thenReturn(Collections.emptyList());
        when(xxCond.findUpdatedConditionNamesByService(20L)).thenReturn(Collections.emptyList());

        RangerPolicy seed = new RangerPolicy();
        seed.setResource("db", new RangerPolicyResource());
        RangerPolicyItemAccess acc = new RangerPolicyItemAccess();
        acc.setType("read");
        RangerPolicyItemCondition cond = new RangerPolicyItemCondition();
        cond.setType("ip");
        RangerPolicyItem item = new RangerPolicyItem();
        item.setRoles(new ArrayList<>(Collections.singletonList("roleOld")));
        item.setGroups(new ArrayList<>(Collections.singletonList("g1")));
        item.setUsers(new ArrayList<>(Collections.singletonList("u1")));
        item.setAccesses(new ArrayList<>(Collections.singletonList(acc)));
        item.setConditions(new ArrayList<>(Collections.singletonList(cond)));
        List<RangerPolicyItem> items = new ArrayList<>();
        items.add(item);
        seed.setPolicyItems(items);
        RangerDataMaskPolicyItem dmItem = new RangerDataMaskPolicyItem();
        RangerPolicyItemDataMaskInfo mi = new RangerPolicyItemDataMaskInfo();
        mi.setDataMaskType("MASK");
        dmItem.setDataMaskInfo(mi);
        seed.setDataMaskPolicyItems(new ArrayList<>(Collections.singletonList(dmItem)));

        try (MockedStatic<JsonUtils> mocked = Mockito.mockStatic(JsonUtils.class)) {
            mocked.when(() -> JsonUtils.jsonToObject(any(String.class), Mockito.eq(RangerPolicy.class)))
                    .thenReturn(seed);

            List<RangerPolicy> policies = r.getServicePolicies(20L);
            Assertions.assertNotNull(policies);
            RangerPolicy out = policies.get(0);
            Assertions.assertEquals("roleNew", out.getPolicyItems().get(0).getRoles().get(0));
        }
    }

    @Test
    public void test06_getPolicyById_nullAndMissing() {
        RangerPolicyRetriever r = createRetriever();
        Assertions.assertNull(r.getPolicy((Long) null));

        XXPolicyDao xxPolicyDao = mock(XXPolicyDao.class);
        when(daoMgr.getXXPolicy()).thenReturn(xxPolicyDao);
        when(xxPolicyDao.getById(9L)).thenReturn(null);
        Assertions.assertNull(r.getPolicy(9L));
    }

    @Test
    public void test07_getPolicyById_success() {
        RangerPolicyRetriever r = createRetriever();

        XXPolicyDao xxPolicyDao = mock(XXPolicyDao.class);
        XXServiceDao xxServiceDao = mock(XXServiceDao.class);
        XXServiceDefDao xxServiceDefDao = mock(XXServiceDefDao.class);
        XXPolicyRefRoleDao xxRole = mock(XXPolicyRefRoleDao.class);
        XXPolicyRefGroupDao xxGroup = mock(XXPolicyRefGroupDao.class);
        XXPolicyRefUserDao xxUser = mock(XXPolicyRefUserDao.class);
        XXPolicyRefAccessTypeDao xxAccess = mock(XXPolicyRefAccessTypeDao.class);
        XXPolicyRefResourceDao xxRes = mock(XXPolicyRefResourceDao.class);
        XXPolicyRefDataMaskTypeDao xxMask = mock(XXPolicyRefDataMaskTypeDao.class);
        XXPolicyRefConditionDao xxCond = mock(XXPolicyRefConditionDao.class);
        XXPolicyLabelMapDao xxPolicyLabelMapDao = mock(XXPolicyLabelMapDao.class);

        when(daoMgr.getXXPolicy()).thenReturn(xxPolicyDao);
        when(daoMgr.getXXService()).thenReturn(xxServiceDao);
        when(daoMgr.getXXServiceDef()).thenReturn(xxServiceDefDao);
        when(daoMgr.getXXPolicyRefRole()).thenReturn(xxRole);
        when(daoMgr.getXXPolicyRefGroup()).thenReturn(xxGroup);
        when(daoMgr.getXXPolicyRefUser()).thenReturn(xxUser);
        when(daoMgr.getXXPolicyRefAccessType()).thenReturn(xxAccess);
        when(daoMgr.getXXPolicyRefResource()).thenReturn(xxRes);
        when(daoMgr.getXXPolicyRefDataMaskType()).thenReturn(xxMask);
        when(daoMgr.getXXPolicyRefCondition()).thenReturn(xxCond);
        when(daoMgr.getXXPolicyLabelMap()).thenReturn(xxPolicyLabelMapDao);

        XXPolicy xp = new XXPolicy();
        xp.setId(3L);
        xp.setService(30L);
        xp.setPolicyText("{}");
        when(xxPolicyDao.getById(3L)).thenReturn(xp);

        XXService xs = new XXService();
        xs.setId(30L);
        xs.setName("svc3");
        xs.setType(9L);
        when(xxServiceDao.getById(30L)).thenReturn(xs);

        XXServiceDef xsd = new XXServiceDef();
        xsd.setName("type-c");
        when(xxServiceDefDao.getById(9L)).thenReturn(xsd);

        when(xxRole.findUpdatedRoleNamesByPolicy(3L)).thenReturn(Collections.emptyList());
        when(xxGroup.findUpdatedGroupNamesByPolicy(3L)).thenReturn(Collections.emptyList());
        when(xxUser.findUpdatedUserNamesByPolicy(3L)).thenReturn(Collections.emptyList());
        when(xxAccess.findUpdatedAccessNamesByPolicy(3L)).thenReturn(Collections.emptyList());
        when(xxRes.findUpdatedResourceNamesByPolicy(3L)).thenReturn(Collections.emptyList());
        when(xxMask.findUpdatedDataMaskNamesByPolicy(3L)).thenReturn(Collections.emptyList());
        when(xxCond.findUpdatedConditionNamesByPolicy(3L)).thenReturn(Collections.emptyList());
        when(xxPolicyLabelMapDao.findByPolicyId(3L)).thenReturn(Collections.emptyList());

        RangerPolicy seed = new RangerPolicy();
        seed.setResource("dbX", new RangerPolicyResource());
        seed.setPolicyItems(new ArrayList<>());

        try (MockedStatic<JsonUtils> mocked = Mockito.mockStatic(JsonUtils.class)) {
            mocked.when(() -> JsonUtils.jsonToObject(any(String.class), Mockito.eq(RangerPolicy.class)))
                    .thenReturn(seed);

            RangerPolicy p = r.getPolicy(3L);
            Assertions.assertNotNull(p);
            Assertions.assertEquals(3L, p.getId());
            Assertions.assertEquals("svc3", p.getService());
            Assertions.assertEquals("type-c", p.getServiceType());
        }
    }

    @Test
    public void test08_getPolicy_overloads_withNulls() {
        RangerPolicyRetriever r = createRetriever();
        Assertions.assertNull(r.getPolicy((XXPolicy) null));

        XXPolicy xp = new XXPolicy();
        xp.setId(99L);
        xp.setService(999L);

        XXServiceDao xxServiceDao = mock(XXServiceDao.class);
        when(daoMgr.getXXService()).thenReturn(xxServiceDao);
        when(xxServiceDao.getById(999L)).thenReturn(null);

        Assertions.assertNull(r.getPolicy(xp));
    }
}
