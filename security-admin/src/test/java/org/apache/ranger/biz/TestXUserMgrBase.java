/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.ranger.biz;

import org.apache.ranger.common.MessageEnums;
import org.apache.ranger.common.RESTErrorUtil;
import org.apache.ranger.common.SearchCriteria;
import org.apache.ranger.service.XAuditMapService;
import org.apache.ranger.service.XGroupPermissionService;
import org.apache.ranger.service.XGroupService;
import org.apache.ranger.service.XGroupUserService;
import org.apache.ranger.service.XModuleDefService;
import org.apache.ranger.service.XPermMapService;
import org.apache.ranger.service.XUserPermissionService;
import org.apache.ranger.service.XUserService;
import org.apache.ranger.view.VXAuditMap;
import org.apache.ranger.view.VXAuditMapList;
import org.apache.ranger.view.VXGroup;
import org.apache.ranger.view.VXGroupList;
import org.apache.ranger.view.VXGroupPermissionList;
import org.apache.ranger.view.VXGroupUser;
import org.apache.ranger.view.VXGroupUserList;
import org.apache.ranger.view.VXLong;
import org.apache.ranger.view.VXModuleDefList;
import org.apache.ranger.view.VXModulePermissionList;
import org.apache.ranger.view.VXPermMap;
import org.apache.ranger.view.VXPermMapList;
import org.apache.ranger.view.VXUser;
import org.apache.ranger.view.VXUserList;
import org.apache.ranger.view.VXUserPermissionList;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;

import javax.ws.rs.WebApplicationException;

import java.lang.reflect.Field;

import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.eq;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

/**
 * @generated by Cursor
 * @description <Unit Test for TestXUserMgrBase class>
 */
@ExtendWith(MockitoExtension.class)
@TestMethodOrder(MethodOrderer.MethodName.class)
public class TestXUserMgrBase {
    private static class TestableXUserMgrBase extends XUserMgrBase {
    }

    private static void setField(Object target, String fieldName, Object value) throws Exception {
        Field f = XUserMgrBase.class.getDeclaredField(fieldName);
        f.setAccessible(true);
        f.set(target, value);
    }

    @Test
    public void test01_groupCrudAndSearch() throws Exception {
        TestableXUserMgrBase mgr = new TestableXUserMgrBase();
        XGroupService svc = mock(XGroupService.class);
        setField(mgr, "xGroupService", svc);

        VXGroup obj = new VXGroup();
        when(svc.readResource(1L)).thenReturn(obj);
        Assertions.assertSame(obj, mgr.getXGroup(1L));

        VXGroup created = new VXGroup();
        when(svc.createResource(obj)).thenReturn(created);
        Assertions.assertSame(created, mgr.createXGroup(obj));

        VXGroup updated = new VXGroup();
        when(svc.updateResource(obj)).thenReturn(updated);
        Assertions.assertSame(updated, mgr.updateXGroup(obj));

        mgr.deleteXGroup(7L, true);
        verify(svc).deleteResource(7L);

        RESTErrorUtil rest = mock(RESTErrorUtil.class);
        setField(mgr, "restErrorUtil", rest);
        WebApplicationException expected = new WebApplicationException();
        when(rest.createRESTException(eq("serverMsg.modelMgrBaseDeleteModel"),
                eq(MessageEnums.OPER_NOT_ALLOWED_FOR_ENTITY))).thenReturn(expected);
        Assertions.assertThrows(WebApplicationException.class, () -> mgr.deleteXGroup(8L, false));

        VXGroupList list = new VXGroupList();
        SearchCriteria sc = new SearchCriteria();
        when(svc.searchXGroups(sc)).thenReturn(list);
        Assertions.assertSame(list, mgr.searchXGroups(sc));

        VXLong count = new VXLong();
        when(svc.getSearchCount(eq(sc), any())).thenReturn(count);
        Assertions.assertSame(count, mgr.getXGroupSearchCount(sc));
    }

    @Test
    public void test02_userCrudAndSearch() throws Exception {
        TestableXUserMgrBase mgr = new TestableXUserMgrBase();
        XUserService svc = mock(XUserService.class);
        setField(mgr, "xUserService", svc);

        VXUser obj = new VXUser();
        when(svc.readResource(1L)).thenReturn(obj);
        Assertions.assertSame(obj, mgr.getXUser(1L));

        VXUser created = new VXUser();
        when(svc.createResource(obj)).thenReturn(created);
        Assertions.assertSame(created, mgr.createXUser(obj));

        VXUser updated = new VXUser();
        when(svc.updateResource(obj)).thenReturn(updated);
        Assertions.assertSame(updated, mgr.updateXUser(obj));

        mgr.deleteXUser(7L, true);
        verify(svc).deleteResource(7L);

        RESTErrorUtil rest = mock(RESTErrorUtil.class);
        setField(mgr, "restErrorUtil", rest);
        WebApplicationException expected = new WebApplicationException();
        when(rest.createRESTException(eq("serverMsg.modelMgrBaseDeleteModel"),
                eq(MessageEnums.OPER_NOT_ALLOWED_FOR_ENTITY))).thenReturn(expected);
        Assertions.assertThrows(WebApplicationException.class, () -> mgr.deleteXUser(8L, false));

        VXUserList list = new VXUserList();
        SearchCriteria sc = new SearchCriteria();
        when(svc.searchXUsers(sc)).thenReturn(list);
        Assertions.assertSame(list, mgr.searchXUsers(sc));

        VXLong count = new VXLong();
        when(svc.getSearchCount(eq(sc), any())).thenReturn(count);
        Assertions.assertSame(count, mgr.getXUserSearchCount(sc));
    }

    @Test
    public void test03_groupUserCrudAndSearch() throws Exception {
        TestableXUserMgrBase mgr = new TestableXUserMgrBase();
        XGroupUserService svc = mock(XGroupUserService.class);
        setField(mgr, "xGroupUserService", svc);

        VXGroupUser obj = new VXGroupUser();
        when(svc.readResource(1L)).thenReturn(obj);
        Assertions.assertSame(obj, mgr.getXGroupUser(1L));

        VXGroupUser created = new VXGroupUser();
        when(svc.createResource(obj)).thenReturn(created);
        Assertions.assertSame(created, mgr.createXGroupUser(obj));

        VXGroupUser updated = new VXGroupUser();
        when(svc.updateResource(obj)).thenReturn(updated);
        Assertions.assertSame(updated, mgr.updateXGroupUser(obj));

        mgr.deleteXGroupUser(7L, true);
        verify(svc).deleteResource(7L);

        RESTErrorUtil rest = mock(RESTErrorUtil.class);
        setField(mgr, "restErrorUtil", rest);
        WebApplicationException expected = new WebApplicationException();
        when(rest.createRESTException(eq("serverMsg.modelMgrBaseDeleteModel"),
                eq(MessageEnums.OPER_NOT_ALLOWED_FOR_ENTITY))).thenReturn(expected);
        Assertions.assertThrows(WebApplicationException.class, () -> mgr.deleteXGroupUser(8L, false));

        VXGroupUserList list = new VXGroupUserList();
        SearchCriteria sc = new SearchCriteria();
        when(svc.searchXGroupUsers(sc)).thenReturn(list);
        Assertions.assertSame(list, mgr.searchXGroupUsers(sc));

        VXLong count = new VXLong();
        when(svc.getSearchCount(eq(sc), any())).thenReturn(count);
        Assertions.assertSame(count, mgr.getXGroupUserSearchCount(sc));
    }

    @Test
    public void test04_permMapCrudAndSearch() throws Exception {
        TestableXUserMgrBase mgr = new TestableXUserMgrBase();
        XPermMapService svc = mock(XPermMapService.class);
        setField(mgr, "xPermMapService", svc);

        VXPermMap obj = new VXPermMap();
        when(svc.readResource(1L)).thenReturn(obj);
        Assertions.assertSame(obj, mgr.getXPermMap(1L));

        VXPermMap created = new VXPermMap();
        when(svc.createResource(obj)).thenReturn(created);
        Assertions.assertSame(created, mgr.createXPermMap(obj));

        VXPermMap updated = new VXPermMap();
        when(svc.updateResource(obj)).thenReturn(updated);
        Assertions.assertSame(updated, mgr.updateXPermMap(obj));

        mgr.deleteXPermMap(7L, true);
        verify(svc).deleteResource(7L);

        RESTErrorUtil rest = mock(RESTErrorUtil.class);
        setField(mgr, "restErrorUtil", rest);
        WebApplicationException expected = new WebApplicationException();
        when(rest.createRESTException(eq("serverMsg.modelMgrBaseDeleteModel"),
                eq(MessageEnums.OPER_NOT_ALLOWED_FOR_ENTITY))).thenReturn(expected);
        Assertions.assertThrows(WebApplicationException.class, () -> mgr.deleteXPermMap(8L, false));

        VXPermMapList list = new VXPermMapList();
        SearchCriteria sc = new SearchCriteria();
        when(svc.searchXPermMaps(sc)).thenReturn(list);
        Assertions.assertSame(list, mgr.searchXPermMaps(sc));

        VXLong count = new VXLong();
        when(svc.getSearchCount(eq(sc), any())).thenReturn(count);
        Assertions.assertSame(count, mgr.getXPermMapSearchCount(sc));
    }

    @Test
    public void test05_auditMapCrudAndSearch() throws Exception {
        TestableXUserMgrBase mgr = new TestableXUserMgrBase();
        XAuditMapService svc = mock(XAuditMapService.class);
        setField(mgr, "xAuditMapService", svc);

        VXAuditMap obj = new VXAuditMap();
        when(svc.readResource(1L)).thenReturn(obj);
        Assertions.assertSame(obj, mgr.getXAuditMap(1L));

        VXAuditMap created = new VXAuditMap();
        when(svc.createResource(obj)).thenReturn(created);
        Assertions.assertSame(created, mgr.createXAuditMap(obj));

        VXAuditMap updated = new VXAuditMap();
        when(svc.updateResource(obj)).thenReturn(updated);
        Assertions.assertSame(updated, mgr.updateXAuditMap(obj));

        mgr.deleteXAuditMap(7L, true);
        verify(svc).deleteResource(7L);

        RESTErrorUtil rest = mock(RESTErrorUtil.class);
        setField(mgr, "restErrorUtil", rest);
        WebApplicationException expected = new WebApplicationException();
        when(rest.createRESTException(eq("serverMsg.modelMgrBaseDeleteModel"),
                eq(MessageEnums.OPER_NOT_ALLOWED_FOR_ENTITY))).thenReturn(expected);
        Assertions.assertThrows(WebApplicationException.class, () -> mgr.deleteXAuditMap(8L, false));

        VXAuditMapList list = new VXAuditMapList();
        SearchCriteria sc = new SearchCriteria();
        when(svc.searchXAuditMaps(sc)).thenReturn(list);
        Assertions.assertSame(list, mgr.searchXAuditMaps(sc));

        VXLong count = new VXLong();
        when(svc.getSearchCount(eq(sc), any())).thenReturn(count);
        Assertions.assertSame(count, mgr.getXAuditMapSearchCount(sc));
    }

    @Test
    public void test06_moduleAndPermissionSearchCounts() throws Exception {
        TestableXUserMgrBase mgr = new TestableXUserMgrBase();
        XModuleDefService modSvc = mock(XModuleDefService.class);
        XUserPermissionService usrPermSvc = mock(XUserPermissionService.class);
        XGroupPermissionService grpPermSvc = mock(XGroupPermissionService.class);
        setField(mgr, "xModuleDefService", modSvc);
        setField(mgr, "xUserPermissionService", usrPermSvc);
        setField(mgr, "xGroupPermissionService", grpPermSvc);

        SearchCriteria sc = new SearchCriteria();
        VXModuleDefList modList = new VXModuleDefList();
        when(modSvc.searchModuleDef(sc)).thenReturn(modList);
        Assertions.assertSame(modList, mgr.searchXModuleDef(sc));

        VXModulePermissionList modPermList = new VXModulePermissionList();
        when(modSvc.searchModuleDefList(sc)).thenReturn(modPermList);
        Assertions.assertSame(modPermList, mgr.searchXModuleDefList(sc));

        VXUserPermissionList userPermList = new VXUserPermissionList();
        when(usrPermSvc.searchXUserPermission(sc)).thenReturn(userPermList);
        Assertions.assertSame(userPermList, mgr.searchXUserPermission(sc));

        VXGroupPermissionList grpPermList = new VXGroupPermissionList();
        when(grpPermSvc.searchXGroupPermission(sc)).thenReturn(grpPermList);
        Assertions.assertSame(grpPermList, mgr.searchXGroupPermission(sc));

        VXLong c1 = new VXLong();
        when(modSvc.getSearchCount(eq(sc), any())).thenReturn(c1);
        Assertions.assertSame(c1, mgr.getXModuleDefSearchCount(sc));

        VXLong c2 = new VXLong();
        when(usrPermSvc.getSearchCount(eq(sc), any())).thenReturn(c2);
        Assertions.assertSame(c2, mgr.getXUserPermissionSearchCount(sc));

        VXLong c3 = new VXLong();
        when(grpPermSvc.getSearchCount(eq(sc), any())).thenReturn(c3);
        Assertions.assertSame(c3, mgr.getXGroupPermissionSearchCount(sc));
    }
}
